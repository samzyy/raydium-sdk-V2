{"version":3,"sources":["../../../src/raydium/launchpad/type.ts"],"sourcesContent":["import { PublicKey, Signer } from \"@solana/web3.js\";\r\nimport { ComputeBudgetConfig, TxTipConfig } from \"../type\";\r\nimport { TxVersion } from \"@/common\";\r\nimport BN from \"bn.js\";\r\nimport { LaunchpadPool, LaunchpadConfig, PlatformConfig } from \"./layout\";\r\n\r\nexport interface CreateLaunchPad<T = TxVersion.LEGACY> {\r\n  mintA: PublicKey;\r\n  name: string;\r\n  symbol: string;\r\n  buyAmount: BN;\r\n  platformId?: PublicKey;\r\n\r\n  programId?: PublicKey; // default mainnet\r\n  authProgramId?: PublicKey; // default mainnet\r\n  decimals?: number; // default 6\r\n  mintBDecimals?: number; // default 9\r\n  curType?: number; // default 0\r\n  configId: PublicKey;\r\n  configInfo?: LaunchpadConfigInfo;\r\n\r\n  minMintAAmount?: BN; // default calculated by realtime rpc data\r\n  slippage?: BN;\r\n\r\n  uri: string;\r\n  migrateType: \"amm\" | \"cpmm\";\r\n\r\n  supply?: BN;\r\n  totalSellA?: BN;\r\n  totalFundRaisingB?: BN;\r\n  totalLockedAmount?: BN;\r\n  cliffPeriod?: BN;\r\n  unlockPeriod?: BN;\r\n\r\n  shareFeeRate?: BN;\r\n  shareFeeReceiver?: PublicKey;\r\n  platformFeeRate?: BN; // for preload usage\r\n\r\n  createOnly?: boolean;\r\n\r\n  computeBudgetConfig?: ComputeBudgetConfig;\r\n  txTipConfig?: TxTipConfig;\r\n  txVersion?: T;\r\n  feePayer?: PublicKey;\r\n  associatedOnly?: boolean;\r\n  checkCreateATAOwner?: boolean;\r\n  extraSigners?: Signer[];\r\n}\r\n\r\nexport interface BuyToken<T = TxVersion.LEGACY> {\r\n  mintA: PublicKey;\r\n  buyAmount: BN;\r\n\r\n  programId?: PublicKey; // default mainnet\r\n  authProgramId?: PublicKey; // default mainnet\r\n  mintB?: PublicKey; // default SOL\r\n  poolInfo?: LaunchpadPoolInfo; // default calculated from mint\r\n  minMintAAmount?: BN; // default calculated by realtime rpc data\r\n  slippage?: BN;\r\n  shareFeeRate?: BN;\r\n  shareFeeReceiver?: PublicKey;\r\n\r\n  configInfo?: LaunchpadConfigInfo; // for preload usage\r\n  platformFeeRate?: BN; // for preload usage\r\n\r\n  computeBudgetConfig?: ComputeBudgetConfig;\r\n  txTipConfig?: TxTipConfig;\r\n  txVersion?: T;\r\n  feePayer?: PublicKey;\r\n  associatedOnly?: boolean;\r\n  checkCreateATAOwner?: boolean;\r\n}\r\n\r\nexport interface SellToken<T = TxVersion.LEGACY> {\r\n  mintA: PublicKey;\r\n  sellAmount: BN;\r\n  slippage?: BN;\r\n\r\n  programId?: PublicKey; // default mainnet\r\n  authProgramId?: PublicKey; // default mainnet\r\n  poolInfo?: LaunchpadPoolInfo; // default calculated from mint\r\n  mintB?: PublicKey; // default SOL\r\n  minAmountB?: BN; // default SOL decimals 9\r\n\r\n  shareFeeRate?: BN;\r\n  shareFeeReceiver?: PublicKey;\r\n\r\n  configInfo?: LaunchpadConfigInfo; // for preload usage\r\n  platformFeeRate?: BN; // for preload usage\r\n\r\n  computeBudgetConfig?: ComputeBudgetConfig;\r\n  txTipConfig?: TxTipConfig;\r\n  txVersion?: T;\r\n  feePayer?: PublicKey;\r\n  associatedOnly?: boolean;\r\n  checkCreateATAOwner?: boolean;\r\n}\r\n\r\nexport interface CreatePlatform<T = TxVersion.LEGACY> {\r\n  programId?: PublicKey;\r\n\r\n  platformAdmin: PublicKey;\r\n  platformClaimFeeWallet: PublicKey;\r\n  platformLockNftWallet: PublicKey;\r\n  cpConfigId: PublicKey;\r\n\r\n  migrateCpLockNftScale: {\r\n    platformScale: BN;\r\n    creatorScale: BN;\r\n    burnScale: BN;\r\n  };\r\n\r\n  feeRate: BN;\r\n  name: string;\r\n  web: string;\r\n  img: string;\r\n\r\n  computeBudgetConfig?: ComputeBudgetConfig;\r\n  txTipConfig?: TxTipConfig;\r\n  txVersion?: T;\r\n  feePayer?: PublicKey;\r\n}\r\n\r\nexport interface UpdatePlatform<T = TxVersion.LEGACY> {\r\n  programId?: PublicKey;\r\n\r\n  platformAdmin: PublicKey;\r\n  platformId?: PublicKey;\r\n\r\n  updateInfo:\r\n  | { type: \"updateClaimFeeWallet\"; value: PublicKey }\r\n  | { type: \"updateFeeRate\"; value: BN }\r\n  | { type: \"updateName\" | \"updateImg\" | \"updateWeb\"; value: string }\r\n  | { type: \"migrateCpLockNftScale\"; value: { platformScale: BN; creatorScale: BN; burnScale: BN } }\r\n  | { type: 'updateCpConfigId', value: PublicKey }\r\n  | {\r\n    type: 'updateAll', value: {\r\n      platformClaimFeeWallet: PublicKey,\r\n      platformLockNftWallet: PublicKey,\r\n      cpConfigId: PublicKey,\r\n      migrateCpLockNftScale: {\r\n        platformScale: BN,\r\n        creatorScale: BN,\r\n        burnScale: BN,\r\n      },\r\n      feeRate: BN,\r\n      name: string,\r\n      web: string,\r\n      img: string,\r\n    }\r\n  };\r\n\r\n  computeBudgetConfig?: ComputeBudgetConfig;\r\n  txTipConfig?: TxTipConfig;\r\n  txVersion?: T;\r\n  feePayer?: PublicKey;\r\n}\r\n\r\nexport interface ClaimPlatformFee<T = TxVersion.LEGACY> {\r\n  programId?: PublicKey;\r\n  authProgramId?: PublicKey;\r\n  platformId: PublicKey;\r\n  platformClaimFeeWallet: PublicKey;\r\n  poolId: PublicKey;\r\n\r\n  mintB?: PublicKey;\r\n  vaultB?: PublicKey;\r\n  mintBProgram?: PublicKey;\r\n\r\n  computeBudgetConfig?: ComputeBudgetConfig;\r\n  txTipConfig?: TxTipConfig;\r\n  txVersion?: T;\r\n  feePayer?: PublicKey;\r\n}\r\n\r\nexport interface ClaimAllPlatformFee<T = TxVersion.LEGACY> {\r\n  programId?: PublicKey;\r\n  authProgramId?: PublicKey;\r\n  platformId: PublicKey;\r\n  platformClaimFeeWallet: PublicKey;\r\n\r\n  computeBudgetConfig?: ComputeBudgetConfig;\r\n  txTipConfig?: TxTipConfig;\r\n  txVersion?: T;\r\n  feePayer?: PublicKey;\r\n}\r\n\r\nexport interface CreateVesting<T = TxVersion.LEGACY> {\r\n  programId?: PublicKey;\r\n  poolId: PublicKey;\r\n  beneficiary: PublicKey;\r\n  shareAmount: BN;\r\n\r\n  computeBudgetConfig?: ComputeBudgetConfig;\r\n  txTipConfig?: TxTipConfig;\r\n  txVersion?: T;\r\n  feePayer?: PublicKey;\r\n}\r\n\r\nexport interface ClaimVesting<T = TxVersion.LEGACY> {\r\n  programId?: PublicKey;\r\n  poolId: PublicKey;\r\n  poolInfo?: LaunchpadPoolInfo;\r\n\r\n  computeBudgetConfig?: ComputeBudgetConfig;\r\n  txTipConfig?: TxTipConfig;\r\n  txVersion?: T;\r\n  feePayer?: PublicKey;\r\n\r\n  associatedOnly?: boolean;\r\n  checkCreateATAOwner?: boolean;\r\n}\r\n\r\nexport type LaunchpadPoolInfo = ReturnType<typeof LaunchpadPool.decode>;\r\nexport type LaunchpadConfigInfo = ReturnType<typeof LaunchpadConfig.decode>;\r\nexport type LaunchpadPlatformInfo = ReturnType<typeof PlatformConfig.decode>;\r\n"],"mappings":"kWAAA","names":[]}