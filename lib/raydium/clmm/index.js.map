{"version":3,"sources":["../../../src/raydium/clmm/index.ts","../../../src/raydium/clmm/clmm.ts","../../../node_modules/decimal.js/decimal.mjs","../../../src/common/accountInfo.ts","../../../src/common/logger.ts","../../../src/common/bignumber.ts","../../../src/module/amount.ts","../../../src/module/formatter.ts","../../../src/module/fraction.ts","../../../src/common/constant.ts","../../../src/raydium/token/constant.ts","../../../src/module/token.ts","../../../src/common/pubKey.ts","../../../src/module/currency.ts","../../../src/module/percent.ts","../../../src/module/price.ts","../../../src/common/utility.ts","../../../src/common/lodash.ts","../../../src/common/pda.ts","../../../src/common/txTool/txUtils.ts","../../../src/common/txTool/txType.ts","../../../src/common/programId.ts","../../../src/common/transfer.ts","../../../src/common/txTool/lookupTable.ts","../../../src/common/txTool/txTool.ts","../../../src/common/fee.ts","../../../src/raydium/token/utils.ts","../../../src/raydium/moduleBase.ts","../../../src/raydium/clmm/instrument.ts","../../../src/marshmallow/index.ts","../../../src/marshmallow/buffer-layout.ts","../../../src/raydium/clmm/utils/tick.ts","../../../src/raydium/clmm/utils/constants.ts","../../../src/raydium/clmm/utils/math.ts","../../../src/raydium/clmm/utils/util.ts","../../../src/raydium/clmm/utils/pda.ts","../../../src/raydium/clmm/utils/pool.ts","../../../src/raydium/clmm/utils/position.ts","../../../src/raydium/clmm/utils/tickQuery.ts","../../../src/raydium/clmm/utils/tickarrayBitmap.ts","../../../src/raydium/clmm/layout.ts"],"sourcesContent":["export { Clmm } from \"./clmm\";\r\nexport * from \"./type\";\r\nexport * from \"./layout\";\r\nexport * from \"./instrument\";\r\nexport * from \"./utils/constants\";\r\nexport * from \"./utils/math\";\r\nexport * from \"./utils/pda\";\r\nexport * from \"./utils/pool\";\r\nexport * from \"./utils/position\";\r\nexport * from \"./utils/tick\";\r\nexport * from \"./utils/tickQuery\";\r\nexport * from \"./utils/tickarrayBitmap\";\r\nexport * from \"./utils/util\";\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { ApiV3PoolInfoConcentratedItem, ClmmKeys } from \"../../api/type\";\r\nimport {\r\n  CLMM_LOCK_AUTH_ID,\r\n  CLMM_LOCK_PROGRAM_ID,\r\n  CLMM_PROGRAM_ID,\r\n  InstructionType,\r\n  WSOLMint,\r\n  fetchMultipleMintInfos,\r\n  getATAAddress,\r\n  getMultipleAccountsInfoWithCustomFlags,\r\n} from \"@/common\";\r\nimport { AccountLayout, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { MakeMultiTxData, MakeTxData } from \"@/common/txTool/txTool\";\r\nimport { TxVersion } from \"@/common/txTool/txType\";\r\nimport { toApiV3Token, toFeeConfig } from \"../../raydium/token/utils\";\r\nimport { ComputeBudgetConfig, ReturnTypeFetchMultipleMintInfos, TxTipConfig } from \"../../raydium/type\";\r\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\r\nimport { MakeTransaction } from \"../type\";\r\nimport { ClmmInstrument } from \"./instrument\";\r\nimport { ClmmConfigLayout, ClmmPositionLayout, OperationLayout, PoolInfoLayout, PositionInfoLayout } from \"./layout\";\r\nimport {\r\n  ClmmRpcData,\r\n  ClosePositionExtInfo,\r\n  CollectRewardParams,\r\n  CollectRewardsParams,\r\n  ComputeClmmPoolInfo,\r\n  CreateConcentratedPool,\r\n  DecreaseLiquidity,\r\n  HarvestAllRewardsParams,\r\n  HarvestLockPosition,\r\n  IncreasePositionFromBase,\r\n  IncreasePositionFromLiquidity,\r\n  InitRewardExtInfo,\r\n  InitRewardParams,\r\n  InitRewardsParams,\r\n  LockPosition,\r\n  ManipulateLiquidityExtInfo,\r\n  OpenPositionFromBase,\r\n  OpenPositionFromBaseExtInfo,\r\n  OpenPositionFromLiquidity,\r\n  OpenPositionFromLiquidityExtInfo,\r\n  ReturnTypeFetchMultiplePoolTickArrays,\r\n  SetRewardParams,\r\n  SetRewardsParams,\r\n  ClmmLockAddress,\r\n} from \"./type\";\r\nimport { MAX_SQRT_PRICE_X64, MIN_SQRT_PRICE_X64, mockV3CreatePoolInfo, ZERO } from \"./utils/constants\";\r\nimport { MathUtil, SqrtPriceMath } from \"./utils/math\";\r\nimport {\r\n  getPdaOperationAccount,\r\n  getPdaPersonalPositionAddress,\r\n  getPdaLockClPositionIdV2,\r\n  getPdaTickArrayAddress,\r\n  getPdaProtocolPositionAddress,\r\n  getPdaExBitmapAccount,\r\n  getPdaMintExAccount,\r\n} from \"./utils/pda\";\r\nimport { PoolUtils, clmmComputeInfoToApiInfo } from \"./utils/pool\";\r\nimport { TickUtils } from \"./utils/tick\";\r\n\r\nexport class Clmm extends ModuleBase {\r\n  constructor(params: ModuleBaseProps) {\r\n    super(params);\r\n  }\r\n\r\n  public async getClmmPoolKeys(poolId: string): Promise<ClmmKeys> {\r\n    return ((await this.scope.api.fetchPoolKeysById({ idList: [poolId] })) as ClmmKeys[])[0];\r\n  }\r\n\r\n  public async createPool<T extends TxVersion>(\r\n    props: CreateConcentratedPool<T>,\r\n  ): Promise<MakeTxData<T, { mockPoolInfo: ApiV3PoolInfoConcentratedItem; address: ClmmKeys }>> {\r\n    const {\r\n      programId,\r\n      owner = this.scope.owner?.publicKey || PublicKey.default,\r\n      mint1,\r\n      mint2,\r\n      ammConfig,\r\n      initialPrice,\r\n      computeBudgetConfig,\r\n      forerunCreate,\r\n      getObserveState,\r\n      txVersion,\r\n      txTipConfig,\r\n      feePayer,\r\n    } = props;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const [mintA, mintB, initPrice] = new BN(new PublicKey(mint1.address).toBuffer()).gt(\r\n      new BN(new PublicKey(mint2.address).toBuffer()),\r\n    )\r\n      ? [mint2, mint1, new Decimal(1).div(initialPrice)]\r\n      : [mint1, mint2, initialPrice];\r\n\r\n    const initialPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(initPrice, mintA.decimals, mintB.decimals);\r\n\r\n    const extendMintAccount: PublicKey[] = [];\r\n    const fetchAccounts: PublicKey[] = [];\r\n    if (mintA.programId === TOKEN_2022_PROGRAM_ID.toBase58())\r\n      fetchAccounts.push(getPdaMintExAccount(programId, new PublicKey(mintA.address)).publicKey);\r\n    if (mintB.programId === TOKEN_2022_PROGRAM_ID.toBase58())\r\n      fetchAccounts.push(getPdaMintExAccount(programId, new PublicKey(mintB.address)).publicKey);\r\n    const extMintRes = await this.scope.connection.getMultipleAccountsInfo(fetchAccounts);\r\n\r\n    extMintRes.forEach((r, idx) => {\r\n      if (r) extendMintAccount.push(fetchAccounts[idx]);\r\n    });\r\n\r\n    const insInfo = await ClmmInstrument.createPoolInstructions({\r\n      connection: this.scope.connection,\r\n      programId,\r\n      owner,\r\n      mintA,\r\n      mintB,\r\n      ammConfigId: ammConfig.id,\r\n      initialPriceX64,\r\n      forerunCreate: !getObserveState && forerunCreate,\r\n      extendMintAccount,\r\n    });\r\n\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n\r\n    return txBuilder.versionBuild<{\r\n      mockPoolInfo: ApiV3PoolInfoConcentratedItem;\r\n      address: ClmmKeys;\r\n      forerunCreate?: boolean;\r\n    }>({\r\n      txVersion,\r\n      extInfo: {\r\n        address: {\r\n          ...insInfo.address,\r\n          observationId: insInfo.address.observationId.toBase58(),\r\n          exBitmapAccount: insInfo.address.exBitmapAccount.toBase58(),\r\n          programId: programId.toString(),\r\n          id: insInfo.address.poolId.toString(),\r\n          mintA,\r\n          mintB,\r\n          openTime: \"0\",\r\n          vault: { A: insInfo.address.mintAVault.toString(), B: insInfo.address.mintBVault.toString() },\r\n          rewardInfos: [],\r\n          config: {\r\n            id: ammConfig.id.toString(),\r\n            index: ammConfig.index,\r\n            protocolFeeRate: ammConfig.protocolFeeRate,\r\n            tradeFeeRate: ammConfig.tradeFeeRate,\r\n            tickSpacing: ammConfig.tickSpacing,\r\n            fundFeeRate: ammConfig.fundFeeRate,\r\n            description: ammConfig.description,\r\n            defaultRange: 0,\r\n            defaultRangePoint: [],\r\n          },\r\n        },\r\n        mockPoolInfo: {\r\n          type: \"Concentrated\",\r\n          rewardDefaultPoolInfos: \"Clmm\",\r\n          id: insInfo.address.poolId.toString(),\r\n          mintA,\r\n          mintB,\r\n          feeRate: ammConfig.tradeFeeRate,\r\n          openTime: \"0\",\r\n          programId: programId.toString(),\r\n          price: initPrice.toNumber(),\r\n          config: {\r\n            id: ammConfig.id.toString(),\r\n            index: ammConfig.index,\r\n            protocolFeeRate: ammConfig.protocolFeeRate,\r\n            tradeFeeRate: ammConfig.tradeFeeRate,\r\n            tickSpacing: ammConfig.tickSpacing,\r\n            fundFeeRate: ammConfig.fundFeeRate,\r\n            description: ammConfig.description,\r\n            defaultRange: 0,\r\n            defaultRangePoint: [],\r\n          },\r\n          burnPercent: 0,\r\n          ...mockV3CreatePoolInfo,\r\n        },\r\n        forerunCreate,\r\n      },\r\n    }) as Promise<MakeTxData<T, { mockPoolInfo: ApiV3PoolInfoConcentratedItem; address: ClmmKeys }>>;\r\n  }\r\n\r\n  public async openPositionFromBase<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    base,\r\n    baseAmount,\r\n    otherAmountMax,\r\n    nft2022,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    withMetadata = \"create\",\r\n    getEphemeralSigners,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: OpenPositionFromBase<T>): Promise<MakeTxData<T, OpenPositionFromBaseExtInfo>> {\r\n    if (this.scope.availability.addConcentratedPosition === false)\r\n      this.logAndCreateError(\"add position feature disabled in your region\");\r\n\r\n    this.scope.checkOwner();\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    let ownerTokenAccountA: PublicKey | null = null;\r\n    let ownerTokenAccountB: PublicKey | null = null;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n    const [amountA, amountB] = base === \"MintA\" ? [baseAmount, otherAmountMax] : [otherAmountMax, baseAmount];\r\n\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || amountA.isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey,\r\n              amount: amountA,\r\n            }\r\n            : undefined,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || amountB.isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey!,\r\n              amount: amountB,\r\n            }\r\n            : undefined,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n\r\n    if (!ownerTokenAccountA || !ownerTokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", {\r\n        ownerTokenAccountA: ownerTokenAccountA?.toBase58(),\r\n        ownerTokenAccountB: ownerTokenAccountB?.toBase58(),\r\n      });\r\n\r\n    const poolKeys = propPoolKeys || (await this.getClmmPoolKeys(poolInfo.id));\r\n    const insInfo = await ClmmInstrument.openPositionFromBaseInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        ...ownerInfo,\r\n        feePayer: this.scope.ownerPubKey,\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      tickLower,\r\n      tickUpper,\r\n      base,\r\n      baseAmount,\r\n      otherAmountMax,\r\n      withMetadata,\r\n      getEphemeralSigners,\r\n      nft2022,\r\n    });\r\n\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<OpenPositionFromBaseExtInfo>({\r\n      txVersion,\r\n      extInfo: { ...insInfo.address },\r\n    }) as Promise<MakeTxData<T, OpenPositionFromBaseExtInfo>>;\r\n  }\r\n\r\n  public async openPositionFromLiquidity<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    amountMaxA,\r\n    amountMaxB,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    withMetadata = \"create\",\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    getEphemeralSigners,\r\n    nft2022,\r\n    feePayer,\r\n  }: OpenPositionFromLiquidity<T>): Promise<MakeTxData<T, OpenPositionFromLiquidityExtInfo>> {\r\n    if (this.scope.availability.createConcentratedPosition === false)\r\n      this.logAndCreateError(\"open position feature disabled in your region\");\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    let ownerTokenAccountA: PublicKey | null = null;\r\n    let ownerTokenAccountB: PublicKey | null = null;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toBase58();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toBase58();\r\n\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || amountMaxA.isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey,\r\n              amount: amountMaxA,\r\n            }\r\n            : undefined,\r\n\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || amountMaxB.isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey!,\r\n              amount: amountMaxB,\r\n            }\r\n            : undefined,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n\r\n    if (ownerTokenAccountA === undefined || ownerTokenAccountB === undefined)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n\r\n    const poolKeys = propPoolKeys || (await this.getClmmPoolKeys(poolInfo.id));\r\n\r\n    const makeOpenPositionInstructions = await ClmmInstrument.openPositionFromLiquidityInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      tickLower,\r\n      tickUpper,\r\n      liquidity,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      withMetadata,\r\n      getEphemeralSigners,\r\n      nft2022,\r\n    });\r\n    txBuilder.addInstruction(makeOpenPositionInstructions);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<OpenPositionFromLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: makeOpenPositionInstructions.address },\r\n    }) as Promise<MakeTxData<T, OpenPositionFromLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async increasePositionFromLiquidity<T extends TxVersion>(\r\n    props: IncreasePositionFromLiquidity<T>,\r\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo>> {\r\n    const {\r\n      poolInfo,\r\n      poolKeys: propPoolKeys,\r\n      ownerPosition,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      liquidity,\r\n      ownerInfo,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      feePayer,\r\n    } = props;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\r\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\r\n\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || amountMaxA.isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey,\r\n              amount: amountMaxA,\r\n            }\r\n            : undefined,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || amountMaxB.isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey!,\r\n              amount: amountMaxB,\r\n            }\r\n            : undefined,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n\r\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    const ins = ClmmInstrument.increasePositionFromLiquidityInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerPosition,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      liquidity,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\r\n    });\r\n    txBuilder.addInstruction(ins);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: ins.address },\r\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async increasePositionFromBase<T extends TxVersion>(\r\n    props: IncreasePositionFromBase<T>,\r\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo>> {\r\n    const {\r\n      poolInfo,\r\n      ownerPosition,\r\n      base,\r\n      baseAmount,\r\n      otherAmountMax,\r\n      ownerInfo,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      feePayer,\r\n    } = props;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\r\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || (base === \"MintA\" ? baseAmount : otherAmountMax).isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey,\r\n              amount: base === \"MintA\" ? baseAmount : otherAmountMax,\r\n            }\r\n            : undefined,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || (base === \"MintA\" ? otherAmountMax : baseAmount).isZero()\r\n            ? {\r\n              payer: this.scope.ownerPubKey!,\r\n              amount: base === \"MintA\" ? otherAmountMax : baseAmount,\r\n            }\r\n            : undefined,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const ins = ClmmInstrument.increasePositionFromBaseInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerPosition,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      base,\r\n      baseAmount,\r\n      otherAmountMax,\r\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\r\n    });\r\n    txBuilder.addInstruction(ins);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: ins.address },\r\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async decreaseLiquidity<T extends TxVersion>(\r\n    props: DecreaseLiquidity<T>,\r\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo & Partial<ClosePositionExtInfo>>> {\r\n    const {\r\n      poolInfo,\r\n      poolKeys: propPoolKeys,\r\n      ownerPosition,\r\n      ownerInfo,\r\n      amountMinA,\r\n      amountMinB,\r\n      liquidity,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      feePayer,\r\n    } = props;\r\n    if (this.scope.availability.removeConcentratedPosition === false)\r\n      this.logAndCreateError(\"remove position feature disabled in your region\");\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\r\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\r\n    const { account: _ownerTokenAccountA, instructionParams: accountAInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerTokenAccountA = _ownerTokenAccountA;\r\n    accountAInstructions && txBuilder.addInstruction(accountAInstructions);\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: accountBInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerTokenAccountB = _ownerTokenAccountB;\r\n    accountBInstructions && txBuilder.addInstruction(accountBInstructions);\r\n\r\n    const rewardAccounts: PublicKey[] = [];\r\n    for (const itemReward of poolInfo.rewardDefaultInfos) {\r\n      const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n\r\n      let ownerRewardAccount: PublicKey | undefined;\r\n\r\n      if (itemReward.mint.address === poolInfo.mintA.address) ownerRewardAccount = ownerTokenAccountA;\r\n      else if (itemReward.mint.address === poolInfo.mintB.address) ownerRewardAccount = ownerTokenAccountB;\r\n      else {\r\n        const { account: _ownerRewardAccount, instructionParams: ownerRewardAccountInstructions } =\r\n          await this.scope.account.getOrCreateTokenAccount({\r\n            tokenProgram: new PublicKey(itemReward.mint.programId),\r\n            mint: new PublicKey(itemReward.mint.address),\r\n            notUseTokenAccount: rewardUseSOLBalance,\r\n            owner: this.scope.ownerPubKey,\r\n            createInfo: {\r\n              payer: this.scope.ownerPubKey,\r\n              amount: 0,\r\n            },\r\n            skipCloseAccount: !rewardUseSOLBalance,\r\n            associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n            checkCreateATAOwner,\r\n          });\r\n        ownerRewardAccount = _ownerRewardAccount;\r\n        ownerRewardAccountInstructions && txBuilder.addInstruction(ownerRewardAccountInstructions);\r\n      }\r\n\r\n      rewardAccounts.push(ownerRewardAccount!);\r\n    }\r\n\r\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\r\n      this.logAndCreateError(\r\n        \"cannot found target token accounts\",\r\n        \"tokenAccounts\",\r\n        this.scope.account.tokenAccountRawInfos,\r\n      );\r\n\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    const nft2022 = (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(\r\n      TOKEN_2022_PROGRAM_ID,\r\n    );\r\n    const decreaseInsInfo = await ClmmInstrument.decreaseLiquidityInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerPosition,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n        rewardAccounts,\r\n      },\r\n      liquidity,\r\n      amountMinA,\r\n      amountMinB,\r\n      nft2022,\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: decreaseInsInfo.instructions,\r\n      instructionTypes: [InstructionType.ClmmDecreasePosition],\r\n    });\r\n\r\n    let extInfo = { ...decreaseInsInfo.address };\r\n    if (ownerInfo.closePosition) {\r\n      const closeInsInfo = await ClmmInstrument.closePositionInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: { wallet: this.scope.ownerPubKey },\r\n        ownerPosition,\r\n        nft2022,\r\n      });\r\n      txBuilder.addInstruction({\r\n        endInstructions: closeInsInfo.instructions,\r\n        endInstructionTypes: closeInsInfo.instructionTypes,\r\n      });\r\n      extInfo = { ...extInfo, ...closeInsInfo.address };\r\n    }\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: extInfo },\r\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async lockPosition<T extends TxVersion>(props: LockPosition<T>): Promise<MakeTxData<ClmmLockAddress>> {\r\n    const {\r\n      programId = CLMM_LOCK_PROGRAM_ID,\r\n      authProgramId = CLMM_LOCK_AUTH_ID,\r\n      poolProgramId = CLMM_PROGRAM_ID,\r\n      ownerPosition,\r\n      payer,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      getEphemeralSigners,\r\n      feePayer,\r\n    } = props;\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const lockIns = await ClmmInstrument.makeLockPositions({\r\n      programId,\r\n      authProgramId,\r\n      poolProgramId,\r\n      wallet: this.scope.ownerPubKey,\r\n      payer: payer ?? this.scope.ownerPubKey,\r\n      nftMint: ownerPosition.nftMint,\r\n      getEphemeralSigners,\r\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\r\n    });\r\n\r\n    txBuilder.addInstruction(lockIns);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n      extInfo: lockIns.address,\r\n    }) as Promise<MakeTxData<ClmmLockAddress>>;\r\n  }\r\n\r\n  public async harvestLockPosition<T extends TxVersion>(props: HarvestLockPosition<T>): Promise<MakeTxData<T>> {\r\n    const {\r\n      programId = CLMM_LOCK_PROGRAM_ID,\r\n      authProgramId = CLMM_LOCK_AUTH_ID,\r\n      clmmProgram = CLMM_PROGRAM_ID,\r\n      poolKeys: propPoolKeys,\r\n      lockData,\r\n      ownerInfo = { useSOLBalance: true },\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      computeBudgetConfig,\r\n      txTipConfig,\r\n      txVersion,\r\n      feePayer,\r\n    } = props;\r\n\r\n    const poolKeys = propPoolKeys || (await this.getClmmPoolKeys(lockData.poolId.toString()));\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const positionData = await this.scope.connection.getAccountInfo(lockData.positionId);\r\n    if (!positionData) this.logger.logWithError(\"position not found\", lockData.positionId);\r\n    const position = PositionInfoLayout.decode(positionData!.data);\r\n\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolKeys.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolKeys.mintB.address === WSOLMint.toString();\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\r\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\r\n    const { account: _ownerTokenAccountA, instructionParams: accountAInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolKeys.mintA.programId,\r\n        mint: new PublicKey(poolKeys.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerTokenAccountA = _ownerTokenAccountA;\r\n    accountAInstructions && txBuilder.addInstruction(accountAInstructions);\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: accountBInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolKeys.mintB.programId,\r\n        mint: new PublicKey(poolKeys.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerTokenAccountB = _ownerTokenAccountB;\r\n    accountBInstructions && txBuilder.addInstruction(accountBInstructions);\r\n\r\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\r\n    const rewardAccounts: PublicKey[] = [];\r\n    for (const itemReward of poolKeys.rewardInfos) {\r\n      const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n      let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\r\n      if (!ownerRewardAccount) {\r\n        const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: new PublicKey(itemReward.mint.programId),\r\n          mint: new PublicKey(itemReward.mint.address),\r\n          notUseTokenAccount: rewardUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !rewardUseSOLBalance,\r\n          createInfo: {\r\n            payer: this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n        });\r\n        ownerRewardAccount = account!;\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n      }\r\n\r\n      ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\r\n      rewardAccounts.push(ownerRewardAccount!);\r\n    }\r\n    const lockPositionId = getPdaLockClPositionIdV2(programId, lockData.lockNftMint).publicKey;\r\n    const lockNftAccount = getATAAddress(this.scope.ownerPubKey, lockData.lockNftMint, TOKEN_PROGRAM_ID).publicKey;\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      position.tickLower,\r\n      poolKeys.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      position.tickUpper,\r\n      poolKeys.config.tickSpacing,\r\n    );\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(\r\n      new PublicKey(poolKeys.programId),\r\n      lockData.poolId,\r\n      tickArrayLowerStartIndex,\r\n    );\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(\r\n      new PublicKey(poolKeys.programId),\r\n      lockData.poolId,\r\n      tickArrayUpperStartIndex,\r\n    );\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      new PublicKey(poolKeys.programId),\r\n      lockData.poolId,\r\n      position.tickLower,\r\n      position.tickUpper,\r\n    );\r\n\r\n    const rewardAccountsFullInfo: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[] = [];\r\n    for (let i = 0; i < poolKeys.rewardInfos.length; i++) {\r\n      rewardAccountsFullInfo.push({\r\n        poolRewardVault: new PublicKey(poolKeys.rewardInfos[i].vault),\r\n        ownerRewardVault: rewardAccounts[i],\r\n        rewardMint: new PublicKey(poolKeys.rewardInfos[i].mint.address),\r\n      });\r\n    }\r\n\r\n    const harvestLockIns = await ClmmInstrument.harvestLockPositionInstructionV2({\r\n      programId,\r\n      auth: authProgramId,\r\n      lockPositionId,\r\n      clmmProgram,\r\n      lockOwner: this.scope.ownerPubKey,\r\n      lockNftMint: lockData.lockNftMint,\r\n      lockNftAccount,\r\n      positionNftAccount: lockData.nftAccount,\r\n      positionId: lockData.positionId,\r\n      poolId: lockData.poolId,\r\n      protocolPosition,\r\n      vaultA: new PublicKey(poolKeys.vault.A),\r\n      vaultB: new PublicKey(poolKeys.vault.B),\r\n      tickArrayLower,\r\n      tickArrayUpper,\r\n      userVaultA: ownerTokenAccountA!,\r\n      userVaultB: ownerTokenAccountB!,\r\n      mintA: new PublicKey(poolKeys.mintA.address),\r\n      mintB: new PublicKey(poolKeys.mintB.address),\r\n      rewardAccounts: rewardAccountsFullInfo,\r\n      exTickArrayBitmap: getPdaExBitmapAccount(clmmProgram, lockData.poolId).publicKey,\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [harvestLockIns],\r\n      instructionTypes: [InstructionType.ClmmHarvestLockPosition],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n    }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async closePosition<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerPosition,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys?: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    txTipConfig?: TxTipConfig;\r\n    txVersion: T;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeTxData<T, ClosePositionExtInfo>> {\r\n    if (this.scope.availability.removeConcentratedPosition === false)\r\n      this.logAndCreateError(\"remove position feature disabled in your region\");\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    const ins = ClmmInstrument.closePositionInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: { wallet: this.scope.ownerPubKey },\r\n      ownerPosition,\r\n      nft2022: (await this.scope.connection.getAccountInfo(ownerPosition.nftMint))?.owner.equals(TOKEN_2022_PROGRAM_ID),\r\n    });\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.addInstruction(ins).versionBuild<ClosePositionExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: ins.address },\r\n    }) as Promise<MakeTxData<T, ClosePositionExtInfo>>;\r\n  }\r\n\r\n  public async initReward<T extends TxVersion>({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardInfo,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: InitRewardParams<T>): Promise<MakeTxData<T, InitRewardExtInfo>> {\r\n    if (rewardInfo.endTime <= rewardInfo.openTime)\r\n      this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n\r\n    const rewardMintUseSOLBalance =\r\n      ownerInfo.useSOLBalance && rewardInfo.mint.address.toString() === WSOLMint.toString();\r\n    const _baseRewardAmount = rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime);\r\n\r\n    const { account: ownerRewardAccount, instructionParams: ownerRewardAccountIns } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: new PublicKey(rewardInfo.mint.address),\r\n        mint: new PublicKey(rewardInfo.mint.address),\r\n        notUseTokenAccount: !!rewardMintUseSOLBalance,\r\n        skipCloseAccount: !rewardMintUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: rewardMintUseSOLBalance\r\n          ? {\r\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n            amount: new BN(\r\n              new Decimal(_baseRewardAmount.toFixed(0)).gte(_baseRewardAmount)\r\n                ? _baseRewardAmount.toFixed(0)\r\n                : _baseRewardAmount.add(1).toFixed(0),\r\n            ),\r\n          }\r\n          : undefined,\r\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerRewardAccountIns && txBuilder.addInstruction(ownerRewardAccountIns);\r\n\r\n    if (!ownerRewardAccount)\r\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const insInfo = ClmmInstrument.initRewardInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccount: ownerRewardAccount!,\r\n      },\r\n      rewardInfo: {\r\n        programId: new PublicKey(rewardInfo.mint.programId),\r\n        mint: new PublicKey(rewardInfo.mint.address),\r\n        openTime: rewardInfo.openTime,\r\n        endTime: rewardInfo.endTime,\r\n        emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n      },\r\n    });\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    return txBuilder.versionBuild<InitRewardExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: insInfo.address },\r\n    }) as Promise<MakeTxData<T, InitRewardExtInfo>>;\r\n  }\r\n\r\n  public async initRewards<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    rewardInfos,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: InitRewardsParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\r\n    for (const rewardInfo of rewardInfos) {\r\n      if (rewardInfo.endTime <= rewardInfo.openTime)\r\n        this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n    }\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    let address: Record<string, PublicKey> = {};\r\n\r\n    for (const rewardInfo of rewardInfos) {\r\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.address === WSOLMint.toString();\r\n      const _baseRewardAmount = rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime);\r\n\r\n      const { account: ownerRewardAccount, instructionParams: ownerRewardAccountIns } =\r\n        await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          notUseTokenAccount: !!rewardMintUseSOLBalance,\r\n          skipCloseAccount: !rewardMintUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          createInfo: rewardMintUseSOLBalance\r\n            ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: new BN(\r\n                new Decimal(_baseRewardAmount.toFixed(0)).gte(_baseRewardAmount)\r\n                  ? _baseRewardAmount.toFixed(0)\r\n                  : _baseRewardAmount.add(1).toFixed(0),\r\n              ),\r\n            }\r\n            : undefined,\r\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n      ownerRewardAccountIns && txBuilder.addInstruction(ownerRewardAccountIns);\r\n\r\n      if (!ownerRewardAccount)\r\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n\r\n      const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n      const insInfo = ClmmInstrument.initRewardInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccount: ownerRewardAccount!,\r\n        },\r\n        rewardInfo: {\r\n          programId: new PublicKey(rewardInfo.mint.programId),\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          openTime: rewardInfo.openTime,\r\n          endTime: rewardInfo.endTime,\r\n          emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n        },\r\n      });\r\n      address = {\r\n        ...address,\r\n        ...insInfo.address,\r\n      };\r\n      txBuilder.addInstruction(insInfo);\r\n    }\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n      extInfo: { address },\r\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\r\n  }\r\n\r\n  public async setReward<T extends TxVersion>({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardInfo,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: SetRewardParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\r\n    if (rewardInfo.endTime <= rewardInfo.openTime)\r\n      this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.equals(WSOLMint);\r\n    const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: rewardInfo.programId,\r\n        mint: rewardInfo.mint,\r\n        notUseTokenAccount: rewardMintUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: rewardMintUseSOLBalance\r\n          ? {\r\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n            amount: new BN(\r\n              new Decimal(rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)).gte(\r\n                rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime),\r\n              )\r\n                ? rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)\r\n                : rewardInfo.perSecond\r\n                  .mul(rewardInfo.endTime - rewardInfo.openTime)\r\n                  .add(1)\r\n                  .toFixed(0),\r\n            ),\r\n          }\r\n          : undefined,\r\n\r\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n    if (!ownerRewardAccount)\r\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const insInfo = ClmmInstrument.setRewardInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccount: ownerRewardAccount!,\r\n      },\r\n      rewardInfo: {\r\n        mint: rewardInfo.mint,\r\n        openTime: rewardInfo.openTime,\r\n        endTime: rewardInfo.endTime,\r\n        emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n      },\r\n    });\r\n\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<{ address: Record<string, PublicKey> }>({\r\n      txVersion,\r\n      extInfo: { address: insInfo.address },\r\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\r\n  }\r\n\r\n  public async setRewards<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    rewardInfos,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: SetRewardsParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    let address: Record<string, PublicKey> = {};\r\n    for (const rewardInfo of rewardInfos) {\r\n      if (rewardInfo.endTime <= rewardInfo.openTime)\r\n        this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n\r\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.address === WSOLMint.toString();\r\n      const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n        await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          notUseTokenAccount: rewardMintUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          createInfo: rewardMintUseSOLBalance\r\n            ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: new BN(\r\n                new Decimal(rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)).gte(\r\n                  rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime),\r\n                )\r\n                  ? rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)\r\n                  : rewardInfo.perSecond\r\n                    .mul(rewardInfo.endTime - rewardInfo.openTime)\r\n                    .add(1)\r\n                    .toFixed(0),\r\n              ),\r\n            }\r\n            : undefined,\r\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n      ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n      if (!ownerRewardAccount)\r\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n      const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n      const insInfo = ClmmInstrument.setRewardInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccount: ownerRewardAccount!,\r\n        },\r\n        rewardInfo: {\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          openTime: rewardInfo.openTime,\r\n          endTime: rewardInfo.endTime,\r\n          emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n        },\r\n      });\r\n      txBuilder.addInstruction(insInfo);\r\n      address = {\r\n        ...address,\r\n        ...insInfo.address,\r\n      };\r\n    }\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<{ address: Record<string, PublicKey> }>({\r\n      txVersion,\r\n      extInfo: { address },\r\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\r\n  }\r\n\r\n  public async collectReward<T extends TxVersion>({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardMint,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    txVersion,\r\n    feePayer,\r\n  }: CollectRewardParams<T>): Promise<MakeTxData<{ address: Record<string, PublicKey> }>> {\r\n    const rewardInfo = poolInfo!.rewardDefaultInfos.find((i) => i.mint.address === rewardMint.toString());\r\n    if (!rewardInfo) this.logAndCreateError(\"reward mint error\", \"not found reward mint\", rewardMint);\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardMint.equals(WSOLMint);\r\n    const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: new PublicKey(rewardInfo!.mint.programId),\r\n        mint: rewardMint,\r\n        notUseTokenAccount: rewardMintUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !rewardMintUseSOLBalance,\r\n        createInfo: {\r\n          payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n\r\n    if (!ownerRewardAccount)\r\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const insInfo = ClmmInstrument.collectRewardInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccount: ownerRewardAccount!,\r\n      },\r\n      rewardMint,\r\n    });\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild<{ address: Record<string, PublicKey> }>({\r\n      txVersion,\r\n      extInfo: { address: insInfo.address },\r\n    }) as Promise<MakeTxData<{ address: Record<string, PublicKey> }>>;\r\n  }\r\n\r\n  public async collectRewards({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardMints,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: CollectRewardsParams): Promise<MakeTransaction> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    let address: Record<string, PublicKey> = {};\r\n\r\n    for (const rewardMint of rewardMints) {\r\n      const rewardInfo = poolInfo!.rewardDefaultInfos.find((i) => i.mint.address === rewardMint.toString());\r\n      if (!rewardInfo) {\r\n        this.logAndCreateError(\"reward mint error\", \"not found reward mint\", rewardMint);\r\n        continue;\r\n      }\r\n\r\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardMint.equals(WSOLMint);\r\n      const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n        await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\r\n          mint: rewardMint,\r\n          notUseTokenAccount: rewardMintUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !rewardMintUseSOLBalance,\r\n          createInfo: {\r\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n      if (!ownerRewardAccount)\r\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n      ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n      const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n      const insInfo = ClmmInstrument.collectRewardInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccount: ownerRewardAccount!,\r\n        },\r\n\r\n        rewardMint,\r\n      });\r\n      txBuilder.addInstruction(insInfo);\r\n      address = { ...address, ...insInfo.address };\r\n    }\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.build<{ address: Record<string, PublicKey> }>({ address });\r\n  }\r\n\r\n  public async swap<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    inputMint,\r\n    amountIn,\r\n    amountOutMin,\r\n    priceLimit,\r\n    observationId,\r\n    ownerInfo,\r\n    remainingAccounts,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys?: ClmmKeys;\r\n    inputMint: string | PublicKey;\r\n    amountIn: BN;\r\n    amountOutMin: BN;\r\n    priceLimit?: Decimal;\r\n    observationId: PublicKey;\r\n    ownerInfo: {\r\n      useSOLBalance?: boolean;\r\n      feePayer?: PublicKey;\r\n    };\r\n    remainingAccounts: PublicKey[];\r\n    associatedOnly?: boolean;\r\n    checkCreateATAOwner?: boolean;\r\n    txVersion?: T;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    txTipConfig?: TxTipConfig;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeTxData<T>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const baseIn = inputMint.toString() === poolInfo.mintA.address;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toBase58();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toBase58();\r\n\r\n    let sqrtPriceLimitX64: BN;\r\n    if (!priceLimit || priceLimit.equals(new Decimal(0))) {\r\n      sqrtPriceLimitX64 = baseIn ? MIN_SQRT_PRICE_X64.add(new BN(1)) : MAX_SQRT_PRICE_X64.sub(new BN(1));\r\n    } else {\r\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n        priceLimit,\r\n        poolInfo.mintA.decimals,\r\n        poolInfo.mintB.decimals,\r\n      );\r\n    }\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined;\r\n    if (!ownerTokenAccountA) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        createInfo:\r\n          mintAUseSOLBalance || !baseIn\r\n            ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: baseIn ? amountIn : 0,\r\n            }\r\n            : undefined,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerTokenAccountA = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    let ownerTokenAccountB: PublicKey | undefined;\r\n    if (!ownerTokenAccountB) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        createInfo:\r\n          mintBUseSOLBalance || baseIn\r\n            ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: baseIn ? 0 : amountIn,\r\n            }\r\n            : undefined,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerTokenAccountB = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    if (!ownerTokenAccountA || !ownerTokenAccountB)\r\n      this.logAndCreateError(\"user do not have token account\", {\r\n        tokenA: poolInfo.mintA.symbol || poolInfo.mintA.address,\r\n        tokenB: poolInfo.mintB.symbol || poolInfo.mintB.address,\r\n        ownerTokenAccountA,\r\n        ownerTokenAccountB,\r\n        mintAUseSOLBalance,\r\n        mintBUseSOLBalance,\r\n        associatedOnly,\r\n      });\r\n\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    txBuilder.addInstruction(\r\n      ClmmInstrument.makeSwapBaseInInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        observationId,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccountA: ownerTokenAccountA!,\r\n          tokenAccountB: ownerTokenAccountB!,\r\n        },\r\n        inputMint: new PublicKey(inputMint),\r\n        amountIn,\r\n        amountOutMin,\r\n        sqrtPriceLimitX64,\r\n        remainingAccounts,\r\n      }),\r\n    );\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async swapBaseOut<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    outputMint,\r\n    amountOut,\r\n    amountInMax,\r\n    priceLimit,\r\n    observationId,\r\n    ownerInfo,\r\n    remainingAccounts,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    txTipConfig,\r\n    feePayer,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys?: ClmmKeys;\r\n    outputMint: string | PublicKey;\r\n    amountOut: BN;\r\n    amountInMax: BN;\r\n    priceLimit?: Decimal;\r\n    observationId: PublicKey;\r\n    ownerInfo: {\r\n      useSOLBalance?: boolean;\r\n      feePayer?: PublicKey;\r\n    };\r\n    remainingAccounts: PublicKey[];\r\n    associatedOnly?: boolean;\r\n    checkCreateATAOwner?: boolean;\r\n    txVersion?: T;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    txTipConfig?: TxTipConfig;\r\n    feePayer?: PublicKey;\r\n  }): Promise<MakeTxData<T>> {\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    const baseIn = outputMint.toString() === poolInfo.mintB.address;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toBase58();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toBase58();\r\n\r\n    let sqrtPriceLimitX64: BN;\r\n    if (!priceLimit || priceLimit.equals(new Decimal(0))) {\r\n      sqrtPriceLimitX64 =\r\n        outputMint.toString() === poolInfo.mintB.address\r\n          ? MIN_SQRT_PRICE_X64.add(new BN(1))\r\n          : MAX_SQRT_PRICE_X64.sub(new BN(1));\r\n    } else {\r\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n        priceLimit,\r\n        poolInfo.mintA.decimals,\r\n        poolInfo.mintB.decimals,\r\n      );\r\n    }\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined;\r\n    if (!ownerTokenAccountA) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        createInfo:\r\n          mintAUseSOLBalance || !baseIn\r\n            ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: baseIn ? amountInMax : 0,\r\n            }\r\n            : undefined,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerTokenAccountA = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    let ownerTokenAccountB: PublicKey | undefined;\r\n    if (!ownerTokenAccountB) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        createInfo:\r\n          mintBUseSOLBalance || baseIn\r\n            ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: baseIn ? 0 : amountInMax,\r\n            }\r\n            : undefined,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerTokenAccountB = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    if (!ownerTokenAccountA || !ownerTokenAccountB)\r\n      this.logAndCreateError(\"user do not have token account\", {\r\n        tokenA: poolInfo.mintA.symbol || poolInfo.mintA.address,\r\n        tokenB: poolInfo.mintB.symbol || poolInfo.mintB.address,\r\n        ownerTokenAccountA,\r\n        ownerTokenAccountB,\r\n        mintAUseSOLBalance,\r\n        mintBUseSOLBalance,\r\n        associatedOnly,\r\n      });\r\n\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    txBuilder.addInstruction(\r\n      ClmmInstrument.makeSwapBaseOutInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        observationId,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccountA: ownerTokenAccountA!,\r\n          tokenAccountB: ownerTokenAccountB!,\r\n        },\r\n        outputMint: new PublicKey(outputMint),\r\n        amountOut,\r\n        amountInMax,\r\n        sqrtPriceLimitX64,\r\n        remainingAccounts,\r\n      }),\r\n    );\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addTipInstruction(txTipConfig);\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async harvestAllRewards<T extends TxVersion = TxVersion.LEGACY>({\r\n    allPoolInfo,\r\n    allPositions,\r\n    lockInfo,\r\n    ownerInfo,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    programId,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    feePayer,\r\n  }: HarvestAllRewardsParams<T>): Promise<MakeMultiTxData<T>> {\r\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\r\n    for (const item of this.scope.account.tokenAccountRawInfos) {\r\n      if (associatedOnly) {\r\n        const ata = getATAAddress(this.scope.ownerPubKey, item.accountInfo.mint, programId).publicKey;\r\n        if (ata.equals(item.pubkey)) ownerMintToAccount[item.accountInfo.mint.toString()] = item.pubkey;\r\n      } else {\r\n        ownerMintToAccount[item.accountInfo.mint.toString()] = item.pubkey;\r\n      }\r\n    }\r\n    const allNftMints = Object.values(allPositions)\r\n      .flat()\r\n      .map((p) => p.nftMint);\r\n\r\n    const mintData = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      allNftMints.map((n) => ({ pubkey: n })),\r\n    );\r\n    const record: Record<string, PublicKey | null> = {};\r\n    mintData.forEach((data) => {\r\n      record[data.pubkey.toBase58()] = data?.accountInfo?.owner ?? null;\r\n    });\r\n\r\n    const txBuilder = this.createTxBuilder(feePayer);\r\n    for (const itemInfo of Object.values(allPoolInfo)) {\r\n      if (allPositions[itemInfo.id] === undefined) continue;\r\n      if (\r\n        !allPositions[itemInfo.id].find(\r\n          (i) => !i.liquidity.isZero() || i.rewardInfos.find((ii) => !ii.rewardAmountOwed.isZero()),\r\n        )\r\n      )\r\n        continue;\r\n\r\n      const poolInfo = itemInfo;\r\n      const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n      const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n\r\n      let ownerTokenAccountA = ownerMintToAccount[poolInfo.mintA.address];\r\n      if (!ownerTokenAccountA) {\r\n        const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: poolInfo.mintA.programId,\r\n          mint: new PublicKey(poolInfo.mintA.address),\r\n          notUseTokenAccount: mintAUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !mintAUseSOLBalance,\r\n          createInfo: {\r\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n        ownerTokenAccountA = account!;\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n      }\r\n\r\n      let ownerTokenAccountB = ownerMintToAccount[poolInfo.mintB.address];\r\n      if (!ownerTokenAccountB) {\r\n        const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: poolInfo.mintB.programId,\r\n          mint: new PublicKey(poolInfo.mintB.address),\r\n          notUseTokenAccount: mintBUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !mintBUseSOLBalance,\r\n          createInfo: {\r\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n        ownerTokenAccountB = account!;\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n      }\r\n\r\n      ownerMintToAccount[poolInfo.mintA.address] = ownerTokenAccountA;\r\n      ownerMintToAccount[poolInfo.mintB.address] = ownerTokenAccountB;\r\n\r\n      const rewardAccounts: PublicKey[] = [];\r\n\r\n      for (const itemReward of poolInfo.rewardDefaultInfos) {\r\n        const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n        let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\r\n        if (!ownerRewardAccount) {\r\n          const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n            tokenProgram: new PublicKey(itemReward.mint.programId),\r\n            mint: new PublicKey(itemReward.mint.address),\r\n            notUseTokenAccount: rewardUseSOLBalance,\r\n            owner: this.scope.ownerPubKey,\r\n            skipCloseAccount: !rewardUseSOLBalance,\r\n            createInfo: {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: 0,\r\n            },\r\n            associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n          });\r\n          ownerRewardAccount = account!;\r\n          instructionParams && txBuilder.addInstruction(instructionParams);\r\n        }\r\n\r\n        ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\r\n        rewardAccounts.push(ownerRewardAccount!);\r\n      }\r\n\r\n      const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n\r\n      const rewardAccountsFullInfo: {\r\n        poolRewardVault: PublicKey;\r\n        ownerRewardVault: PublicKey;\r\n        rewardMint: PublicKey;\r\n      }[] = [];\r\n      for (let i = 0; i < poolKeys.rewardInfos.length; i++) {\r\n        rewardAccountsFullInfo.push({\r\n          poolRewardVault: new PublicKey(poolKeys.rewardInfos[i].vault),\r\n          ownerRewardVault: rewardAccounts[i],\r\n          rewardMint: new PublicKey(poolKeys.rewardInfos[i].mint.address),\r\n        });\r\n      }\r\n\r\n      for (const itemPosition of allPositions[itemInfo.id]) {\r\n        const lockData = lockInfo?.[itemInfo.id]?.[itemPosition.nftMint.toBase58()];\r\n        if (lockData) {\r\n          const lockNftAccount = getATAAddress(\r\n            this.scope.ownerPubKey,\r\n            lockData.lockNftMint,\r\n            TOKEN_PROGRAM_ID,\r\n          ).publicKey;\r\n\r\n          const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n            itemPosition.tickLower,\r\n            poolKeys.config.tickSpacing,\r\n          );\r\n          const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n            itemPosition.tickUpper,\r\n            poolKeys.config.tickSpacing,\r\n          );\r\n          const { publicKey: tickArrayLower } = getPdaTickArrayAddress(\r\n            new PublicKey(poolKeys.programId),\r\n            lockData.poolId,\r\n            tickArrayLowerStartIndex,\r\n          );\r\n          const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(\r\n            new PublicKey(poolKeys.programId),\r\n            lockData.poolId,\r\n            tickArrayUpperStartIndex,\r\n          );\r\n          const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n            new PublicKey(poolKeys.programId),\r\n            lockData.poolId,\r\n            itemPosition.tickLower,\r\n            itemPosition.tickUpper,\r\n          );\r\n          const lockPositionId = getPdaLockClPositionIdV2(CLMM_LOCK_PROGRAM_ID, lockData.lockNftMint).publicKey;\r\n          const harvestLockIns = ClmmInstrument.harvestLockPositionInstructionV2({\r\n            programId: CLMM_LOCK_PROGRAM_ID,\r\n            auth: CLMM_LOCK_AUTH_ID,\r\n            lockPositionId,\r\n            clmmProgram: CLMM_PROGRAM_ID,\r\n            lockOwner: this.scope.ownerPubKey,\r\n            lockNftMint: lockData.lockNftMint,\r\n            lockNftAccount,\r\n            positionNftAccount: lockData.nftAccount,\r\n            positionId: lockData.positionId,\r\n            poolId: lockData.poolId,\r\n            protocolPosition,\r\n            vaultA: new PublicKey(poolKeys.vault.A),\r\n            vaultB: new PublicKey(poolKeys.vault.B),\r\n            tickArrayLower,\r\n            tickArrayUpper,\r\n            userVaultA: ownerTokenAccountA!,\r\n            userVaultB: ownerTokenAccountB!,\r\n            mintA: new PublicKey(poolKeys.mintA.address),\r\n            mintB: new PublicKey(poolKeys.mintB.address),\r\n            rewardAccounts: rewardAccountsFullInfo,\r\n            exTickArrayBitmap: getPdaExBitmapAccount(CLMM_PROGRAM_ID, lockData.poolId).publicKey,\r\n          });\r\n          txBuilder.addInstruction({\r\n            instructions: [harvestLockIns],\r\n            instructionTypes: [InstructionType.ClmmHarvestLockPosition],\r\n            lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n          });\r\n        } else {\r\n          const insData = ClmmInstrument.decreaseLiquidityInstructions({\r\n            poolInfo,\r\n            poolKeys,\r\n            ownerPosition: itemPosition,\r\n            ownerInfo: {\r\n              wallet: this.scope.ownerPubKey,\r\n              tokenAccountA: ownerTokenAccountA,\r\n              tokenAccountB: ownerTokenAccountB,\r\n              rewardAccounts,\r\n            },\r\n            liquidity: new BN(0),\r\n            amountMinA: new BN(0),\r\n            amountMinB: new BN(0),\r\n            nft2022: record[itemPosition.nftMint.toBase58()]?.equals(TOKEN_2022_PROGRAM_ID),\r\n          });\r\n          txBuilder.addInstruction(insData);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (txVersion === TxVersion.V0)\r\n      return txBuilder.sizeCheckBuildV0({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n    return txBuilder.sizeCheckBuild({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n  }\r\n\r\n  public async getWhiteListMint({ programId }: { programId: PublicKey }): Promise<PublicKey[]> {\r\n    const accountInfo = await this.scope.connection.getAccountInfo(getPdaOperationAccount(programId).publicKey);\r\n    if (!accountInfo) return [];\r\n    const whitelistMintsInfo = OperationLayout.decode(accountInfo.data);\r\n    return whitelistMintsInfo.whitelistMints.filter((i) => !i.equals(PublicKey.default));\r\n  }\r\n\r\n  public async getOwnerPositionInfo({\r\n    programId,\r\n  }: {\r\n    programId: string | PublicKey;\r\n  }): Promise<ReturnType<typeof PositionInfoLayout.decode>[]> {\r\n    await this.scope.account.fetchWalletTokenAccounts();\r\n    const balanceMints = this.scope.account.tokenAccountRawInfos.filter((acc) => acc.accountInfo.amount.eq(new BN(1)));\r\n    const allPositionKey = balanceMints.map(\r\n      (acc) => getPdaPersonalPositionAddress(new PublicKey(programId), acc.accountInfo.mint).publicKey,\r\n    );\r\n\r\n    const accountInfo = await this.scope.connection.getMultipleAccountsInfo(allPositionKey);\r\n    const allPosition: ReturnType<typeof PositionInfoLayout.decode>[] = [];\r\n    accountInfo.forEach((positionRes) => {\r\n      if (!positionRes) return;\r\n      const position = PositionInfoLayout.decode(positionRes.data);\r\n      allPosition.push(position);\r\n    });\r\n\r\n    return allPosition;\r\n  }\r\n\r\n  public async getRpcClmmPoolInfo({ poolId }: { poolId: string | PublicKey }): Promise<ClmmRpcData> {\r\n    return (await this.getRpcClmmPoolInfos({ poolIds: [poolId] }))[String(poolId)];\r\n  }\r\n\r\n  public async getRpcClmmPoolInfos({\r\n    poolIds,\r\n    config,\r\n  }: {\r\n    poolIds: (string | PublicKey)[];\r\n    config?: { batchRequest?: boolean; chunkCount?: number };\r\n  }): Promise<{\r\n    [poolId: string]: ClmmRpcData;\r\n  }> {\r\n    const accounts = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      poolIds.map((i) => ({ pubkey: new PublicKey(i) })),\r\n      config,\r\n    );\r\n    const returnData: {\r\n      [poolId: string]: ClmmRpcData;\r\n    } = {};\r\n    for (let i = 0; i < poolIds.length; i++) {\r\n      const item = accounts[i];\r\n      if (item === null || !item.accountInfo) throw Error(\"fetch pool info error: \" + String(poolIds[i]));\r\n      const rpc = PoolInfoLayout.decode(item.accountInfo.data);\r\n      const currentPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n        rpc.sqrtPriceX64,\r\n        rpc.mintDecimalsA,\r\n        rpc.mintDecimalsB,\r\n      ).toNumber();\r\n\r\n      returnData[String(poolIds[i])] = {\r\n        ...rpc,\r\n        currentPrice,\r\n        programId: item.accountInfo.owner,\r\n      };\r\n    }\r\n    return returnData;\r\n  }\r\n\r\n  public async getComputeClmmPoolInfos({\r\n    clmmPoolsRpcInfo,\r\n    mintInfos,\r\n  }: {\r\n    clmmPoolsRpcInfo: Record<\r\n      string,\r\n      ReturnType<typeof PoolInfoLayout.decode> & { currentPrice: number; programId: PublicKey }\r\n    >;\r\n    mintInfos: ReturnTypeFetchMultipleMintInfos;\r\n  }): Promise<{\r\n    computeClmmPoolInfo: Record<string, ComputeClmmPoolInfo>;\r\n    computePoolTickData: ReturnTypeFetchMultiplePoolTickArrays;\r\n  }> {\r\n    const configSet = new Set(Object.keys(clmmPoolsRpcInfo).map((p) => clmmPoolsRpcInfo[p].ammConfig.toBase58()));\r\n    const res = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      Array.from(configSet).map((s) => ({ pubkey: new PublicKey(s) })),\r\n    );\r\n    const clmmConfigs: Record<string, ReturnType<typeof ClmmConfigLayout.decode>> = {};\r\n    res.forEach((acc) => {\r\n      if (!acc.accountInfo) return;\r\n      clmmConfigs[acc.pubkey.toBase58()] = ClmmConfigLayout.decode(acc.accountInfo.data);\r\n    });\r\n    const computeClmmPoolInfo = await PoolUtils.fetchComputeMultipleClmmInfo({\r\n      connection: this.scope.connection,\r\n      rpcDataMap: clmmPoolsRpcInfo,\r\n      poolList: Object.keys(clmmPoolsRpcInfo).map((poolId) => {\r\n        const [mintA, mintB] = [clmmPoolsRpcInfo[poolId].mintA.toBase58(), clmmPoolsRpcInfo[poolId].mintB.toBase58()];\r\n        return {\r\n          id: poolId,\r\n          programId: clmmPoolsRpcInfo[poolId].programId.toBase58(),\r\n          mintA: toApiV3Token({\r\n            address: mintA,\r\n            decimals: clmmPoolsRpcInfo[poolId].mintDecimalsA,\r\n            programId: mintInfos[mintA].programId.toBase58() || TOKEN_PROGRAM_ID.toBase58(),\r\n            extensions: {\r\n              feeConfig: mintInfos[mintA]?.feeConfig ? toFeeConfig(mintInfos[mintA]?.feeConfig) : undefined,\r\n            },\r\n          }),\r\n          mintB: toApiV3Token({\r\n            address: mintB,\r\n            decimals: clmmPoolsRpcInfo[poolId].mintDecimalsB,\r\n            programId: mintInfos[mintB].programId.toBase58() || TOKEN_PROGRAM_ID.toBase58(),\r\n            extensions: {\r\n              feeConfig: mintInfos[mintB]?.feeConfig ? toFeeConfig(mintInfos[mintB]?.feeConfig) : undefined,\r\n            },\r\n          }),\r\n          price: clmmPoolsRpcInfo[poolId].currentPrice,\r\n          config: {\r\n            ...clmmConfigs[clmmPoolsRpcInfo[poolId].ammConfig.toBase58()],\r\n            id: clmmPoolsRpcInfo[poolId].ammConfig.toBase58(),\r\n\r\n            fundFeeRate: 0,\r\n            description: \"\",\r\n            defaultRange: 0,\r\n            defaultRangePoint: [],\r\n          },\r\n        };\r\n      }),\r\n    });\r\n\r\n    const computePoolTickData = await PoolUtils.fetchMultiplePoolTickArrays({\r\n      connection: this.scope.connection,\r\n      poolKeys: Object.values(computeClmmPoolInfo),\r\n    });\r\n\r\n    return {\r\n      computeClmmPoolInfo,\r\n      computePoolTickData,\r\n    };\r\n  }\r\n\r\n  public async getPoolInfoFromRpc(poolId: string): Promise<{\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    computePoolInfo: ComputeClmmPoolInfo;\r\n    tickData: ReturnTypeFetchMultiplePoolTickArrays;\r\n  }> {\r\n    const rpcData = await this.getRpcClmmPoolInfo({ poolId });\r\n\r\n    const mintSet = new Set([rpcData.mintA.toBase58(), rpcData.mintB.toBase58()]);\r\n\r\n    const mintInfos = await fetchMultipleMintInfos({\r\n      connection: this.scope.connection,\r\n      mints: Array.from(mintSet).map((m) => new PublicKey(m)),\r\n    });\r\n\r\n    const { computeClmmPoolInfo, computePoolTickData } = await this.scope.clmm.getComputeClmmPoolInfos({\r\n      clmmPoolsRpcInfo: { [poolId]: rpcData },\r\n      mintInfos,\r\n    });\r\n    const vaultData = await getMultipleAccountsInfoWithCustomFlags(this.scope.connection, [\r\n      { pubkey: rpcData.vaultA },\r\n      { pubkey: rpcData.vaultB },\r\n    ]);\r\n\r\n    const poolInfo = clmmComputeInfoToApiInfo(computeClmmPoolInfo[poolId]);\r\n\r\n    if (!vaultData[0].accountInfo || !vaultData[1].accountInfo) throw new Error(\"pool vault data not found\");\r\n    poolInfo.mintAmountA = Number(AccountLayout.decode(vaultData[0].accountInfo.data).amount.toString());\r\n    poolInfo.mintAmountB = Number(AccountLayout.decode(vaultData[1].accountInfo?.data).amount.toString());\r\n\r\n    const poolKeys: ClmmKeys = {\r\n      ...computeClmmPoolInfo[poolId],\r\n      exBitmapAccount: computeClmmPoolInfo[poolId].exBitmapAccount.toBase58(),\r\n      observationId: computeClmmPoolInfo[poolId].observationId.toBase58(),\r\n      id: poolId,\r\n      programId: rpcData.programId.toBase58(),\r\n      openTime: rpcData.startTime.toString(),\r\n      vault: {\r\n        A: rpcData.vaultA.toBase58(),\r\n        B: rpcData.vaultB.toBase58(),\r\n      },\r\n      config: poolInfo.config,\r\n      rewardInfos: computeClmmPoolInfo[poolId].rewardInfos\r\n        .filter((r) => !r.tokenVault.equals(PublicKey.default))\r\n        .map((r) => ({\r\n          mint: toApiV3Token({ address: r.tokenMint.toBase58(), programId: TOKEN_PROGRAM_ID.toBase58(), decimals: 10 }),\r\n          vault: r.tokenVault.toBase58(),\r\n        })),\r\n    };\r\n    return { poolInfo, poolKeys, computePoolInfo: computeClmmPoolInfo[poolId], tickData: computePoolTickData };\r\n  }\r\n}\r\n","/*\r\n *  decimal.js v10.3.1\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js\r\n *  Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Licence\r\n */\r\n\r\n\r\n// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n  // The maximum exponent magnitude.\r\n  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\nvar EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n  // The limit on the value of `precision`, and on the value of the first argument to\r\n  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n  MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n  // Base conversion alphabet.\r\n  NUMERALS = '0123456789abcdef',\r\n\r\n  // The natural logarithm of 10 (1025 digits).\r\n  LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n  // Pi (1025 digits).\r\n  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n  // The initial configuration properties of the Decimal constructor.\r\n  DEFAULTS = {\r\n\r\n    // These values must be integers within the stated ranges (inclusive).\r\n    // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n    // The maximum number of significant digits of the result of a calculation or base conversion.\r\n    // E.g. `Decimal.config({ precision: 20 });`\r\n    precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n    // The rounding mode used when rounding to `precision`.\r\n    //\r\n    // ROUND_UP         0 Away from zero.\r\n    // ROUND_DOWN       1 Towards zero.\r\n    // ROUND_CEIL       2 Towards +Infinity.\r\n    // ROUND_FLOOR      3 Towards -Infinity.\r\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    //\r\n    // E.g.\r\n    // `Decimal.rounding = 4;`\r\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n    rounding: 4,                           // 0 to 8\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n    // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN  6 The IEEE 754 remainder function.\r\n    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n    //\r\n    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n    // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n    // be used, but they may not give useful results.\r\n    modulo: 1,                             // 0 to 9\r\n\r\n    // The exponent value at and beneath which `toString` returns exponential notation.\r\n    // JavaScript numbers: -7\r\n    toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n    // The exponent value at and above which `toString` returns exponential notation.\r\n    // JavaScript numbers: 21\r\n    toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // JavaScript numbers: -324  (5e-324)\r\n    minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n    maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    crypto: false                          // true/false\r\n  },\r\n\r\n\r\n// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n  inexact, quadrant,\r\n  external = true,\r\n\r\n  decimalError = '[DecimalError] ',\r\n  invalidArgument = decimalError + 'Invalid argument: ',\r\n  precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n  cryptoUnavailable = decimalError + 'crypto unavailable',\r\n  tag = '[object Decimal]',\r\n\r\n  mathfloor = Math.floor,\r\n  mathpow = Math.pow,\r\n\r\n  isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n  isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n  isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n  BASE = 1e7,\r\n  LOG_BASE = 7,\r\n  MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n  LN10_PRECISION = LN10.length - 1,\r\n  PI_PRECISION = PI.length - 1,\r\n\r\n  // Decimal.prototype object\r\n  P = { toStringTag: tag };\r\n\r\n\r\n// Decimal prototype methods\r\n\r\n\r\n/*\r\n *  absoluteValue             abs\r\n *  ceil\r\n *  clampedTo                 clamp\r\n *  comparedTo                cmp\r\n *  cosine                    cos\r\n *  cubeRoot                  cbrt\r\n *  decimalPlaces             dp\r\n *  dividedBy                 div\r\n *  dividedToIntegerBy        divToInt\r\n *  equals                    eq\r\n *  floor\r\n *  greaterThan               gt\r\n *  greaterThanOrEqualTo      gte\r\n *  hyperbolicCosine          cosh\r\n *  hyperbolicSine            sinh\r\n *  hyperbolicTangent         tanh\r\n *  inverseCosine             acos\r\n *  inverseHyperbolicCosine   acosh\r\n *  inverseHyperbolicSine     asinh\r\n *  inverseHyperbolicTangent  atanh\r\n *  inverseSine               asin\r\n *  inverseTangent            atan\r\n *  isFinite\r\n *  isInteger                 isInt\r\n *  isNaN\r\n *  isNegative                isNeg\r\n *  isPositive                isPos\r\n *  isZero\r\n *  lessThan                  lt\r\n *  lessThanOrEqualTo         lte\r\n *  logarithm                 log\r\n *  [maximum]                 [max]\r\n *  [minimum]                 [min]\r\n *  minus                     sub\r\n *  modulo                    mod\r\n *  naturalExponential        exp\r\n *  naturalLogarithm          ln\r\n *  negated                   neg\r\n *  plus                      add\r\n *  precision                 sd\r\n *  round\r\n *  sine                      sin\r\n *  squareRoot                sqrt\r\n *  tangent                   tan\r\n *  times                     mul\r\n *  toBinary\r\n *  toDecimalPlaces           toDP\r\n *  toExponential\r\n *  toFixed\r\n *  toFraction\r\n *  toHexadecimal             toHex\r\n *  toNearest\r\n *  toNumber\r\n *  toOctal\r\n *  toPower                   pow\r\n *  toPrecision\r\n *  toSignificantDigits       toSD\r\n *  toString\r\n *  truncated                 trunc\r\n *  valueOf                   toJSON\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\r\nP.absoluteValue = P.abs = function () {\r\n  var x = new this.constructor(this);\r\n  if (x.s < 0) x.s = 1;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of positive Infinity.\r\n *\r\n */\r\nP.ceil = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n * delineated by `min` and `max`.\r\n *\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\r\nP.clampedTo = P.clamp = function (min, max) {\r\n  var k,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n  min = new Ctor(min);\r\n  max = new Ctor(max);\r\n  if (!min.s || !max.s) return new Ctor(NaN);\r\n  if (min.gt(max)) throw Error(invalidArgument + max);\r\n  k = x.cmp(min);\r\n  return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value,\r\n *   NaN  if the value of either Decimal is NaN.\r\n *\r\n */\r\nP.comparedTo = P.cmp = function (y) {\r\n  var i, j, xdL, ydL,\r\n    x = this,\r\n    xd = x.d,\r\n    yd = (y = new x.constructor(y)).d,\r\n    xs = x.s,\r\n    ys = y.s;\r\n\r\n  // Either NaN or ±Infinity?\r\n  if (!xd || !yd) {\r\n    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Either zero?\r\n  if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n  // Signs differ?\r\n  if (xs !== ys) return xs;\r\n\r\n  // Compare exponents.\r\n  if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n    if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * cos(0)         = 1\r\n * cos(-0)        = 1\r\n * cos(Infinity)  = NaN\r\n * cos(-Infinity) = NaN\r\n * cos(NaN)       = NaN\r\n *\r\n */\r\nP.cosine = P.cos = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.d) return new Ctor(NaN);\r\n\r\n  // cos(0) = cos(-0) = 1\r\n  if (!x.d[0]) return new Ctor(1);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *\r\n * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n *  cbrt(0)  =  0\r\n *  cbrt(-0) = -0\r\n *  cbrt(1)  =  1\r\n *  cbrt(-1) = -1\r\n *  cbrt(N)  =  N\r\n *  cbrt(-I) = -I\r\n *  cbrt(I)  =  I\r\n *\r\n * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n *\r\n */\r\nP.cubeRoot = P.cbrt = function () {\r\n  var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n   // Math.cbrt underflow/overflow?\r\n   // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n  if (!s || Math.abs(s) == 1 / 0) {\r\n    n = digitsToString(x.d);\r\n    e = x.e;\r\n\r\n    // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n    if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n    s = mathpow(n, 1 / 3);\r\n\r\n    // Rarely, e may be one less than the result exponent value.\r\n    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n    r.s = x.s;\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Halley's method.\r\n  // TODO? Compare Newton's method.\r\n  for (;;) {\r\n    t = r;\r\n    t3 = t.times(t).times(t);\r\n    t3plusx = t3.plus(x);\r\n    r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n      // , i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\r\nP.decimalPlaces = P.dp = function () {\r\n  var w,\r\n    d = this.d,\r\n    n = NaN;\r\n\r\n  if (d) {\r\n    w = d.length - 1;\r\n    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    w = d[w];\r\n    if (w) for (; w % 10 == 0; w /= 10) n--;\r\n    if (n < 0) n = 0;\r\n  }\r\n\r\n  return n;\r\n};\r\n\r\n\r\n/*\r\n *  n / 0 = I\r\n *  n / N = N\r\n *  n / I = 0\r\n *  0 / n = 0\r\n *  0 / 0 = N\r\n *  0 / N = N\r\n *  0 / I = 0\r\n *  N / n = N\r\n *  N / 0 = N\r\n *  N / N = N\r\n *  N / I = N\r\n *  I / n = I\r\n *  I / 0 = I\r\n *  I / N = N\r\n *  I / I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedBy = P.div = function (y) {\r\n  return divide(this, new this.constructor(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedToIntegerBy = P.divToInt = function (y) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\r\nP.equals = P.eq = function (y) {\r\n  return this.cmp(y) === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of negative Infinity.\r\n *\r\n */\r\nP.floor = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 3);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\r\nP.greaterThan = P.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\r\nP.greaterThanOrEqualTo = P.gte = function (y) {\r\n  var k = this.cmp(y);\r\n  return k == 1 || k === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [1, Infinity]\r\n *\r\n * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n *\r\n * cosh(0)         = 1\r\n * cosh(-0)        = 1\r\n * cosh(Infinity)  = Infinity\r\n * cosh(-Infinity) = Infinity\r\n * cosh(NaN)       = NaN\r\n *\r\n *  x        time taken (ms)   result\r\n * 1000      9                 9.8503555700852349694e+433\r\n * 10000     25                4.4034091128314607936e+4342\r\n * 100000    171               1.4033316802130615897e+43429\r\n * 1000000   3817              1.5166076984010437725e+434294\r\n * 10000000  abandoned after 2 minute wait\r\n *\r\n * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n *\r\n */\r\nP.hyperbolicCosine = P.cosh = function () {\r\n  var k, n, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    one = new Ctor(1);\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n  if (x.isZero()) return one;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n  // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  // TODO? Estimation reused from cosine() and may not be optimal here.\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    n = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    n = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n  // Reverse argument reduction\r\n  var cosh2_x,\r\n    i = k,\r\n    d8 = new Ctor(8);\r\n  for (; i--;) {\r\n    cosh2_x = x.times(x);\r\n    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n  }\r\n\r\n  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n *\r\n * sinh(0)         = 0\r\n * sinh(-0)        = -0\r\n * sinh(Infinity)  = Infinity\r\n * sinh(-Infinity) = -Infinity\r\n * sinh(NaN)       = NaN\r\n *\r\n * x        time taken (ms)\r\n * 10       2 ms\r\n * 100      5 ms\r\n * 1000     14 ms\r\n * 10000    82 ms\r\n * 100000   886 ms            1.4033316802130615897e+43429\r\n * 200000   2613 ms\r\n * 300000   5407 ms\r\n * 400000   8824 ms\r\n * 500000   13026 ms          8.7080643612718084129e+217146\r\n * 1000000  48543 ms\r\n *\r\n * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n *\r\n */\r\nP.hyperbolicSine = P.sinh = function () {\r\n  var k, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n  } else {\r\n\r\n    // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n    // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n    // 3 multiplications and 1 addition\r\n\r\n    // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n    // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n    // 4 multiplications and 2 additions\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n    // Reverse argument reduction\r\n    var sinh2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sinh2_x = x.times(x);\r\n      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n    }\r\n  }\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * tanh(x) = sinh(x) / cosh(x)\r\n *\r\n * tanh(0)         = 0\r\n * tanh(-0)        = -0\r\n * tanh(Infinity)  = 1\r\n * tanh(-Infinity) = -1\r\n * tanh(NaN)       = NaN\r\n *\r\n */\r\nP.hyperbolicTangent = P.tanh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 7;\r\n  Ctor.rounding = 1;\r\n\r\n  return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n * this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [0, pi]\r\n *\r\n * acos(x) = pi/2 - asin(x)\r\n *\r\n * acos(0)       = pi/2\r\n * acos(-0)      = pi/2\r\n * acos(1)       = 0\r\n * acos(-1)      = pi\r\n * acos(1/2)     = pi/3\r\n * acos(-1/2)    = 2*pi/3\r\n * acos(|x| > 1) = NaN\r\n * acos(NaN)     = NaN\r\n *\r\n */\r\nP.inverseCosine = P.acos = function () {\r\n  var halfPi,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    k = x.abs().cmp(1),\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n    return k === 0\r\n      // |x| is 1\r\n      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n      // |x| > 1 or x is NaN\r\n      : new Ctor(NaN);\r\n  }\r\n\r\n  if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.asin();\r\n  halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return halfPi.minus(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [1, Infinity]\r\n * Range: [0, Infinity]\r\n *\r\n * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n *\r\n * acosh(x < 1)     = NaN\r\n * acosh(NaN)       = NaN\r\n * acosh(Infinity)  = Infinity\r\n * acosh(-Infinity) = NaN\r\n * acosh(0)         = NaN\r\n * acosh(-0)        = NaN\r\n * acosh(1)         = 0\r\n * acosh(-1)        = NaN\r\n *\r\n */\r\nP.inverseHyperbolicCosine = P.acosh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n  if (!x.isFinite()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n *\r\n * asinh(NaN)       = NaN\r\n * asinh(Infinity)  = Infinity\r\n * asinh(-Infinity) = -Infinity\r\n * asinh(0)         = 0\r\n * asinh(-0)        = -0\r\n *\r\n */\r\nP.inverseHyperbolicSine = P.asinh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n *\r\n * atanh(|x| > 1)   = NaN\r\n * atanh(NaN)       = NaN\r\n * atanh(Infinity)  = NaN\r\n * atanh(-Infinity) = NaN\r\n * atanh(0)         = 0\r\n * atanh(-0)        = -0\r\n * atanh(1)         = Infinity\r\n * atanh(-1)        = -Infinity\r\n *\r\n */\r\nP.inverseHyperbolicTangent = P.atanh = function () {\r\n  var pr, rm, wpr, xsd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  xsd = x.sd();\r\n\r\n  if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n  Ctor.precision = wpr = xsd - x.e;\r\n\r\n  x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n  Ctor.precision = pr + 4;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.ln();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(0.5);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n *\r\n * asin(0)       = 0\r\n * asin(-0)      = -0\r\n * asin(1/2)     = pi/6\r\n * asin(-1/2)    = -pi/6\r\n * asin(1)       = pi/2\r\n * asin(-1)      = -pi/2\r\n * asin(|x| > 1) = NaN\r\n * asin(NaN)     = NaN\r\n *\r\n * TODO? Compare performance of Taylor series.\r\n *\r\n */\r\nP.inverseSine = P.asin = function () {\r\n  var halfPi, k,\r\n    pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  k = x.abs().cmp(1);\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n\r\n    // |x| is 1\r\n    if (k === 0) {\r\n      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      halfPi.s = x.s;\r\n      return halfPi;\r\n    }\r\n\r\n    // |x| > 1 or x is NaN\r\n    return new Ctor(NaN);\r\n  }\r\n\r\n  // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n *\r\n * atan(0)         = 0\r\n * atan(-0)        = -0\r\n * atan(1)         = pi/4\r\n * atan(-1)        = -pi/4\r\n * atan(Infinity)  = pi/2\r\n * atan(-Infinity) = -pi/2\r\n * atan(NaN)       = NaN\r\n *\r\n */\r\nP.inverseTangent = P.atan = function () {\r\n  var i, j, k, n, px, t, r, wpr, x2,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (!x.isFinite()) {\r\n    if (!x.s) return new Ctor(NaN);\r\n    if (pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n  } else if (x.isZero()) {\r\n    return new Ctor(x);\r\n  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n    r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n    r.s = x.s;\r\n    return r;\r\n  }\r\n\r\n  Ctor.precision = wpr = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n  // Argument reduction\r\n  // Ensure |x| < 0.42\r\n  // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n  k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n  for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n  external = false;\r\n\r\n  j = Math.ceil(wpr / LOG_BASE);\r\n  n = 1;\r\n  x2 = x.times(x);\r\n  r = new Ctor(x);\r\n  px = x;\r\n\r\n  // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n  for (; i !== -1;) {\r\n    px = px.times(x2);\r\n    t = r.minus(px.div(n += 2));\r\n\r\n    px = px.times(x2);\r\n    r = t.plus(px.div(n += 2));\r\n\r\n    if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n  }\r\n\r\n  if (k) r = r.times(2 << (k - 1));\r\n\r\n  external = true;\r\n\r\n  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n *\r\n */\r\nP.isFinite = function () {\r\n  return !!this.d;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\r\nP.isInteger = P.isInt = function () {\r\n  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is NaN, otherwise return false.\r\n *\r\n */\r\nP.isNaN = function () {\r\n  return !this.s;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\r\nP.isNegative = P.isNeg = function () {\r\n  return this.s < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\r\nP.isPositive = P.isPos = function () {\r\n  return this.s > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n *\r\n */\r\nP.isZero = function () {\r\n  return !!this.d && this.d[0] === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThan = P.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThanOrEqualTo = P.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * If no base is specified, return log[10](arg).\r\n *\r\n * log[base](arg) = ln(arg) / ln(base)\r\n *\r\n * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n * otherwise:\r\n *\r\n * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n *\r\n * log[-b](a)       = NaN\r\n * log[0](a)        = NaN\r\n * log[1](a)        = NaN\r\n * log[NaN](a)      = NaN\r\n * log[Infinity](a) = NaN\r\n * log[b](0)        = -Infinity\r\n * log[b](-0)       = -Infinity\r\n * log[b](-a)       = NaN\r\n * log[b](1)        = 0\r\n * log[b](Infinity) = Infinity\r\n * log[b](NaN)      = NaN\r\n *\r\n * [base] {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nP.logarithm = P.log = function (base) {\r\n  var isBase10, d, denominator, k, inf, num, sd, r,\r\n    arg = this,\r\n    Ctor = arg.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding,\r\n    guard = 5;\r\n\r\n  // Default base is 10.\r\n  if (base == null) {\r\n    base = new Ctor(10);\r\n    isBase10 = true;\r\n  } else {\r\n    base = new Ctor(base);\r\n    d = base.d;\r\n\r\n    // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n    if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n    isBase10 = base.eq(10);\r\n  }\r\n\r\n  d = arg.d;\r\n\r\n  // Is arg negative, non-finite, 0 or 1?\r\n  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n  }\r\n\r\n  // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n  // integer power of 10.\r\n  if (isBase10) {\r\n    if (d.length > 1) {\r\n      inf = true;\r\n    } else {\r\n      for (k = d[0]; k % 10 === 0;) k /= 10;\r\n      inf = k !== 1;\r\n    }\r\n  }\r\n\r\n  external = false;\r\n  sd = pr + guard;\r\n  num = naturalLogarithm(arg, sd);\r\n  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n  // The result will have 5 rounding digits.\r\n  r = divide(num, denominator, sd, 1);\r\n\r\n  // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n  // calculate 10 further digits.\r\n  //\r\n  // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n  // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n  // further digits, the last 14 are nines, round up and assume the result is exact.\r\n  // Also assume the result is exact if the last 14 are zero.\r\n  //\r\n  // Example of a result that will be incorrectly rounded:\r\n  // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n  // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n  // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n  // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n  // place is still 2.6.\r\n  if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n    do {\r\n      sd += 10;\r\n      num = naturalLogarithm(arg, sd);\r\n      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n      r = divide(num, denominator, sd, 1);\r\n\r\n      if (!inf) {\r\n\r\n        // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n\r\n        break;\r\n      }\r\n    } while (checkRoundingDigits(r.d, k += 10, rm));\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.max = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'lt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.min = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'gt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n *  n - 0 = n\r\n *  n - N = N\r\n *  n - I = -I\r\n *  0 - n = -n\r\n *  0 - 0 = 0\r\n *  0 - N = N\r\n *  0 - I = -I\r\n *  N - n = N\r\n *  N - 0 = N\r\n *  N - N = N\r\n *  N - I = N\r\n *  I - n = I\r\n *  I - 0 = I\r\n *  I - N = N\r\n *  I - I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return y negated if x is finite and y is ±Infinity.\r\n    else if (x.d) y.s = -y.s;\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with different signs.\r\n    // Return NaN if both are ±Infinity with the same sign.\r\n    else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n  // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.plus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return y negated if x is zero and y is non-zero.\r\n    if (yd[0]) y.s = -y.s;\r\n\r\n    // Return x if y is zero and x is non-zero.\r\n    else if (xd[0]) y = new Ctor(x);\r\n\r\n    // Return zero if both are zero.\r\n    // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n    else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  e = mathfloor(y.e / LOG_BASE);\r\n  xe = mathfloor(x.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  k = xe - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (k) {\r\n    xLTy = k < 0;\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      k = -k;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = xe;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Numbers with massively different exponents would result in a very high number of\r\n    // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n    // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n    if (k > i) {\r\n      k = i;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    d.reverse();\r\n    for (i = k; i--;) d.push(0);\r\n    d.reverse();\r\n\r\n  // Base 1e7 exponents equal.\r\n  } else {\r\n\r\n    // Check digits to determine which is the bigger number.\r\n\r\n    i = xd.length;\r\n    len = yd.length;\r\n    xLTy = i < len;\r\n    if (xLTy) len = i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      if (xd[i] != yd[i]) {\r\n        xLTy = xd[i] < yd[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    k = 0;\r\n  }\r\n\r\n  if (xLTy) {\r\n    d = xd;\r\n    xd = yd;\r\n    yd = d;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  len = xd.length;\r\n\r\n  // Append zeros to `xd` if shorter.\r\n  // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n  // Subtract yd from xd.\r\n  for (i = yd.length; i > k;) {\r\n\r\n    if (xd[--i] < yd[i]) {\r\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n      --xd[j];\r\n      xd[i] += BASE;\r\n    }\r\n\r\n    xd[i] -= yd[i];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xd[--len] === 0;) xd.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n  // Zero?\r\n  if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n *   n % 0 =  N\r\n *   n % N =  N\r\n *   n % I =  n\r\n *   0 % n =  0\r\n *  -0 % n = -0\r\n *   0 % 0 =  N\r\n *   0 % N =  N\r\n *   0 % I =  0\r\n *   N % n =  N\r\n *   N % 0 =  N\r\n *   N % N =  N\r\n *   N % I =  N\r\n *   I % n =  N\r\n *   I % 0 =  N\r\n *   I % N =  N\r\n *   I % I =  N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * The result depends on the modulo mode.\r\n *\r\n */\r\nP.modulo = P.mod = function (y) {\r\n  var q,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n  if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n  // Return x if y is ±Infinity or x is ±0.\r\n  if (!y.d || x.d && !x.d[0]) {\r\n    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n  }\r\n\r\n  // Prevent rounding of intermediate calculations.\r\n  external = false;\r\n\r\n  if (Ctor.modulo == 9) {\r\n\r\n    // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n    // result = x - q * y    where  0 <= result < abs(y)\r\n    q = divide(x, y.abs(), 0, 3, 1);\r\n    q.s *= y.s;\r\n  } else {\r\n    q = divide(x, y, 0, Ctor.modulo, 1);\r\n  }\r\n\r\n  q = q.times(y);\r\n\r\n  external = true;\r\n\r\n  return x.minus(q);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalExponential = P.exp = function () {\r\n  return naturalExponential(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalLogarithm = P.ln = function () {\r\n  return naturalLogarithm(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\r\nP.negated = P.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n *  n + 0 = n\r\n *  n + N = N\r\n *  n + I = I\r\n *  0 + n = n\r\n *  0 + 0 = 0\r\n *  0 + N = N\r\n *  0 + I = I\r\n *  N + n = N\r\n *  N + 0 = N\r\n *  N + N = N\r\n *  N + I = N\r\n *  I + n = I\r\n *  I + 0 = I\r\n *  I + N = N\r\n *  I + I = I\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.plus = P.add = function (y) {\r\n  var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with the same sign.\r\n    // Return NaN if both are ±Infinity with different signs.\r\n    // Return y if x is finite and y is ±Infinity.\r\n    else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n   // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.minus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return x if y is zero.\r\n    // Return y if y is non-zero.\r\n    if (!yd[0]) y = new Ctor(x);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  k = mathfloor(x.e / LOG_BASE);\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  i = k - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (i) {\r\n\r\n    if (i < 0) {\r\n      d = xd;\r\n      i = -i;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = k;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n    k = Math.ceil(pr / LOG_BASE);\r\n    len = k > len ? k + 1 : len + 1;\r\n\r\n    if (i > len) {\r\n      i = len;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n    d.reverse();\r\n    for (; i--;) d.push(0);\r\n    d.reverse();\r\n  }\r\n\r\n  len = xd.length;\r\n  i = yd.length;\r\n\r\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n  if (len - i < 0) {\r\n    i = len;\r\n    d = yd;\r\n    yd = xd;\r\n    xd = d;\r\n  }\r\n\r\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n  for (carry = 0; i;) {\r\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n    xd[i] %= BASE;\r\n  }\r\n\r\n  if (carry) {\r\n    xd.unshift(carry);\r\n    ++e;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\r\nP.precision = P.sd = function (z) {\r\n  var k,\r\n    x = this;\r\n\r\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n  if (x.d) {\r\n    k = getPrecision(x.d);\r\n    if (z && x.e + 1 > k) k = x.e + 1;\r\n  } else {\r\n    k = NaN;\r\n  }\r\n\r\n  return k;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\r\nP.round = function () {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n *\r\n * sin(0)         = 0\r\n * sin(-0)        = -0\r\n * sin(Infinity)  = NaN\r\n * sin(-Infinity) = NaN\r\n * sin(NaN)       = NaN\r\n *\r\n */\r\nP.sine = P.sin = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n *  sqrt(-n) =  N\r\n *  sqrt(N)  =  N\r\n *  sqrt(-I) =  N\r\n *  sqrt(I)  =  I\r\n *  sqrt(0)  =  0\r\n *  sqrt(-0) = -0\r\n *\r\n */\r\nP.squareRoot = P.sqrt = function () {\r\n  var m, n, sd, r, rep, t,\r\n    x = this,\r\n    d = x.d,\r\n    e = x.e,\r\n    s = x.s,\r\n    Ctor = x.constructor;\r\n\r\n  // Negative/NaN/Infinity/zero?\r\n  if (s !== 1 || !d || !d[0]) {\r\n    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n  }\r\n\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = Math.sqrt(+x);\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n  if (s == 0 || s == 1 / 0) {\r\n    n = digitsToString(d);\r\n\r\n    if ((n.length + e) % 2 == 0) n += '0';\r\n    s = Math.sqrt(n);\r\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Newton-Raphson iteration.\r\n  for (;;) {\r\n    t = r;\r\n    r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * tan(0)         = 0\r\n * tan(-0)        = -0\r\n * tan(Infinity)  = NaN\r\n * tan(-Infinity) = NaN\r\n * tan(NaN)       = NaN\r\n *\r\n */\r\nP.tangent = P.tan = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.sin();\r\n  x.s = 1;\r\n  x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *  n * 0 = 0\r\n *  n * N = N\r\n *  n * I = I\r\n *  0 * n = 0\r\n *  0 * 0 = 0\r\n *  0 * N = N\r\n *  0 * I = N\r\n *  N * n = N\r\n *  N * 0 = N\r\n *  N * N = N\r\n *  N * I = N\r\n *  I * n = I\r\n *  I * 0 = N\r\n *  I * N = N\r\n *  I * I = I\r\n *\r\n * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.times = P.mul = function (y) {\r\n  var carry, e, i, k, r, rL, t, xdL, ydL,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    xd = x.d,\r\n    yd = (y = new Ctor(y)).d;\r\n\r\n  y.s *= x.s;\r\n\r\n   // If either is NaN, ±Infinity or ±0...\r\n  if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n      // Return NaN if either is NaN.\r\n      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n      ? NaN\r\n\r\n      // Return ±Infinity if either is ±Infinity.\r\n      // Return ±0 if either is ±0.\r\n      : !xd || !yd ? y.s / 0 : y.s * 0);\r\n  }\r\n\r\n  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Ensure xd points to the longer array.\r\n  if (xdL < ydL) {\r\n    r = xd;\r\n    xd = yd;\r\n    yd = r;\r\n    rL = xdL;\r\n    xdL = ydL;\r\n    ydL = rL;\r\n  }\r\n\r\n  // Initialise the result array with zeros.\r\n  r = [];\r\n  rL = xdL + ydL;\r\n  for (i = rL; i--;) r.push(0);\r\n\r\n  // Multiply!\r\n  for (i = ydL; --i >= 0;) {\r\n    carry = 0;\r\n    for (k = xdL + i; k > i;) {\r\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n      r[k--] = t % BASE | 0;\r\n      carry = t / BASE | 0;\r\n    }\r\n\r\n    r[k] = (r[k] + carry) % BASE | 0;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; !r[--rL];) r.pop();\r\n\r\n  if (carry) ++e;\r\n  else r.shift();\r\n\r\n  y.d = r;\r\n  y.e = getBase10Exponent(r, e);\r\n\r\n  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toBinary = function (sd, rm) {\r\n  return toStringBinary(this, 2, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n  if (dp === void 0) return x;\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  return finalise(x, dp + x.e + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x, true);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), dp + 1, rm);\r\n    str = finiteToString(x, true, dp + 1);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var str, y,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n    str = finiteToString(y, false, dp + y.e + 1);\r\n  }\r\n\r\n  // To determine whether to add the minus sign look at the value before it was rounded,\r\n  // i.e. look at `x` rather than `y`.\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n * numerator and an integer denominator.\r\n *\r\n * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n * value necessary to represent the number exactly.\r\n *\r\n * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n *\r\n */\r\nP.toFraction = function (maxD) {\r\n  var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n    x = this,\r\n    xd = x.d,\r\n    Ctor = x.constructor;\r\n\r\n  if (!xd) return new Ctor(x);\r\n\r\n  n1 = d0 = new Ctor(1);\r\n  d1 = n0 = new Ctor(0);\r\n\r\n  d = new Ctor(d1);\r\n  e = d.e = getPrecision(xd) - x.e - 1;\r\n  k = e % LOG_BASE;\r\n  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n  if (maxD == null) {\r\n\r\n    // d is 10**e, the minimum max-denominator needed.\r\n    maxD = e > 0 ? d : n1;\r\n  } else {\r\n    n = new Ctor(maxD);\r\n    if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n    maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n  }\r\n\r\n  external = false;\r\n  n = new Ctor(digitsToString(xd));\r\n  pr = Ctor.precision;\r\n  Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n  for (;;)  {\r\n    q = divide(n, d, 0, 1, 1);\r\n    d2 = d0.plus(q.times(d1));\r\n    if (d2.cmp(maxD) == 1) break;\r\n    d0 = d1;\r\n    d1 = d2;\r\n    d2 = n1;\r\n    n1 = n0.plus(q.times(d2));\r\n    n0 = d2;\r\n    d2 = d;\r\n    d = n.minus(q.times(d2));\r\n    n = d2;\r\n  }\r\n\r\n  d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n  n0 = n0.plus(d2.times(n1));\r\n  d0 = d0.plus(d2.times(d1));\r\n  n0.s = n1.s = x.s;\r\n\r\n  // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n  r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n      ? [n1, d1] : [n0, d0];\r\n\r\n  Ctor.precision = pr;\r\n  external = true;\r\n\r\n  return r;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toHexadecimal = P.toHex = function (sd, rm) {\r\n  return toStringBinary(this, 16, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n *\r\n * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n * or `y` is NaN, in which case the return value will be also be NaN.\r\n *\r\n * The return value is not affected by the value of `precision`.\r\n *\r\n * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toNearest() rounding mode not an integer: {rm}'\r\n * 'toNearest() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toNearest = function (y, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (y == null) {\r\n\r\n    // If x is not finite, return x.\r\n    if (!x.d) return x;\r\n\r\n    y = new Ctor(1);\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    y = new Ctor(y);\r\n    if (rm === void 0) {\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    // If x is not finite, return x if y is not NaN, else NaN.\r\n    if (!x.d) return y.s ? x : y;\r\n\r\n    // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n    if (!y.d) {\r\n      if (y.s) y.s = x.s;\r\n      return y;\r\n    }\r\n  }\r\n\r\n  // If y is not zero, calculate the nearest multiple of y to x.\r\n  if (y.d[0]) {\r\n    external = false;\r\n    x = divide(x, y, 0, rm, 1).times(y);\r\n    external = true;\r\n    finalise(x);\r\n\r\n  // If y is zero, return zero with the sign of x.\r\n  } else {\r\n    y.s = x.s;\r\n    x = y;\r\n  }\r\n\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n * Zero keeps its sign.\r\n *\r\n */\r\nP.toNumber = function () {\r\n  return +this;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toOctal = function (sd, rm) {\r\n  return toStringBinary(this, 8, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n * to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * ECMAScript compliant.\r\n *\r\n *   pow(x, NaN)                           = NaN\r\n *   pow(x, ±0)                            = 1\r\n\r\n *   pow(NaN, non-zero)                    = NaN\r\n *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n *   pow(abs(x) > 1, -Infinity)            = +0\r\n *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n *   pow(abs(x) < 1, +Infinity)            = +0\r\n *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n *   pow(+Infinity, y > 0)                 = +Infinity\r\n *   pow(+Infinity, y < 0)                 = +0\r\n *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n *   pow(-Infinity, even integer > 0)      = +Infinity\r\n *   pow(-Infinity, odd integer < 0)       = -0\r\n *   pow(-Infinity, even integer < 0)      = +0\r\n *   pow(+0, y > 0)                        = +0\r\n *   pow(+0, y < 0)                        = +Infinity\r\n *   pow(-0, odd integer > 0)              = -0\r\n *   pow(-0, even integer > 0)             = +0\r\n *   pow(-0, odd integer < 0)              = -Infinity\r\n *   pow(-0, even integer < 0)             = +Infinity\r\n *   pow(finite x < 0, finite non-integer) = NaN\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n * probability of an incorrectly rounded result\r\n * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n * i.e. 1 in 250,000,000,000,000\r\n *\r\n * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n *\r\n * y {number|string|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\r\nP.toPower = P.pow = function (y) {\r\n  var e, k, pr, r, rm, s,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    yn = +(y = new Ctor(y));\r\n\r\n  // Either ±Infinity, NaN or ±0?\r\n  if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (x.eq(1)) return x;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n  // y exponent\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n    r = intPow(Ctor, x, k, pr);\r\n    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n  }\r\n\r\n  s = x.s;\r\n\r\n  // if x is negative\r\n  if (s < 0) {\r\n\r\n    // if y is not an integer\r\n    if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n    // Result is positive if x is negative and the last digit of integer y is even.\r\n    if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n    // if x.eq(-1)\r\n    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n      x.s = s;\r\n      return x;\r\n    }\r\n  }\r\n\r\n  // Estimate result exponent.\r\n  // x^y = 10^e,  where e = y * log10(x)\r\n  // log10(x) = log10(x_significand) + x_exponent\r\n  // log10(x_significand) = ln(x_significand) / ln(10)\r\n  k = mathpow(+x, yn);\r\n  e = k == 0 || !isFinite(k)\r\n    ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n    : new Ctor(k + '').e;\r\n\r\n  // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n  // Overflow/underflow?\r\n  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n  external = false;\r\n  Ctor.rounding = x.s = 1;\r\n\r\n  // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n  // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n  // new Decimal(2.32456).pow('2087987436534566.46411')\r\n  // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n  k = Math.min(12, (e + '').length);\r\n\r\n  // r = x^y = exp(y*ln(x))\r\n  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n  // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n  if (r.d) {\r\n\r\n    // Truncate to the required precision plus five rounding digits.\r\n    r = finalise(r, pr + 5, 1);\r\n\r\n    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n    // the result.\r\n    if (checkRoundingDigits(r.d, pr, rm)) {\r\n      e = pr + 10;\r\n\r\n      // Truncate to the increased precision plus five rounding digits.\r\n      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n        r = finalise(r, pr + 1, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  r.s = s;\r\n  external = true;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), sd, rm);\r\n    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toSD() digits out of range: {sd}'\r\n * 'toSD() digits not an integer: {sd}'\r\n * 'toSD() rounding mode not an integer: {rm}'\r\n * 'toSD() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toSignificantDigits = P.toSD = function (sd, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  }\r\n\r\n  return finalise(new Ctor(x), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\r\nP.toString = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n *\r\n */\r\nP.truncated = P.trunc = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 1);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n * Unlike `toString`, negative zero will include the minus sign.\r\n *\r\n */\r\nP.valueOf = P.toJSON = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() ? '-' + str : str;\r\n};\r\n\r\n\r\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n/*\r\n *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n *                           finiteToString, naturalExponential, naturalLogarithm\r\n *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n *  convertBase              toStringBinary, parseOther\r\n *  cos                      P.cos\r\n *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n *                           taylorSeries, atan2, parseOther\r\n *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n *                           naturalLogarithm, ceil, floor, round, trunc\r\n *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n *                           toStringBinary\r\n *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n *  getLn10                  P.logarithm, naturalLogarithm\r\n *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n *  getPrecision             P.precision, P.toFraction\r\n *  getZeroString            digitsToString, finiteToString\r\n *  intPow                   P.toPower, parseOther\r\n *  isOdd                    toLessThanHalfPi\r\n *  maxOrMin                 max, min\r\n *  naturalExponential       P.naturalExponential, P.toPower\r\n *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n *                           P.toPower, naturalExponential\r\n *  nonFiniteToString        finiteToString, toStringBinary\r\n *  parseDecimal             Decimal\r\n *  parseOther               Decimal\r\n *  sin                      P.sin\r\n *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n *  toLessThanHalfPi         P.cos, P.sin\r\n *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n *  truncate                 intPow\r\n *\r\n *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n *                           naturalLogarithm, config, parseOther, random, Decimal\r\n */\r\n\r\n\r\nfunction digitsToString(d) {\r\n  var i, k, ws,\r\n    indexOfLastWord = d.length - 1,\r\n    str = '',\r\n    w = d[0];\r\n\r\n  if (indexOfLastWord > 0) {\r\n    str += w;\r\n    for (i = 1; i < indexOfLastWord; i++) {\r\n      ws = d[i] + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n      str += ws;\r\n    }\r\n\r\n    w = d[i];\r\n    ws = w + '';\r\n    k = LOG_BASE - ws.length;\r\n    if (k) str += getZeroString(k);\r\n  } else if (w === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Remove trailing zeros of last w.\r\n  for (; w % 10 === 0;) w /= 10;\r\n\r\n  return str + w;\r\n}\r\n\r\n\r\nfunction checkInt32(i, min, max) {\r\n  if (i !== ~~i || i < min || i > max) {\r\n    throw Error(invalidArgument + i);\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n * `repeating == null` if caller is `log` or `pow`,\r\n * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n */\r\nfunction checkRoundingDigits(d, i, rm, repeating) {\r\n  var di, k, r, rd;\r\n\r\n  // Get the length of the first word of the array d.\r\n  for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n  // Is the rounding digit in the first word of d?\r\n  if (--i < 0) {\r\n    i += LOG_BASE;\r\n    di = 0;\r\n  } else {\r\n    di = Math.ceil((i + 1) / LOG_BASE);\r\n    i %= LOG_BASE;\r\n  }\r\n\r\n  // i is the index (0 - 6) of the rounding digit.\r\n  // E.g. if within the word 3487563 the first rounding digit is 5,\r\n  // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n  k = mathpow(10, LOG_BASE - i);\r\n  rd = d[di] % k | 0;\r\n\r\n  if (repeating == null) {\r\n    if (i < 3) {\r\n      if (i == 0) rd = rd / 100 | 0;\r\n      else if (i == 1) rd = rd / 10 | 0;\r\n      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n    } else {\r\n      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n          (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n    }\r\n  } else {\r\n    if (i < 4) {\r\n      if (i == 0) rd = rd / 1000 | 0;\r\n      else if (i == 1) rd = rd / 100 | 0;\r\n      else if (i == 2) rd = rd / 10 | 0;\r\n      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n    } else {\r\n      r = ((repeating || rm < 4) && rd + 1 == k ||\r\n      (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n    }\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n// Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n// Eg. convertBase('255', 10, 16) returns [15, 15].\r\n// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\nfunction convertBase(str, baseIn, baseOut) {\r\n  var j,\r\n    arr = [0],\r\n    arrL,\r\n    i = 0,\r\n    strL = str.length;\r\n\r\n  for (; i < strL;) {\r\n    for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n    arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n    for (j = 0; j < arr.length; j++) {\r\n      if (arr[j] > baseOut - 1) {\r\n        if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n        arr[j + 1] += arr[j] / baseOut | 0;\r\n        arr[j] %= baseOut;\r\n      }\r\n    }\r\n  }\r\n\r\n  return arr.reverse();\r\n}\r\n\r\n\r\n/*\r\n * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction cosine(Ctor, x) {\r\n  var k, len, y;\r\n\r\n  if (x.isZero()) return x;\r\n\r\n  // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n  // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  len = x.d.length;\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    y = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    y = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  Ctor.precision += k;\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n  // Reverse argument reduction\r\n  for (var i = k; i--;) {\r\n    var cos2x = x.times(x);\r\n    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n  }\r\n\r\n  Ctor.precision -= k;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Perform division in the specified base.\r\n */\r\nvar divide = (function () {\r\n\r\n  // Assumes non-zero x and k, and hence non-zero result.\r\n  function multiplyInteger(x, k, base) {\r\n    var temp,\r\n      carry = 0,\r\n      i = x.length;\r\n\r\n    for (x = x.slice(); i--;) {\r\n      temp = x[i] * k + carry;\r\n      x[i] = temp % base | 0;\r\n      carry = temp / base | 0;\r\n    }\r\n\r\n    if (carry) x.unshift(carry);\r\n\r\n    return x;\r\n  }\r\n\r\n  function compare(a, b, aL, bL) {\r\n    var i, r;\r\n\r\n    if (aL != bL) {\r\n      r = aL > bL ? 1 : -1;\r\n    } else {\r\n      for (i = r = 0; i < aL; i++) {\r\n        if (a[i] != b[i]) {\r\n          r = a[i] > b[i] ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function subtract(a, b, aL, base) {\r\n    var i = 0;\r\n\r\n    // Subtract b from a.\r\n    for (; aL--;) {\r\n      a[aL] -= i;\r\n      i = a[aL] < b[aL] ? 1 : 0;\r\n      a[aL] = i * base + a[aL] - b[aL];\r\n    }\r\n\r\n    // Remove leading zeros.\r\n    for (; !a[0] && a.length > 1;) a.shift();\r\n  }\r\n\r\n  return function (x, y, pr, rm, dp, base) {\r\n    var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n      yL, yz,\r\n      Ctor = x.constructor,\r\n      sign = x.s == y.s ? 1 : -1,\r\n      xd = x.d,\r\n      yd = y.d;\r\n\r\n    // Either NaN, Infinity or 0?\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n        // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n    }\r\n\r\n    if (base) {\r\n      logBase = 1;\r\n      e = x.e - y.e;\r\n    } else {\r\n      base = BASE;\r\n      logBase = LOG_BASE;\r\n      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n    }\r\n\r\n    yL = yd.length;\r\n    xL = xd.length;\r\n    q = new Ctor(sign);\r\n    qd = q.d = [];\r\n\r\n    // Result exponent may be one less than e.\r\n    // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n    for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n    if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n    if (pr == null) {\r\n      sd = pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else if (dp) {\r\n      sd = pr + (x.e - y.e) + 1;\r\n    } else {\r\n      sd = pr;\r\n    }\r\n\r\n    if (sd < 0) {\r\n      qd.push(1);\r\n      more = true;\r\n    } else {\r\n\r\n      // Convert precision in number of base 10 digits to base 1e7 digits.\r\n      sd = sd / logBase + 2 | 0;\r\n      i = 0;\r\n\r\n      // divisor < 1e7\r\n      if (yL == 1) {\r\n        k = 0;\r\n        yd = yd[0];\r\n        sd++;\r\n\r\n        // k is the carry.\r\n        for (; (i < xL || k) && sd--; i++) {\r\n          t = k * base + (xd[i] || 0);\r\n          qd[i] = t / yd | 0;\r\n          k = t % yd | 0;\r\n        }\r\n\r\n        more = k || i < xL;\r\n\r\n      // divisor >= 1e7\r\n      } else {\r\n\r\n        // Normalise xd and yd so highest order digit of yd is >= base/2\r\n        k = base / (yd[0] + 1) | 0;\r\n\r\n        if (k > 1) {\r\n          yd = multiplyInteger(yd, k, base);\r\n          xd = multiplyInteger(xd, k, base);\r\n          yL = yd.length;\r\n          xL = xd.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xd.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL;) rem[remL++] = 0;\r\n\r\n        yz = yd.slice();\r\n        yz.unshift(0);\r\n        yd0 = yd[0];\r\n\r\n        if (yd[1] >= base / 2) ++yd0;\r\n\r\n        do {\r\n          k = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yd, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, k.\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // k will be how many times the divisor goes into the current remainder.\r\n            k = rem0 / yd0 | 0;\r\n\r\n            //  Algorithm:\r\n            //  1. product = divisor * trial digit (k)\r\n            //  2. if product > remainder: product -= divisor, k--\r\n            //  3. remainder -= product\r\n            //  4. if product was < remainder at 2:\r\n            //    5. compare new remainder and divisor\r\n            //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n            if (k > 1) {\r\n              if (k >= base) k = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiplyInteger(yd, k, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              cmp = compare(prod, rem, prodL, remL);\r\n\r\n              // product > remainder.\r\n              if (cmp == 1) {\r\n                k--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n              }\r\n            } else {\r\n\r\n              // cmp is -1.\r\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n              if (k == 0) cmp = k = 1;\r\n              prod = yd.slice();\r\n            }\r\n\r\n            prodL = prod.length;\r\n            if (prodL < remL) prod.unshift(0);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n\r\n            // If product was < previous remainder.\r\n            if (cmp == -1) {\r\n              remL = rem.length;\r\n\r\n              // Compare divisor and new remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              if (cmp < 1) {\r\n                k++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yd, remL, base);\r\n              }\r\n            }\r\n\r\n            remL = rem.length;\r\n          } else if (cmp === 0) {\r\n            k++;\r\n            rem = [0];\r\n          }    // if cmp === 1, k will be 0\r\n\r\n          // Add the next digit, k, to the result array.\r\n          qd[i++] = k;\r\n\r\n          // Update the remainder.\r\n          if (cmp && rem[0]) {\r\n            rem[remL++] = xd[xi] || 0;\r\n          } else {\r\n            rem = [xd[xi]];\r\n            remL = 1;\r\n          }\r\n\r\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n        more = rem[0] !== void 0;\r\n      }\r\n\r\n      // Leading zero?\r\n      if (!qd[0]) qd.shift();\r\n    }\r\n\r\n    // logBase is 1 when divide is being used for base conversion.\r\n    if (logBase == 1) {\r\n      q.e = e;\r\n      inexact = more;\r\n    } else {\r\n\r\n      // To calculate q.e, first get the number of digits of qd[0].\r\n      for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n      q.e = i + e * logBase - 1;\r\n\r\n      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n    }\r\n\r\n    return q;\r\n  };\r\n})();\r\n\r\n\r\n/*\r\n * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n * Check for over/under-flow.\r\n */\r\n function finalise(x, sd, rm, isTruncated) {\r\n  var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n    Ctor = x.constructor;\r\n\r\n  // Don't round if sd is null or undefined.\r\n  out: if (sd != null) {\r\n    xd = x.d;\r\n\r\n    // Infinity/NaN.\r\n    if (!xd) return x;\r\n\r\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n    // w: the word of xd containing rd, a base 1e7 number.\r\n    // xdi: the index of w within xd.\r\n    // digits: the number of digits of w.\r\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n    // they had leading zeros)\r\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n    // Get the length of the first word of the digits array xd.\r\n    for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n    i = sd - digits;\r\n\r\n    // Is the rounding digit in the first word of xd?\r\n    if (i < 0) {\r\n      i += LOG_BASE;\r\n      j = sd;\r\n      w = xd[xdi = 0];\r\n\r\n      // Get the rounding digit at index j of w.\r\n      rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n    } else {\r\n      xdi = Math.ceil((i + 1) / LOG_BASE);\r\n      k = xd.length;\r\n      if (xdi >= k) {\r\n        if (isTruncated) {\r\n\r\n          // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n          for (; k++ <= xdi;) xd.push(0);\r\n          w = rd = 0;\r\n          digits = 1;\r\n          i %= LOG_BASE;\r\n          j = i - LOG_BASE + 1;\r\n        } else {\r\n          break out;\r\n        }\r\n      } else {\r\n        w = k = xd[xdi];\r\n\r\n        // Get the number of digits of w.\r\n        for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n        // Get the index of rd within w.\r\n        i %= LOG_BASE;\r\n\r\n        // Get the index of rd within w, adjusted for leading zeros.\r\n        // The number of leading zeros of w is given by LOG_BASE - digits.\r\n        j = i - LOG_BASE + digits;\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      }\r\n    }\r\n\r\n    // Are there any non-zero digits after the rounding digit?\r\n    isTruncated = isTruncated || sd < 0 ||\r\n      xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n    // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n    // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n    // will give 714.\r\n\r\n    roundUp = rm < 4\r\n      ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n      : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n        // Check whether the digit to the left of the rounding digit is odd.\r\n        ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n          rm == (x.s < 0 ? 8 : 7));\r\n\r\n    if (sd < 1 || !xd[0]) {\r\n      xd.length = 0;\r\n      if (roundUp) {\r\n\r\n        // Convert sd to decimal places.\r\n        sd -= x.e + 1;\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n        x.e = -sd || 0;\r\n      } else {\r\n\r\n        // Zero.\r\n        xd[0] = x.e = 0;\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n    // Remove excess digits.\r\n    if (i == 0) {\r\n      xd.length = xdi;\r\n      k = 1;\r\n      xdi--;\r\n    } else {\r\n      xd.length = xdi + 1;\r\n      k = mathpow(10, LOG_BASE - i);\r\n\r\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n      // j > 0 means i > number of leading zeros of w.\r\n      xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n    }\r\n\r\n    if (roundUp) {\r\n      for (;;) {\r\n\r\n        // Is the digit to be rounded up in the first word of xd?\r\n        if (xdi == 0) {\r\n\r\n          // i will be the length of xd[0] before k is added.\r\n          for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n          j = xd[0] += k;\r\n          for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n          // if i != k the length has increased.\r\n          if (i != k) {\r\n            x.e++;\r\n            if (xd[0] == BASE) xd[0] = 1;\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          xd[xdi] += k;\r\n          if (xd[xdi] != BASE) break;\r\n          xd[xdi--] = 0;\r\n          k = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n  }\r\n\r\n  if (external) {\r\n\r\n    // Overflow?\r\n    if (x.e > Ctor.maxE) {\r\n\r\n      // Infinity.\r\n      x.d = null;\r\n      x.e = NaN;\r\n\r\n    // Underflow?\r\n    } else if (x.e < Ctor.minE) {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n      // Ctor.underflow = true;\r\n    } // else Ctor.underflow = false;\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\nfunction finiteToString(x, isExp, sd) {\r\n  if (!x.isFinite()) return nonFiniteToString(x);\r\n  var k,\r\n    e = x.e,\r\n    str = digitsToString(x.d),\r\n    len = str.length;\r\n\r\n  if (isExp) {\r\n    if (sd && (k = sd - len) > 0) {\r\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n    } else if (len > 1) {\r\n      str = str.charAt(0) + '.' + str.slice(1);\r\n    }\r\n\r\n    str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n  } else if (e < 0) {\r\n    str = '0.' + getZeroString(-e - 1) + str;\r\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n  } else if (e >= len) {\r\n    str += getZeroString(e + 1 - len);\r\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n  } else {\r\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n    if (sd && (k = sd - len) > 0) {\r\n      if (e + 1 === len) str += '.';\r\n      str += getZeroString(k);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// Calculate the base 10 exponent from the base 1e7 exponent.\r\nfunction getBase10Exponent(digits, e) {\r\n  var w = digits[0];\r\n\r\n  // Add the number of digits of the first word of the digits array.\r\n  for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n  return e;\r\n}\r\n\r\n\r\nfunction getLn10(Ctor, sd, pr) {\r\n  if (sd > LN10_PRECISION) {\r\n\r\n    // Reset global state in case the exception is caught.\r\n    external = true;\r\n    if (pr) Ctor.precision = pr;\r\n    throw Error(precisionLimitExceeded);\r\n  }\r\n  return finalise(new Ctor(LN10), sd, 1, true);\r\n}\r\n\r\n\r\nfunction getPi(Ctor, sd, rm) {\r\n  if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n  return finalise(new Ctor(PI), sd, rm, true);\r\n}\r\n\r\n\r\nfunction getPrecision(digits) {\r\n  var w = digits.length - 1,\r\n    len = w * LOG_BASE + 1;\r\n\r\n  w = digits[w];\r\n\r\n  // If non-zero...\r\n  if (w) {\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    for (; w % 10 == 0; w /= 10) len--;\r\n\r\n    // Add the number of digits of the first word.\r\n    for (w = digits[0]; w >= 10; w /= 10) len++;\r\n  }\r\n\r\n  return len;\r\n}\r\n\r\n\r\nfunction getZeroString(k) {\r\n  var zs = '';\r\n  for (; k--;) zs += '0';\r\n  return zs;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n * integer of type number.\r\n *\r\n * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n *\r\n */\r\nfunction intPow(Ctor, x, n, pr) {\r\n  var isTruncated,\r\n    r = new Ctor(1),\r\n\r\n    // Max n of 9007199254740991 takes 53 loop iterations.\r\n    // Maximum digits array length; leaves [28, 34] guard digits.\r\n    k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n  external = false;\r\n\r\n  for (;;) {\r\n    if (n % 2) {\r\n      r = r.times(x);\r\n      if (truncate(r.d, k)) isTruncated = true;\r\n    }\r\n\r\n    n = mathfloor(n / 2);\r\n    if (n === 0) {\r\n\r\n      // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n      n = r.d.length - 1;\r\n      if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n      break;\r\n    }\r\n\r\n    x = x.times(x);\r\n    truncate(x.d, k);\r\n  }\r\n\r\n  external = true;\r\n\r\n  return r;\r\n}\r\n\r\n\r\nfunction isOdd(n) {\r\n  return n.d[n.d.length - 1] & 1;\r\n}\r\n\r\n\r\n/*\r\n * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n */\r\nfunction maxOrMin(Ctor, args, ltgt) {\r\n  var y,\r\n    x = new Ctor(args[0]),\r\n    i = 0;\r\n\r\n  for (; ++i < args.length;) {\r\n    y = new Ctor(args[i]);\r\n    if (!y.s) {\r\n      x = y;\r\n      break;\r\n    } else if (x[ltgt](y)) {\r\n      x = y;\r\n    }\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(Infinity)  = Infinity\r\n *  exp(-Infinity) = 0\r\n *  exp(NaN)       = NaN\r\n *  exp(±0)        = 1\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n *  The result will always be correctly rounded.\r\n *\r\n */\r\nfunction naturalExponential(x, sd) {\r\n  var denominator, guard, j, pow, sum, t, wpr,\r\n    rep = 0,\r\n    i = 0,\r\n    k = 0,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // 0/NaN/Infinity?\r\n  if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n    return new Ctor(x.d\r\n      ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n      : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  t = new Ctor(0.03125);\r\n\r\n  // while abs(x) >= 0.1\r\n  while (x.e > -2) {\r\n\r\n    // x = x / 2^5\r\n    x = x.times(t);\r\n    k += 5;\r\n  }\r\n\r\n  // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n  // necessary to ensure the first 4 rounding digits are correct.\r\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n  wpr += guard;\r\n  denominator = pow = sum = new Ctor(1);\r\n  Ctor.precision = wpr;\r\n\r\n  for (;;) {\r\n    pow = finalise(pow.times(x), wpr, 1);\r\n    denominator = denominator.times(++i);\r\n    t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      j = k;\r\n      while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n      // Check to see if the first 4 rounding digits are [49]999.\r\n      // If so, repeat the summation with a higher precision, otherwise\r\n      // e.g. with precision: 18, rounding: 1\r\n      // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n\r\n        if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += 10;\r\n          denominator = pow = t = new Ctor(1);\r\n          i = 0;\r\n          rep++;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n *  ln(-n)        = NaN\r\n *  ln(0)         = -Infinity\r\n *  ln(-0)        = -Infinity\r\n *  ln(1)         = 0\r\n *  ln(Infinity)  = Infinity\r\n *  ln(-Infinity) = NaN\r\n *  ln(NaN)       = NaN\r\n *\r\n *  ln(n) (n != 1) is non-terminating.\r\n *\r\n */\r\nfunction naturalLogarithm(y, sd) {\r\n  var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n    n = 1,\r\n    guard = 10,\r\n    x = y,\r\n    xd = x.d,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // Is x negative or Infinity, NaN, 0 or 1?\r\n  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  Ctor.precision = wpr += guard;\r\n  c = digitsToString(xd);\r\n  c0 = c.charAt(0);\r\n\r\n  if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n    // Argument reduction.\r\n    // The series converges faster the closer the argument is to 1, so using\r\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n    // later be divided by this number, then separate out the power of 10 using\r\n    // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n    // max n is 6 (gives 0.7 - 1.3)\r\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n      x = x.times(y);\r\n      c = digitsToString(x.d);\r\n      c0 = c.charAt(0);\r\n      n++;\r\n    }\r\n\r\n    e = x.e;\r\n\r\n    if (c0 > 1) {\r\n      x = new Ctor('0.' + c);\r\n      e++;\r\n    } else {\r\n      x = new Ctor(c0 + '.' + c.slice(1));\r\n    }\r\n  } else {\r\n\r\n    // The argument reduction method above may result in overflow if the argument y is a massive\r\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n    x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n    Ctor.precision = pr;\r\n\r\n    return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n  }\r\n\r\n  // x1 is x reduced to a value near 1.\r\n  x1 = x;\r\n\r\n  // Taylor series.\r\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n  sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n  x2 = finalise(x.times(x), wpr, 1);\r\n  denominator = 3;\r\n\r\n  for (;;) {\r\n    numerator = finalise(numerator.times(x2), wpr, 1);\r\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      sum = sum.times(2);\r\n\r\n      // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n      // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n      sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n      // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n      // been repeated previously) and the first 4 rounding digits 9999?\r\n      // If so, restart the summation with a higher precision, otherwise\r\n      // e.g. with precision: 12, rounding: 1\r\n      // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n        if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += guard;\r\n          t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n          x2 = finalise(x.times(x), wpr, 1);\r\n          denominator = rep = 1;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n    denominator += 2;\r\n  }\r\n}\r\n\r\n\r\n// ±Infinity, NaN.\r\nfunction nonFiniteToString(x) {\r\n  // Unsigned.\r\n  return String(x.s * x.s / 0);\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\r\nfunction parseDecimal(x, str) {\r\n  var e, i, len;\r\n\r\n  // Decimal point?\r\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = str.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +str.slice(i + 1);\r\n    str = str.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = str.length;\r\n  }\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n  // Determine trailing zeros.\r\n  for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n  str = str.slice(i, len);\r\n\r\n  if (str) {\r\n    len -= i;\r\n    x.e = e = e - i - 1;\r\n    x.d = [];\r\n\r\n    // Transform base\r\n\r\n    // e is the base 10 exponent.\r\n    // i is where to slice str to get the first word of the digits array.\r\n    i = (e + 1) % LOG_BASE;\r\n    if (e < 0) i += LOG_BASE;\r\n\r\n    if (i < len) {\r\n      if (i) x.d.push(+str.slice(0, i));\r\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n      str = str.slice(i);\r\n      i = LOG_BASE - str.length;\r\n    } else {\r\n      i -= len;\r\n    }\r\n\r\n    for (; i--;) str += '0';\r\n    x.d.push(+str);\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > x.constructor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < x.constructor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // x.constructor.underflow = true;\r\n      } // else x.constructor.underflow = false;\r\n    }\r\n  } else {\r\n\r\n    // Zero.\r\n    x.e = 0;\r\n    x.d = [0];\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n */\r\nfunction parseOther(x, str) {\r\n  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n  if (str.indexOf('_') > -1) {\r\n    str = str.replace(/(\\d)_(?=\\d)/g, '$1');\r\n    if (isDecimal.test(str)) return parseDecimal(x, str);\r\n  } else if (str === 'Infinity' || str === 'NaN') {\r\n    if (!+str) x.s = NaN;\r\n    x.e = NaN;\r\n    x.d = null;\r\n    return x;\r\n  }\r\n\r\n  if (isHex.test(str))  {\r\n    base = 16;\r\n    str = str.toLowerCase();\r\n  } else if (isBinary.test(str))  {\r\n    base = 2;\r\n  } else if (isOctal.test(str))  {\r\n    base = 8;\r\n  } else {\r\n    throw Error(invalidArgument + str);\r\n  }\r\n\r\n  // Is there a binary exponent part?\r\n  i = str.search(/p/i);\r\n\r\n  if (i > 0) {\r\n    p = +str.slice(i + 1);\r\n    str = str.substring(2, i);\r\n  } else {\r\n    str = str.slice(2);\r\n  }\r\n\r\n  // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n  // fraction part will be restored.\r\n  i = str.indexOf('.');\r\n  isFloat = i >= 0;\r\n  Ctor = x.constructor;\r\n\r\n  if (isFloat) {\r\n    str = str.replace('.', '');\r\n    len = str.length;\r\n    i = len - i;\r\n\r\n    // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n    divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n  }\r\n\r\n  xd = convertBase(str, base, BASE);\r\n  xe = xd.length - 1;\r\n\r\n  // Remove trailing zeros.\r\n  for (i = xe; xd[i] === 0; --i) xd.pop();\r\n  if (i < 0) return new Ctor(x.s * 0);\r\n  x.e = getBase10Exponent(xd, xe);\r\n  x.d = xd;\r\n  external = false;\r\n\r\n  // At what precision to perform the division to ensure exact conversion?\r\n  // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n  // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n  // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n  // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n  // Therefore using 4 * the number of digits of str will always be enough.\r\n  if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n  // Multiply by the binary exponent part if present.\r\n  if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n  external = true;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction sine(Ctor, x) {\r\n  var k,\r\n    len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\r\n  }\r\n\r\n  // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n  // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n  // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  k = 1.4 * Math.sqrt(len);\r\n  k = k > 16 ? 16 : k | 0;\r\n\r\n  x = x.times(1 / tinyPow(5, k));\r\n  x = taylorSeries(Ctor, 2, x, x);\r\n\r\n  // Reverse argument reduction\r\n  var sin2_x,\r\n    d5 = new Ctor(5),\r\n    d16 = new Ctor(16),\r\n    d20 = new Ctor(20);\r\n  for (; k--;) {\r\n    sin2_x = x.times(x);\r\n    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\nfunction taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n  var j, t, u, x2,\r\n    i = 1,\r\n    pr = Ctor.precision,\r\n    k = Math.ceil(pr / LOG_BASE);\r\n\r\n  external = false;\r\n  x2 = x.times(x);\r\n  u = new Ctor(y);\r\n\r\n  for (;;) {\r\n    t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n    y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    t = u.plus(y);\r\n\r\n    if (t.d[k] !== void 0) {\r\n      for (j = k; t.d[j] === u.d[j] && j--;);\r\n      if (j == -1) break;\r\n    }\r\n\r\n    j = u;\r\n    u = y;\r\n    y = t;\r\n    t = j;\r\n    i++;\r\n  }\r\n\r\n  external = true;\r\n  t.d.length = k + 1;\r\n\r\n  return t;\r\n}\r\n\r\n\r\n// Exponent e must be positive and non-zero.\r\nfunction tinyPow(b, e) {\r\n  var n = b;\r\n  while (--e) n *= b;\r\n  return n;\r\n}\r\n\r\n\r\n// Return the absolute value of `x` reduced to less than or equal to half pi.\r\nfunction toLessThanHalfPi(Ctor, x) {\r\n  var t,\r\n    isNeg = x.s < 0,\r\n    pi = getPi(Ctor, Ctor.precision, 1),\r\n    halfPi = pi.times(0.5);\r\n\r\n  x = x.abs();\r\n\r\n  if (x.lte(halfPi)) {\r\n    quadrant = isNeg ? 4 : 1;\r\n    return x;\r\n  }\r\n\r\n  t = x.divToInt(pi);\r\n\r\n  if (t.isZero()) {\r\n    quadrant = isNeg ? 3 : 2;\r\n  } else {\r\n    x = x.minus(t.times(pi));\r\n\r\n    // 0 <= x < pi\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n      return x;\r\n    }\r\n\r\n    quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n  }\r\n\r\n  return x.minus(pi).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return the value of Decimal `x` as a string in base `baseOut`.\r\n *\r\n * If the optional `sd` argument is present include a binary exponent suffix.\r\n */\r\nfunction toStringBinary(x, baseOut, sd, rm) {\r\n  var base, e, i, k, len, roundUp, str, xd, y,\r\n    Ctor = x.constructor,\r\n    isExp = sd !== void 0;\r\n\r\n  if (isExp) {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  } else {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  }\r\n\r\n  if (!x.isFinite()) {\r\n    str = nonFiniteToString(x);\r\n  } else {\r\n    str = finiteToString(x);\r\n    i = str.indexOf('.');\r\n\r\n    // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n    // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n    // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n    // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n    if (isExp) {\r\n      base = 2;\r\n      if (baseOut == 16) {\r\n        sd = sd * 4 - 3;\r\n      } else if (baseOut == 8) {\r\n        sd = sd * 3 - 2;\r\n      }\r\n    } else {\r\n      base = baseOut;\r\n    }\r\n\r\n    // Convert the number as an integer then divide the result by its base raised to a power such\r\n    // that the fraction part will be restored.\r\n\r\n    // Non-integer.\r\n    if (i >= 0) {\r\n      str = str.replace('.', '');\r\n      y = new Ctor(1);\r\n      y.e = str.length - i;\r\n      y.d = convertBase(finiteToString(y), 10, base);\r\n      y.e = y.d.length;\r\n    }\r\n\r\n    xd = convertBase(str, 10, base);\r\n    e = len = xd.length;\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] == 0;) xd.pop();\r\n\r\n    if (!xd[0]) {\r\n      str = isExp ? '0p+0' : '0';\r\n    } else {\r\n      if (i < 0) {\r\n        e--;\r\n      } else {\r\n        x = new Ctor(x);\r\n        x.d = xd;\r\n        x.e = e;\r\n        x = divide(x, y, sd, rm, 0, base);\r\n        xd = x.d;\r\n        e = x.e;\r\n        roundUp = inexact;\r\n      }\r\n\r\n      // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      i = xd[sd];\r\n      k = base / 2;\r\n      roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n      roundUp = rm < 4\r\n        ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n        : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n          rm === (x.s < 0 ? 8 : 7));\r\n\r\n      xd.length = sd;\r\n\r\n      if (roundUp) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up and so on.\r\n        for (; ++xd[--sd] > base - 1;) {\r\n          xd[sd] = 0;\r\n          if (!sd) {\r\n            ++e;\r\n            xd.unshift(1);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Determine trailing zeros.\r\n      for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n      // E.g. [4, 11, 15] becomes 4bf.\r\n      for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n      // Add binary exponent suffix?\r\n      if (isExp) {\r\n        if (len > 1) {\r\n          if (baseOut == 16 || baseOut == 8) {\r\n            i = baseOut == 16 ? 4 : 3;\r\n            for (--len; len % i; len++) str += '0';\r\n            xd = convertBase(str, base, baseOut);\r\n            for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n            // xd[0] will always be be 1\r\n            for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n          } else {\r\n            str = str.charAt(0) + '.' + str.slice(1);\r\n          }\r\n        }\r\n\r\n        str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n      } else if (e < 0) {\r\n        for (; ++e;) str = '0' + str;\r\n        str = '0.' + str;\r\n      } else {\r\n        if (++e > len) for (e -= len; e-- ;) str += '0';\r\n        else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n  }\r\n\r\n  return x.s < 0 ? '-' + str : str;\r\n}\r\n\r\n\r\n// Does not strip trailing zeros.\r\nfunction truncate(arr, len) {\r\n  if (arr.length > len) {\r\n    arr.length = len;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// Decimal methods\r\n\r\n\r\n/*\r\n *  abs\r\n *  acos\r\n *  acosh\r\n *  add\r\n *  asin\r\n *  asinh\r\n *  atan\r\n *  atanh\r\n *  atan2\r\n *  cbrt\r\n *  ceil\r\n *  clamp\r\n *  clone\r\n *  config\r\n *  cos\r\n *  cosh\r\n *  div\r\n *  exp\r\n *  floor\r\n *  hypot\r\n *  ln\r\n *  log\r\n *  log2\r\n *  log10\r\n *  max\r\n *  min\r\n *  mod\r\n *  mul\r\n *  pow\r\n *  random\r\n *  round\r\n *  set\r\n *  sign\r\n *  sin\r\n *  sinh\r\n *  sqrt\r\n *  sub\r\n *  sum\r\n *  tan\r\n *  tanh\r\n *  trunc\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction abs(x) {\r\n  return new this(x).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction acos(x) {\r\n  return new this(x).acos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction acosh(x) {\r\n  return new this(x).acosh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction add(x, y) {\r\n  return new this(x).plus(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction asin(x) {\r\n  return new this(x).asin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction asinh(x) {\r\n  return new this(x).asinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction atan(x) {\r\n  return new this(x).atan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction atanh(x) {\r\n  return new this(x).atanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi, pi]\r\n *\r\n * y {number|string|Decimal} The y-coordinate.\r\n * x {number|string|Decimal} The x-coordinate.\r\n *\r\n * atan2(±0, -0)               = ±pi\r\n * atan2(±0, +0)               = ±0\r\n * atan2(±0, -x)               = ±pi for x > 0\r\n * atan2(±0, x)                = ±0 for x > 0\r\n * atan2(-y, ±0)               = -pi/2 for y > 0\r\n * atan2(y, ±0)                = pi/2 for y > 0\r\n * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n * atan2(±Infinity, +Infinity) = ±pi/4\r\n * atan2(NaN, x) = NaN\r\n * atan2(y, NaN) = NaN\r\n *\r\n */\r\nfunction atan2(y, x) {\r\n  y = new this(y);\r\n  x = new this(x);\r\n  var r,\r\n    pr = this.precision,\r\n    rm = this.rounding,\r\n    wpr = pr + 4;\r\n\r\n  // Either NaN\r\n  if (!y.s || !x.s) {\r\n    r = new this(NaN);\r\n\r\n  // Both ±Infinity\r\n  } else if (!y.d && !x.d) {\r\n    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n    r.s = y.s;\r\n\r\n  // x is ±Infinity or y is ±0\r\n  } else if (!x.d || y.isZero()) {\r\n    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n    r.s = y.s;\r\n\r\n  // y is ±Infinity or x is ±0\r\n  } else if (!y.d || x.isZero()) {\r\n    r = getPi(this, wpr, 1).times(0.5);\r\n    r.s = y.s;\r\n\r\n  // Both non-zero and finite\r\n  } else if (x.s < 0) {\r\n    this.precision = wpr;\r\n    this.rounding = 1;\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n    x = getPi(this, wpr, 1);\r\n    this.precision = pr;\r\n    this.rounding = rm;\r\n    r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n  } else {\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction cbrt(x) {\r\n  return new this(x).cbrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ceil(x) {\r\n  return finalise(x = new this(x), x.e + 1, 2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n *\r\n * x {number|string|Decimal}\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\r\nfunction clamp(x, min, max) {\r\n  return new this(x).clamp(min, max);\r\n}\r\n\r\n\r\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *   maxE       {number}\r\n *   minE       {number}\r\n *   modulo     {number}\r\n *   crypto     {boolean|number}\r\n *   defaults   {true}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\r\nfunction config(obj) {\r\n  if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n  var i, p, v,\r\n    useDefaults = obj.defaults === true,\r\n    ps = [\r\n      'precision', 1, MAX_DIGITS,\r\n      'rounding', 0, 8,\r\n      'toExpNeg', -EXP_LIMIT, 0,\r\n      'toExpPos', 0, EXP_LIMIT,\r\n      'maxE', 0, EXP_LIMIT,\r\n      'minE', -EXP_LIMIT, 0,\r\n      'modulo', 0, 9\r\n    ];\r\n\r\n  for (i = 0; i < ps.length; i += 3) {\r\n    if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n  if ((v = obj[p]) !== void 0) {\r\n    if (v === true || v === false || v === 0 || v === 1) {\r\n      if (v) {\r\n        if (typeof crypto != 'undefined' && crypto &&\r\n          (crypto.getRandomValues || crypto.randomBytes)) {\r\n          this[p] = true;\r\n        } else {\r\n          throw Error(cryptoUnavailable);\r\n        }\r\n      } else {\r\n        this[p] = false;\r\n      }\r\n    } else {\r\n      throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cos(x) {\r\n  return new this(x).cos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cosh(x) {\r\n  return new this(x).cosh();\r\n}\r\n\r\n\r\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\r\nfunction clone(obj) {\r\n  var i, p, ps;\r\n\r\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * v {number|string|Decimal} A numeric value.\r\n   *\r\n   */\r\n  function Decimal(v) {\r\n    var e, i, t,\r\n      x = this;\r\n\r\n    // Decimal called without new.\r\n    if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n    // which points to Object.\r\n    x.constructor = Decimal;\r\n\r\n    // Duplicate.\r\n    if (isDecimalInstance(v)) {\r\n      x.s = v.s;\r\n\r\n      if (external) {\r\n        if (!v.d || v.e > Decimal.maxE) {\r\n\r\n          // Infinity.\r\n          x.e = NaN;\r\n          x.d = null;\r\n        } else if (v.e < Decimal.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d.slice();\r\n        }\r\n      } else {\r\n        x.e = v.e;\r\n        x.d = v.d ? v.d.slice() : v.d;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    t = typeof v;\r\n\r\n    if (t === 'number') {\r\n      if (v === 0) {\r\n        x.s = 1 / v < 0 ? -1 : 1;\r\n        x.e = 0;\r\n        x.d = [0];\r\n        return;\r\n      }\r\n\r\n      if (v < 0) {\r\n        v = -v;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      // Fast path for small integers.\r\n      if (v === ~~v && v < 1e7) {\r\n        for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n        if (external) {\r\n          if (e > Decimal.maxE) {\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (e < Decimal.minE) {\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n        } else {\r\n          x.e = e;\r\n          x.d = [v];\r\n        }\r\n\r\n        return;\r\n\r\n      // Infinity, NaN.\r\n      } else if (v * 0 !== 0) {\r\n        if (!v) x.s = NaN;\r\n        x.e = NaN;\r\n        x.d = null;\r\n        return;\r\n      }\r\n\r\n      return parseDecimal(x, v.toString());\r\n\r\n    } else if (t !== 'string') {\r\n      throw Error(invalidArgument + v);\r\n    }\r\n\r\n    // Minus sign?\r\n    if ((i = v.charCodeAt(0)) === 45) {\r\n      v = v.slice(1);\r\n      x.s = -1;\r\n    } else {\r\n      // Plus sign?\r\n      if (i === 43) v = v.slice(1);\r\n      x.s = 1;\r\n    }\r\n\r\n    return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n  }\r\n\r\n  Decimal.prototype = P;\r\n\r\n  Decimal.ROUND_UP = 0;\r\n  Decimal.ROUND_DOWN = 1;\r\n  Decimal.ROUND_CEIL = 2;\r\n  Decimal.ROUND_FLOOR = 3;\r\n  Decimal.ROUND_HALF_UP = 4;\r\n  Decimal.ROUND_HALF_DOWN = 5;\r\n  Decimal.ROUND_HALF_EVEN = 6;\r\n  Decimal.ROUND_HALF_CEIL = 7;\r\n  Decimal.ROUND_HALF_FLOOR = 8;\r\n  Decimal.EUCLID = 9;\r\n\r\n  Decimal.config = Decimal.set = config;\r\n  Decimal.clone = clone;\r\n  Decimal.isDecimal = isDecimalInstance;\r\n\r\n  Decimal.abs = abs;\r\n  Decimal.acos = acos;\r\n  Decimal.acosh = acosh;        // ES6\r\n  Decimal.add = add;\r\n  Decimal.asin = asin;\r\n  Decimal.asinh = asinh;        // ES6\r\n  Decimal.atan = atan;\r\n  Decimal.atanh = atanh;        // ES6\r\n  Decimal.atan2 = atan2;\r\n  Decimal.cbrt = cbrt;          // ES6\r\n  Decimal.ceil = ceil;\r\n  Decimal.clamp = clamp;\r\n  Decimal.cos = cos;\r\n  Decimal.cosh = cosh;          // ES6\r\n  Decimal.div = div;\r\n  Decimal.exp = exp;\r\n  Decimal.floor = floor;\r\n  Decimal.hypot = hypot;        // ES6\r\n  Decimal.ln = ln;\r\n  Decimal.log = log;\r\n  Decimal.log10 = log10;        // ES6\r\n  Decimal.log2 = log2;          // ES6\r\n  Decimal.max = max;\r\n  Decimal.min = min;\r\n  Decimal.mod = mod;\r\n  Decimal.mul = mul;\r\n  Decimal.pow = pow;\r\n  Decimal.random = random;\r\n  Decimal.round = round;\r\n  Decimal.sign = sign;          // ES6\r\n  Decimal.sin = sin;\r\n  Decimal.sinh = sinh;          // ES6\r\n  Decimal.sqrt = sqrt;\r\n  Decimal.sub = sub;\r\n  Decimal.sum = sum;\r\n  Decimal.tan = tan;\r\n  Decimal.tanh = tanh;          // ES6\r\n  Decimal.trunc = trunc;        // ES6\r\n\r\n  if (obj === void 0) obj = {};\r\n  if (obj) {\r\n    if (obj.defaults !== true) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n  }\r\n\r\n  Decimal.config(obj);\r\n\r\n  return Decimal;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction div(x, y) {\r\n  return new this(x).div(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n *\r\n */\r\nfunction exp(x) {\r\n  return new this(x).exp();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction floor(x) {\r\n  return finalise(x = new this(x), x.e + 1, 3);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction hypot() {\r\n  var i, n,\r\n    t = new this(0);\r\n\r\n  external = false;\r\n\r\n  for (i = 0; i < arguments.length;) {\r\n    n = new this(arguments[i++]);\r\n    if (!n.d) {\r\n      if (n.s) {\r\n        external = true;\r\n        return new this(1 / 0);\r\n      }\r\n      t = n;\r\n    } else if (t.d) {\r\n      t = t.plus(n.times(n));\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return t.sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n * otherwise return false.\r\n *\r\n */\r\nfunction isDecimalInstance(obj) {\r\n  return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ln(x) {\r\n  return new this(x).ln();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * log[y](x)\r\n *\r\n * x {number|string|Decimal} The argument of the logarithm.\r\n * y {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nfunction log(x, y) {\r\n  return new this(x).log(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log2(x) {\r\n  return new this(x).log(2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log10(x) {\r\n  return new this(x).log(10);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction max() {\r\n  return maxOrMin(this, arguments, 'lt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction min() {\r\n  return maxOrMin(this, arguments, 'gt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mod(x, y) {\r\n  return new this(x).mod(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mul(x, y) {\r\n  return new this(x).mul(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The base.\r\n * y {number|string|Decimal} The exponent.\r\n *\r\n */\r\nfunction pow(x, y) {\r\n  return new this(x).pow(y);\r\n}\r\n\r\n\r\n/*\r\n * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n * are produced).\r\n *\r\n * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n *\r\n */\r\nfunction random(sd) {\r\n  var d, e, k, n,\r\n    i = 0,\r\n    r = new this(1),\r\n    rd = [];\r\n\r\n  if (sd === void 0) sd = this.precision;\r\n  else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n  k = Math.ceil(sd / LOG_BASE);\r\n\r\n  if (!this.crypto) {\r\n    for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n  // Browsers supporting crypto.getRandomValues.\r\n  } else if (crypto.getRandomValues) {\r\n    d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n    for (; i < k;) {\r\n      n = d[i];\r\n\r\n      // 0 <= n < 4294967296\r\n      // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n      if (n >= 4.29e9) {\r\n        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n      } else {\r\n\r\n        // 0 <= n <= 4289999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd[i++] = n % 1e7;\r\n      }\r\n    }\r\n\r\n  // Node.js supporting crypto.randomBytes.\r\n  } else if (crypto.randomBytes) {\r\n\r\n    // buffer\r\n    d = crypto.randomBytes(k *= 4);\r\n\r\n    for (; i < k;) {\r\n\r\n      // 0 <= n < 2147483648\r\n      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n      // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n      if (n >= 2.14e9) {\r\n        crypto.randomBytes(4).copy(d, i);\r\n      } else {\r\n\r\n        // 0 <= n <= 2139999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd.push(n % 1e7);\r\n        i += 4;\r\n      }\r\n    }\r\n\r\n    i = k / 4;\r\n  } else {\r\n    throw Error(cryptoUnavailable);\r\n  }\r\n\r\n  k = rd[--i];\r\n  sd %= LOG_BASE;\r\n\r\n  // Convert trailing digits to zeros according to sd.\r\n  if (k && sd) {\r\n    n = mathpow(10, LOG_BASE - sd);\r\n    rd[i] = (k / n | 0) * n;\r\n  }\r\n\r\n  // Remove trailing words which are zero.\r\n  for (; rd[i] === 0; i--) rd.pop();\r\n\r\n  // Zero?\r\n  if (i < 0) {\r\n    e = 0;\r\n    rd = [0];\r\n  } else {\r\n    e = -1;\r\n\r\n    // Remove leading words which are zero and adjust exponent accordingly.\r\n    for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n    // Count the digits of the first word of rd to determine leading zeros.\r\n    for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n    // Adjust the exponent for leading zeros of the first word of rd.\r\n    if (k < LOG_BASE) e -= LOG_BASE - k;\r\n  }\r\n\r\n  r.e = e;\r\n  r.d = rd;\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n *\r\n * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction round(x) {\r\n  return finalise(x = new this(x), x.e + 1, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if x > 0,\r\n *  -1    if x < 0,\r\n *   0    if x is 0,\r\n *  -0    if x is -0,\r\n *   NaN  otherwise\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sign(x) {\r\n  x = new this(x);\r\n  return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sin(x) {\r\n  return new this(x).sin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sinh(x) {\r\n  return new this(x).sinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sqrt(x) {\r\n  return new this(x).sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction sub(x, y) {\r\n  return new this(x).sub(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * Only the result is rounded, not the intermediate calculations.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction sum() {\r\n  var i = 0,\r\n    args = arguments,\r\n    x = new this(args[i]);\r\n\r\n  external = false;\r\n  for (; x.s && ++i < args.length;) x = x.plus(args[i]);\r\n  external = true;\r\n\r\n  return finalise(x, this.precision, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tan(x) {\r\n  return new this(x).tan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tanh(x) {\r\n  return new this(x).tanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` truncated to an integer.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction trunc(x) {\r\n  return finalise(x = new this(x), x.e + 1, 1);\r\n}\r\n\r\n\r\nP[Symbol.for('nodejs.util.inspect.custom')] = P.toString;\r\nP[Symbol.toStringTag] = 'Decimal';\r\n\r\n// Create and configure initial Decimal constructor.\r\nexport var Decimal = P.constructor = clone(DEFAULTS);\r\n\r\n// Create the internal constants from their string values.\r\nLN10 = new Decimal(LN10);\r\nPI = new Decimal(PI);\r\n\r\nexport default Decimal;\r\n","import { AccountInfo, Commitment, Connection, PublicKey } from \"@solana/web3.js\";\r\nimport { ReturnTypeFetchMultipleMintInfos } from \"../raydium/type\";\r\nimport { WSOLMint, chunkArray, solToWSol } from \"./\";\r\nimport { createLogger } from \"./logger\";\r\nimport { MINT_SIZE, TOKEN_PROGRAM_ID, getTransferFeeConfig, unpackMint } from \"@solana/spl-token\";\r\n\r\ninterface MultipleAccountsJsonRpcResponse {\r\n  jsonrpc: string;\r\n  id: string;\r\n  error?: {\r\n    code: number;\r\n    message: string;\r\n  };\r\n  result: {\r\n    context: { slot: number };\r\n    value: { data: Array<string>; executable: boolean; lamports: number; owner: string; rentEpoch: number }[];\r\n  };\r\n}\r\n\r\nexport interface GetMultipleAccountsInfoConfig {\r\n  batchRequest?: boolean;\r\n  commitment?: Commitment;\r\n  chunkCount?: number;\r\n}\r\n\r\nconst logger = createLogger(\"Raydium_accountInfo_util\");\r\n\r\nexport async function getMultipleAccountsInfo(\r\n  connection: Connection,\r\n  publicKeys: PublicKey[],\r\n  config?: GetMultipleAccountsInfoConfig,\r\n): Promise<(AccountInfo<Buffer> | null)[]> {\r\n  const {\r\n    batchRequest,\r\n    commitment = \"confirmed\",\r\n    chunkCount = 100,\r\n  } = {\r\n    batchRequest: false,\r\n    ...config,\r\n  };\r\n\r\n  const chunkedKeys = chunkArray(publicKeys, chunkCount);\r\n  let results: (AccountInfo<Buffer> | null)[][] = new Array(chunkedKeys.length).fill([]);\r\n\r\n  if (batchRequest) {\r\n    const batch = chunkedKeys.map((keys) => {\r\n      const args = connection._buildArgs([keys.map((key) => key.toBase58())], commitment, \"base64\");\r\n      return {\r\n        methodName: \"getMultipleAccounts\",\r\n        args,\r\n      };\r\n    });\r\n\r\n    const _batch = chunkArray(batch, 10);\r\n\r\n    const unsafeResponse: MultipleAccountsJsonRpcResponse[] = await (\r\n      await Promise.all(_batch.map(async (i) => await (connection as any)._rpcBatchRequest(i)))\r\n    ).flat();\r\n    results = unsafeResponse.map((unsafeRes: MultipleAccountsJsonRpcResponse) => {\r\n      if (unsafeRes.error)\r\n        logger.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${unsafeRes.error.message}`);\r\n\r\n      return unsafeRes.result.value.map((accountInfo) => {\r\n        if (accountInfo) {\r\n          const { data, executable, lamports, owner, rentEpoch } = accountInfo;\r\n\r\n          if (data.length !== 2 && data[1] !== \"base64\") logger.logWithError(`info must be base64 encoded, RPC_ERROR`);\r\n\r\n          return {\r\n            data: Buffer.from(data[0], \"base64\"),\r\n            executable,\r\n            lamports,\r\n            owner: new PublicKey(owner),\r\n            rentEpoch,\r\n          };\r\n        }\r\n        return null;\r\n      });\r\n    });\r\n  } else {\r\n    try {\r\n      results = (await Promise.all(\r\n        chunkedKeys.map((keys) => connection.getMultipleAccountsInfo(keys, commitment)),\r\n      )) as (AccountInfo<Buffer> | null)[][];\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        logger.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${error.message}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  return results.flat();\r\n}\r\n\r\nexport async function getMultipleAccountsInfoWithCustomFlags<T extends { pubkey: PublicKey }>(\r\n  connection: Connection,\r\n  publicKeysWithCustomFlag: T[],\r\n  config?: GetMultipleAccountsInfoConfig,\r\n): Promise<({ accountInfo: AccountInfo<Buffer> | null } & T)[]> {\r\n  const multipleAccountsInfo = await getMultipleAccountsInfo(\r\n    connection,\r\n    publicKeysWithCustomFlag.map((o) => o.pubkey),\r\n    config,\r\n  );\r\n\r\n  return publicKeysWithCustomFlag.map((o, idx) => ({ ...o, accountInfo: multipleAccountsInfo[idx] }));\r\n}\r\n\r\nexport enum AccountType {\r\n  Uninitialized,\r\n  Mint,\r\n  Account,\r\n}\r\nexport const ACCOUNT_TYPE_SIZE = 1;\r\n\r\nexport async function fetchMultipleMintInfos({\r\n  connection,\r\n  mints,\r\n  config,\r\n}: {\r\n  connection: Connection;\r\n  mints: PublicKey[];\r\n  config?: { batchRequest?: boolean };\r\n}): Promise<ReturnTypeFetchMultipleMintInfos> {\r\n  if (mints.length === 0) return {};\r\n  const mintInfos = await getMultipleAccountsInfoWithCustomFlags(\r\n    connection,\r\n    mints.map((i) => ({ pubkey: solToWSol(i) })),\r\n    config,\r\n  );\r\n\r\n  const mintK: ReturnTypeFetchMultipleMintInfos = {};\r\n  for (const i of mintInfos) {\r\n    if (!i.accountInfo || i.accountInfo.data.length < MINT_SIZE) {\r\n      console.log(\"invalid mint account\", i.pubkey.toBase58());\r\n      continue;\r\n    }\r\n    const t = unpackMint(i.pubkey, i.accountInfo, i.accountInfo?.owner);\r\n    mintK[i.pubkey.toString()] = {\r\n      ...t,\r\n      programId: i.accountInfo?.owner || TOKEN_PROGRAM_ID,\r\n      feeConfig: getTransferFeeConfig(t) ?? undefined,\r\n    };\r\n  }\r\n  mintK[PublicKey.default.toBase58()] = mintK[WSOLMint.toBase58()];\r\n\r\n  return mintK;\r\n}\r\n","import { get, set } from \"lodash\";\r\n\r\nexport type ModuleName = \"Common.Api\";\r\n\r\nexport enum LogLevel {\r\n  Error,\r\n  Warning,\r\n  Info,\r\n  Debug,\r\n}\r\nexport class Logger {\r\n  private logLevel: LogLevel;\r\n  private name: string;\r\n  constructor(params: { name: string; logLevel?: LogLevel }) {\r\n    this.logLevel = params.logLevel !== undefined ? params.logLevel : LogLevel.Error;\r\n    this.name = params.name;\r\n  }\r\n\r\n  set level(logLevel: LogLevel) {\r\n    this.logLevel = logLevel;\r\n  }\r\n  get time(): string {\r\n    return Date.now().toString();\r\n  }\r\n  get moduleName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  private isLogLevel(level: LogLevel): boolean {\r\n    return level <= this.logLevel;\r\n  }\r\n\r\n  public error(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Error)) return this;\r\n    console.error(this.time, this.name, \"sdk logger error\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public logWithError(...props): Logger {\r\n    // this.error(...props)\r\n    const msg = props.map((arg) => (typeof arg === \"object\" ? JSON.stringify(arg) : arg)).join(\", \");\r\n    throw new Error(msg);\r\n  }\r\n\r\n  public warning(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Warning)) return this;\r\n    console.warn(this.time, this.name, \"sdk logger warning\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public info(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Info)) return this;\r\n    console.info(this.time, this.name, \"sdk logger info\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public debug(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Debug)) return this;\r\n    console.debug(this.time, this.name, \"sdk logger debug\", ...props);\r\n    return this;\r\n  }\r\n}\r\n\r\nconst moduleLoggers: { [key in ModuleName]?: Logger } = {};\r\nconst moduleLevels: { [key in ModuleName]?: LogLevel } = {};\r\n\r\nexport function createLogger(moduleName: string): Logger {\r\n  let logger = get(moduleLoggers, moduleName);\r\n  if (!logger) {\r\n    // default level is error\r\n    const logLevel = get(moduleLevels, moduleName);\r\n\r\n    logger = new Logger({ name: moduleName, logLevel });\r\n    set(moduleLoggers, moduleName, logger);\r\n  }\r\n\r\n  return logger;\r\n}\r\n\r\nexport function setLoggerLevel(moduleName: string, level: LogLevel): void {\r\n  set(moduleLevels, moduleName, level);\r\n\r\n  const logger = get(moduleLoggers, moduleName);\r\n  if (logger) logger.level = level;\r\n}\r\n","import BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { CurrencyAmount, TokenAmount } from \"../module/amount\";\r\nimport { Currency } from \"../module/currency\";\r\nimport { Fraction } from \"../module/fraction\";\r\nimport { Percent } from \"../module/percent\";\r\nimport { Price } from \"../module/price\";\r\nimport { Token } from \"../module/token\";\r\nimport { SplToken, TokenJson } from \"../raydium/token/type\";\r\nimport { ReplaceType } from \"../raydium/type\";\r\nimport { parseBigNumberish } from \"./constant\";\r\nimport { mul } from \"./fractionUtil\";\r\nimport { notInnerObject } from \"./utility\";\r\n\r\nexport const BN_ZERO = new BN(0);\r\nexport const BN_ONE = new BN(1);\r\nexport const BN_TWO = new BN(2);\r\nexport const BN_THREE = new BN(3);\r\nexport const BN_FIVE = new BN(5);\r\nexport const BN_TEN = new BN(10);\r\nexport const BN_100 = new BN(100);\r\nexport const BN_1000 = new BN(1000);\r\nexport const BN_10000 = new BN(10000);\r\nexport type BigNumberish = BN | string | number | bigint;\r\nexport type Numberish = number | string | bigint | Fraction | BN;\r\n\r\nexport function tenExponential(shift: BigNumberish): BN {\r\n  return BN_TEN.pow(parseBigNumberish(shift));\r\n}\r\n\r\n/**\r\n *\r\n * @example\r\n * getIntInfo(0.34) => { numerator: '34', denominator: '100'}\r\n * getIntInfo('0.34') //=> { numerator: '34', denominator: '100'}\r\n */\r\nexport function parseNumberInfo(n: Numberish | undefined): {\r\n  denominator: string;\r\n  numerator: string;\r\n  sign?: string;\r\n  int?: string;\r\n  dec?: string;\r\n} {\r\n  if (n === undefined) return { denominator: \"1\", numerator: \"0\" };\r\n  if (n instanceof BN) {\r\n    return { numerator: n.toString(), denominator: \"1\" };\r\n  }\r\n\r\n  if (n instanceof Fraction) {\r\n    return { denominator: n.denominator.toString(), numerator: n.numerator.toString() };\r\n  }\r\n\r\n  const s = String(n);\r\n  const [, sign = \"\", int = \"\", dec = \"\"] = s.replace(\",\", \"\").match(/(-?)(\\d*)\\.?(\\d*)/) ?? [];\r\n  const denominator = \"1\" + \"0\".repeat(dec.length);\r\n  const numerator = sign + (int === \"0\" ? \"\" : int) + dec || \"0\";\r\n  return { denominator, numerator, sign, int, dec };\r\n}\r\n\r\n// round up\r\nexport function divCeil(a: BN, b: BN): BN {\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  const dm = a.divmod(b);\r\n\r\n  // Fast case - exact division\r\n  if (dm.mod.isZero()) return dm.div;\r\n\r\n  // Round up\r\n  return dm.div.isNeg() ? dm.div.isubn(1) : dm.div.iaddn(1);\r\n}\r\n\r\nexport function shakeFractionDecimal(n: Fraction): string {\r\n  const [, sign = \"\", int = \"\"] = n.toFixed(2).match(/(-?)(\\d*)\\.?(\\d*)/) ?? [];\r\n  return `${sign}${int}`;\r\n}\r\n\r\nexport function toBN(n: Numberish, decimal: BigNumberish = 0): BN {\r\n  if (n instanceof BN) return n;\r\n  return new BN(shakeFractionDecimal(toFraction(n).mul(BN_TEN.pow(new BN(String(decimal))))));\r\n}\r\n\r\nexport function toFraction(value: Numberish): Fraction {\r\n  //  to complete math format(may have decimal), not int\r\n  if (value instanceof Percent) return new Fraction(value.numerator, value.denominator);\r\n\r\n  if (value instanceof Price) return value.adjusted;\r\n\r\n  // to complete math format(may have decimal), not BN\r\n  if (value instanceof TokenAmount)\r\n    try {\r\n      return toFraction(value.toExact());\r\n    } catch {\r\n      return new Fraction(BN_ZERO);\r\n    }\r\n\r\n  // do not ideal with other fraction value\r\n  if (value instanceof Fraction) return value;\r\n\r\n  // wrap to Fraction\r\n  const n = String(value);\r\n  const details = parseNumberInfo(n);\r\n  return new Fraction(details.numerator, details.denominator);\r\n}\r\n\r\nexport function ceilDiv(tokenAmount: BN, feeNumerator: BN, feeDenominator: BN): BN {\r\n  return tokenAmount.mul(feeNumerator).add(feeDenominator).sub(new BN(1)).div(feeDenominator);\r\n}\r\n\r\nexport function floorDiv(tokenAmount: BN, feeNumerator: BN, feeDenominator: BN): BN {\r\n  return tokenAmount.mul(feeNumerator).div(feeDenominator);\r\n}\r\n\r\n/**\r\n * @example\r\n * toPercent(3.14) // => Percent { 314.00% }\r\n * toPercent(3.14, { alreadyDecimaled: true }) // => Percent {3.14%}\r\n */\r\nexport function toPercent(\r\n  n: Numberish,\r\n  options?: { /* usually used for backend data */ alreadyDecimaled?: boolean },\r\n): Percent {\r\n  const { numerator, denominator } = parseNumberInfo(n);\r\n  return new Percent(new BN(numerator), new BN(denominator).mul(options?.alreadyDecimaled ? new BN(100) : new BN(1)));\r\n}\r\n\r\nexport function toTokenPrice(params: {\r\n  token: TokenJson | Token | SplToken;\r\n  numberPrice: Numberish;\r\n  decimalDone?: boolean;\r\n}): Price {\r\n  const { token, numberPrice, decimalDone } = params;\r\n  const usdCurrency = new Token({ mint: \"\", decimals: 6, symbol: \"usd\", name: \"usd\", skipMint: true });\r\n  const { numerator, denominator } = parseNumberInfo(numberPrice);\r\n  const parsedNumerator = decimalDone ? new BN(numerator).mul(BN_TEN.pow(new BN(token.decimals))) : numerator;\r\n  const parsedDenominator = new BN(denominator).mul(BN_TEN.pow(new BN(usdCurrency.decimals)));\r\n\r\n  return new Price({\r\n    baseToken: usdCurrency,\r\n    denominator: parsedDenominator.toString(),\r\n    quoteToken: new Token({ ...token, skipMint: true, mint: \"\" }),\r\n    numerator: parsedNumerator.toString(),\r\n  });\r\n}\r\n\r\nexport function toUsdCurrency(amount: Numberish): CurrencyAmount {\r\n  const usdCurrency = new Currency({ decimals: 6, symbol: \"usd\", name: \"usd\" });\r\n  const amountBigNumber = toBN(mul(amount, 10 ** usdCurrency.decimals)!);\r\n  return new CurrencyAmount(usdCurrency, amountBigNumber);\r\n}\r\n\r\nexport function toTotalPrice(amount: Numberish | undefined, price: Price | undefined): CurrencyAmount {\r\n  if (!price || !amount) return toUsdCurrency(0);\r\n  return toUsdCurrency(mul(amount, price)!);\r\n}\r\n\r\nexport function decimalToFraction(n: Decimal | undefined): Fraction | undefined {\r\n  if (n == null) return undefined;\r\n  const { numerator, denominator } = parseNumberInfo(n.toString());\r\n  return new Fraction(numerator, denominator);\r\n}\r\n\r\nexport function isDecimal(val: unknown): boolean {\r\n  return val instanceof Decimal;\r\n}\r\n\r\nexport function recursivelyDecimalToFraction<T>(info: T): ReplaceType<T, Decimal, Fraction> {\r\n  // @ts-expect-error no need type for inner code\r\n  return isDecimal(info)\r\n    ? decimalToFraction(info as any)\r\n    : Array.isArray(info)\r\n    ? info.map((k) => recursivelyDecimalToFraction(k))\r\n    : notInnerObject(info)\r\n    ? Object.fromEntries(Object.entries(info as any).map(([k, v]) => [k, recursivelyDecimalToFraction(v)]))\r\n    : info;\r\n}\r\n","import _Big from \"big.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport { BigNumberish, BN_TEN } from \"../common/bignumber\";\r\nimport { createLogger, Logger } from \"../common/logger\";\r\n\r\nimport { parseBigNumberish, Rounding } from \"../common\";\r\nimport { Currency } from \"./currency\";\r\nimport toFormat, { WrappedBig } from \"./formatter\";\r\nimport { Fraction } from \"./fraction\";\r\nimport { Token } from \"./token\";\r\n\r\nconst logger = createLogger(\"Raydium_amount\");\r\n\r\nconst Big = toFormat(_Big);\r\ntype Big = WrappedBig;\r\n\r\nexport function splitNumber(num: string, decimals: number): [string, string] {\r\n  let integral = \"0\";\r\n  let fractional = \"0\";\r\n\r\n  if (num.includes(\".\")) {\r\n    const splited = num.split(\".\");\r\n    if (splited.length === 2) {\r\n      [integral, fractional] = splited;\r\n      fractional = fractional.padEnd(decimals, \"0\");\r\n    } else {\r\n      logger.logWithError(`invalid number string, num: ${num}`);\r\n    }\r\n  } else {\r\n    integral = num;\r\n  }\r\n\r\n  // fix decimals is 0\r\n  return [integral, fractional.slice(0, decimals) || fractional];\r\n}\r\n\r\nexport class TokenAmount extends Fraction {\r\n  public readonly token: Token;\r\n  protected logger: Logger;\r\n\r\n  public constructor(token: Token, amount: BigNumberish, isRaw = true, name?: string) {\r\n    let parsedAmount = new BN(0);\r\n    const multiplier = BN_TEN.pow(new BN(token.decimals));\r\n\r\n    if (isRaw) {\r\n      parsedAmount = parseBigNumberish(amount);\r\n    } else {\r\n      let integralAmount = new BN(0);\r\n      let fractionalAmount = new BN(0);\r\n\r\n      // parse fractional string\r\n      if (typeof amount === \"string\" || typeof amount === \"number\" || typeof amount === \"bigint\") {\r\n        const [integral, fractional] = splitNumber(amount.toString(), token.decimals);\r\n        integralAmount = parseBigNumberish(integral);\r\n        fractionalAmount = parseBigNumberish(fractional);\r\n      }\r\n\r\n      integralAmount = integralAmount.mul(multiplier);\r\n      parsedAmount = integralAmount.add(fractionalAmount);\r\n    }\r\n\r\n    super(parsedAmount, multiplier);\r\n    this.logger = createLogger(name || \"TokenAmount\");\r\n    this.token = token;\r\n  }\r\n\r\n  public get raw(): BN {\r\n    return this.numerator;\r\n  }\r\n  public isZero(): boolean {\r\n    return this.raw.isZero();\r\n  }\r\n  public gt(other: TokenAmount): boolean {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"gt token not equals\");\r\n    return this.raw.gt(other.raw);\r\n  }\r\n\r\n  /**\r\n   * a less than b\r\n   */\r\n  public lt(other: TokenAmount): boolean {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"lt token not equals\");\r\n    return this.raw.lt(other.raw);\r\n  }\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"add token not equals\");\r\n    return new TokenAmount(this.token, this.raw.add(other.raw));\r\n  }\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"sub token not equals\");\r\n    return new TokenAmount(this.token, this.raw.sub(other.raw));\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits = this.token.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To fixed\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1.000000000\r\n   * 1.234 -> 1.234000000\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toFixed(\r\n    decimalPlaces = this.token.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    if (decimalPlaces > this.token.decimals) this.logger.logWithError(\"decimals overflow\");\r\n    return super.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To exact\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1\r\n   * 1.234 -> 1.234\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toExact(format: object = { groupSeparator: \"\" }): string {\r\n    Big.DP = this.token.decimals;\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\r\n  }\r\n}\r\n\r\nexport class CurrencyAmount extends Fraction {\r\n  public readonly currency: Currency;\r\n  protected logger: Logger;\r\n\r\n  public constructor(currency: Currency, amount: BigNumberish, isRaw = true, name?: string) {\r\n    let parsedAmount = new BN(0);\r\n    const multiplier = BN_TEN.pow(new BN(currency.decimals));\r\n\r\n    if (isRaw) {\r\n      parsedAmount = parseBigNumberish(amount);\r\n    } else {\r\n      let integralAmount = new BN(0);\r\n      let fractionalAmount = new BN(0);\r\n\r\n      // parse fractional string\r\n      if (typeof amount === \"string\" || typeof amount === \"number\" || typeof amount === \"bigint\") {\r\n        const [integral, fractional] = splitNumber(amount.toString(), currency.decimals);\r\n        integralAmount = parseBigNumberish(integral);\r\n        fractionalAmount = parseBigNumberish(fractional);\r\n      }\r\n\r\n      integralAmount = integralAmount.mul(multiplier);\r\n      parsedAmount = integralAmount.add(fractionalAmount);\r\n    }\r\n\r\n    super(parsedAmount, multiplier);\r\n    this.logger = createLogger(name || \"TokenAmount\");\r\n    this.currency = currency;\r\n  }\r\n\r\n  public get raw(): BN {\r\n    return this.numerator;\r\n  }\r\n\r\n  public isZero(): boolean {\r\n    return this.raw.isZero();\r\n  }\r\n\r\n  /**\r\n   * a greater than b\r\n   */\r\n  public gt(other: CurrencyAmount): boolean {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"gt currency not equals\");\r\n    return this.raw.gt(other.raw);\r\n  }\r\n\r\n  /**\r\n   * a less than b\r\n   */\r\n  public lt(other: CurrencyAmount): boolean {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"lt currency not equals\");\r\n    return this.raw.lt(other.raw);\r\n  }\r\n\r\n  public add(other: CurrencyAmount): CurrencyAmount {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"add currency not equals\");\r\n    return new CurrencyAmount(this.currency, this.raw.add(other.raw));\r\n  }\r\n\r\n  public sub(other: CurrencyAmount): CurrencyAmount {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"sub currency not equals\");\r\n    return new CurrencyAmount(this.currency, this.raw.sub(other.raw));\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To fixed\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1.000000000\r\n   * 1.234 -> 1.234000000\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toFixed(\r\n    decimalPlaces = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    if (decimalPlaces > this.currency.decimals) this.logger.logWithError(\"decimals overflow\");\r\n\r\n    return super.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To exact\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1\r\n   * 1.234 -> 1.234\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toExact(format: object = { groupSeparator: \"\" }): string {\r\n    Big.DP = this.currency.decimals;\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\r\n  }\r\n}\r\n","import Big, { BigConstructor, BigSource, RoundingMode } from \"big.js\";\r\nimport Decimal, { Config, Numeric } from \"decimal.js-light\";\r\nimport _toFarmat from \"toformat\";\r\n\r\ntype TakeStatic<T> = { [P in keyof T]: T[P] };\r\ninterface FormatOptions {\r\n  decimalSeparator?: string;\r\n  groupSeparator?: string;\r\n  groupSize?: number;\r\n  fractionGroupSeparator?: string;\r\n  fractionGroupSize?: number;\r\n}\r\ninterface WrappedBigConstructor extends TakeStatic<BigConstructor> {\r\n  new (value: BigSource): WrappedBig;\r\n  (value: BigSource): WrappedBig;\r\n  (): WrappedBigConstructor;\r\n\r\n  format: FormatOptions;\r\n}\r\nexport interface WrappedBig extends Big {\r\n  add(n: BigSource): WrappedBig;\r\n  abs(): WrappedBig;\r\n  div(n: BigSource): WrappedBig;\r\n  minus(n: BigSource): WrappedBig;\r\n  mod(n: BigSource): WrappedBig;\r\n  mul(n: BigSource): WrappedBig;\r\n  plus(n: BigSource): WrappedBig;\r\n  pow(exp: number): WrappedBig;\r\n  round(dp?: number, rm?: RoundingMode): WrappedBig;\r\n  sqrt(): WrappedBig;\r\n  sub(n: BigSource): WrappedBig;\r\n  times(n: BigSource): WrappedBig;\r\n  toFormat(): string;\r\n  toFormat(options: FormatOptions): string;\r\n  toFormat(fractionLength: number): string;\r\n  toFormat(fractionLength: number, options: FormatOptions): string;\r\n  toFormat(fractionLength: number, missionUnknown: number): string;\r\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\r\n}\r\n\r\ntype DecimalConstructor = typeof Decimal;\r\ninterface WrappedDecimalConstructor extends TakeStatic<DecimalConstructor> {\r\n  new (value: Numeric): WrappedDecimal;\r\n  clone(config?: Config): WrappedDecimalConstructor;\r\n  config(config: Config): WrappedDecimal;\r\n  set(config: Config): WrappedDecimal;\r\n  format: FormatOptions;\r\n}\r\nexport interface WrappedDecimal extends Decimal {\r\n  absoluteValue(): WrappedDecimal;\r\n  abs(): WrappedDecimal;\r\n  dividedBy(y: Numeric): WrappedDecimal;\r\n  div(y: Numeric): WrappedDecimal;\r\n  dividedToIntegerBy(y: Numeric): WrappedDecimal;\r\n  idiv(y: Numeric): WrappedDecimal;\r\n  logarithm(base?: Numeric): WrappedDecimal;\r\n  log(base?: Numeric): WrappedDecimal;\r\n  minus(y: Numeric): WrappedDecimal;\r\n  sub(y: Numeric): WrappedDecimal;\r\n  modulo(y: Numeric): WrappedDecimal;\r\n  mod(y: Numeric): WrappedDecimal;\r\n  naturalExponetial(): WrappedDecimal;\r\n  exp(): WrappedDecimal;\r\n  naturalLogarithm(): WrappedDecimal;\r\n  ln(): WrappedDecimal;\r\n  negated(): WrappedDecimal;\r\n  neg(): WrappedDecimal;\r\n  plus(y: Numeric): WrappedDecimal;\r\n  add(y: Numeric): WrappedDecimal;\r\n  squareRoot(): WrappedDecimal;\r\n  sqrt(): WrappedDecimal;\r\n  times(y: Numeric): WrappedDecimal;\r\n  mul(y: Numeric): WrappedDecimal;\r\n  toWrappedDecimalPlaces(dp?: number, rm?: number): WrappedDecimal;\r\n  todp(dp?: number, rm?: number): WrappedDecimal;\r\n  toInteger(): WrappedDecimal;\r\n  toint(): WrappedDecimal;\r\n  toPower(y: Numeric): WrappedDecimal;\r\n  pow(y: Numeric): WrappedDecimal;\r\n  toSignificantDigits(sd?: number, rm?: number): WrappedDecimal;\r\n  tosd(sd?: number, rm?: number): WrappedDecimal;\r\n  toFormat(options: FormatOptions): string;\r\n  toFormat(fractionLength: number): string;\r\n  toFormat(fractionLength: number, options: FormatOptions): string;\r\n  toFormat(fractionLength: number, missionUnknown: number): string;\r\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\r\n}\r\n\r\nconst toFormat: {\r\n  (fn: BigConstructor): WrappedBigConstructor;\r\n  (fn: DecimalConstructor): WrappedDecimalConstructor;\r\n} = _toFarmat;\r\nexport default toFormat;\r\n","import _Big from \"big.js\";\r\nimport BN from \"bn.js\";\r\nimport _Decimal from \"decimal.js-light\";\r\n\r\nimport { BigNumberish } from \"../common/bignumber\";\r\nimport { createLogger } from \"../common/logger\";\r\n\r\nimport { parseBigNumberish, Rounding } from \"../common/constant\";\r\nimport toFormat, { WrappedBig } from \"./formatter\";\r\n\r\nconst logger = createLogger(\"module/fraction\");\r\n\r\nconst Big = toFormat(_Big);\r\ntype Big = WrappedBig;\r\n\r\nconst Decimal = toFormat(_Decimal);\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\r\n};\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: _Big.roundDown,\r\n  [Rounding.ROUND_HALF_UP]: _Big.roundHalfUp,\r\n  [Rounding.ROUND_UP]: _Big.roundUp,\r\n};\r\n\r\nexport class Fraction {\r\n  public readonly numerator: BN;\r\n  public readonly denominator: BN;\r\n\r\n  public constructor(numerator: BigNumberish, denominator: BigNumberish = new BN(1)) {\r\n    this.numerator = parseBigNumberish(numerator);\r\n    this.denominator = parseBigNumberish(denominator);\r\n  }\r\n\r\n  public get quotient(): BN {\r\n    return this.numerator.div(this.denominator);\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator);\r\n  }\r\n\r\n  public add(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    if (this.denominator.eq(otherParsed.denominator)) {\r\n      return new Fraction(this.numerator.add(otherParsed.numerator), this.denominator);\r\n    }\r\n\r\n    return new Fraction(\r\n      this.numerator.mul(otherParsed.denominator).add(otherParsed.numerator.mul(this.denominator)),\r\n      this.denominator.mul(otherParsed.denominator),\r\n    );\r\n  }\r\n\r\n  public sub(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    if (this.denominator.eq(otherParsed.denominator)) {\r\n      return new Fraction(this.numerator.sub(otherParsed.numerator), this.denominator);\r\n    }\r\n\r\n    return new Fraction(\r\n      this.numerator.mul(otherParsed.denominator).sub(otherParsed.numerator.mul(this.denominator)),\r\n      this.denominator.mul(otherParsed.denominator),\r\n    );\r\n  }\r\n\r\n  public mul(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    return new Fraction(this.numerator.mul(otherParsed.numerator), this.denominator.mul(otherParsed.denominator));\r\n  }\r\n\r\n  public div(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    return new Fraction(this.numerator.mul(otherParsed.denominator), this.denominator.mul(otherParsed.numerator));\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: \"\" },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\r\n  ): string {\r\n    if (!Number.isInteger(significantDigits)) logger.logWithError(`${significantDigits} is not an integer.`);\r\n    if (significantDigits <= 0) logger.logWithError(`${significantDigits} is not positive.`);\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] });\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits);\r\n    return quotient.toFormat(quotient.decimalPlaces(), format);\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: \"\" },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\r\n  ): string {\r\n    if (!Number.isInteger(decimalPlaces)) logger.logWithError(`${decimalPlaces} is not an integer.`);\r\n    if (decimalPlaces < 0) logger.logWithError(`${decimalPlaces} is negative.`);\r\n\r\n    Big.DP = decimalPlaces;\r\n    Big.RM = toFixedRounding[rounding] || 1;\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\r\n  }\r\n\r\n  public isZero(): boolean {\r\n    return this.numerator.isZero();\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport { BigNumberish } from \"./bignumber\";\r\nimport { createLogger } from \"./logger\";\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP,\r\n}\r\n\r\nconst MAX_SAFE = 0x1fffffffffffff;\r\n\r\nexport function parseBigNumberish(value: BigNumberish): BN {\r\n  const logger = createLogger(\"Raydium_parseBigNumberish\");\r\n  // BN\r\n  if (value instanceof BN) {\r\n    return value;\r\n  }\r\n\r\n  if (typeof value === \"string\") {\r\n    if (value.match(/^-?[0-9]+$/)) {\r\n      return new BN(value);\r\n    }\r\n    logger.logWithError(`invalid BigNumberish string: ${value}`);\r\n  }\r\n\r\n  if (typeof value === \"number\") {\r\n    if (value % 1) {\r\n      logger.logWithError(`BigNumberish number underflow: ${value}`);\r\n    }\r\n\r\n    if (value >= MAX_SAFE || value <= -MAX_SAFE) {\r\n      logger.logWithError(`BigNumberish number overflow: ${value}`);\r\n    }\r\n\r\n    return new BN(String(value));\r\n  }\r\n\r\n  if (typeof value === \"bigint\") {\r\n    return new BN(value.toString());\r\n  }\r\n  logger.error(`invalid BigNumberish value: ${value}`);\r\n  return new BN(0); // never reach, because logWithError will throw error\r\n}","import { PublicKey } from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { TokenInfo } from \"./type\";\r\n\r\nexport const SOL_INFO: TokenInfo = {\r\n  chainId: 101,\r\n  address: PublicKey.default.toBase58(),\r\n  programId: TOKEN_PROGRAM_ID.toBase58(),\r\n  decimals: 9,\r\n  symbol: \"SOL\",\r\n  name: \"solana\",\r\n  logoURI: `https://img-v1.raydium.io/icon/So11111111111111111111111111111111111111112.png`,\r\n  tags: [],\r\n  priority: 2,\r\n  type: \"raydium\",\r\n  extensions: {\r\n    coingeckoId: \"solana\",\r\n  },\r\n};\r\n\r\nexport const TOKEN_WSOL: TokenInfo = {\r\n  chainId: 101,\r\n  address: \"So11111111111111111111111111111111111111112\",\r\n  programId: TOKEN_PROGRAM_ID.toBase58(),\r\n  decimals: 9,\r\n  symbol: \"WSOL\",\r\n  name: \"Wrapped SOL\",\r\n  logoURI: `https://img-v1.raydium.io/icon/So11111111111111111111111111111111111111112.png`,\r\n  tags: [],\r\n  priority: 2,\r\n  type: \"raydium\",\r\n  extensions: {\r\n    coingeckoId: \"solana\",\r\n  },\r\n};\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { PublicKeyish, SOLMint, validateAndParsePublicKey } from \"../common/pubKey\";\r\nimport { TOKEN_WSOL } from \"../raydium/token/constant\";\r\n\r\n/**\r\n * A token is any fungible financial instrument on Solana, including SOL and all SPL tokens.\r\n */\r\nexport interface TokenProps {\r\n  mint: PublicKeyish;\r\n  decimals: number;\r\n  symbol?: string;\r\n  name?: string;\r\n  skipMint?: boolean;\r\n  isToken2022?: boolean;\r\n}\r\n\r\nexport class Token {\r\n  public readonly symbol?: string;\r\n  public readonly name?: string;\r\n  public readonly decimals: number;\r\n  public readonly isToken2022: boolean;\r\n\r\n  public readonly mint: PublicKey;\r\n  public static readonly WSOL: Token = new Token({\r\n    ...TOKEN_WSOL,\r\n    mint: TOKEN_WSOL.address,\r\n  });\r\n\r\n  /**\r\n   *\r\n   * @param mint - pass \"sol\" as mint will auto generate wsol token config\r\n   */\r\n  public constructor({ mint, decimals, symbol, name, skipMint = false, isToken2022 = false }: TokenProps) {\r\n    if (mint === SOLMint.toBase58() || (mint instanceof PublicKey && SOLMint.equals(mint))) {\r\n      this.decimals = TOKEN_WSOL.decimals;\r\n      this.symbol = TOKEN_WSOL.symbol;\r\n      this.name = TOKEN_WSOL.name;\r\n      this.mint = new PublicKey(TOKEN_WSOL.address);\r\n      this.isToken2022 = false;\r\n      return;\r\n    }\r\n\r\n    this.decimals = decimals;\r\n    this.symbol = symbol || mint.toString().substring(0, 6);\r\n    this.name = name || mint.toString().substring(0, 6);\r\n    this.mint = skipMint ? PublicKey.default : validateAndParsePublicKey({ publicKey: mint });\r\n    this.isToken2022 = isToken2022;\r\n  }\r\n\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true;\r\n    }\r\n    return this.mint.equals(other.mint);\r\n  }\r\n}\r\n","import { AccountMeta, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\ninterface AccountMetaProps {\r\n  pubkey: PublicKey;\r\n  isSigner?: boolean;\r\n  isWritable?: boolean;\r\n}\r\n\r\nexport function accountMeta({ pubkey, isSigner = false, isWritable = true }: AccountMetaProps): AccountMeta {\r\n  return {\r\n    pubkey,\r\n    isWritable,\r\n    isSigner,\r\n  };\r\n}\r\n\r\nexport const commonSystemAccountMeta = [\r\n  accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n  accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n  accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\r\n];\r\n\r\nexport type PublicKeyish = PublicKey | string;\r\n\r\nexport function validateAndParsePublicKey({\r\n  publicKey: orgPubKey,\r\n  transformSol,\r\n}: {\r\n  publicKey: PublicKeyish;\r\n  transformSol?: boolean;\r\n}): PublicKey {\r\n  const publicKey = tryParsePublicKey(orgPubKey.toString());\r\n\r\n  if (publicKey instanceof PublicKey) {\r\n    if (transformSol && publicKey.equals(SOLMint)) return WSOLMint;\r\n    return publicKey;\r\n  }\r\n\r\n  if (transformSol && publicKey.toString() === SOLMint.toBase58()) return WSOLMint;\r\n\r\n  if (typeof publicKey === \"string\") {\r\n    if (publicKey === PublicKey.default.toBase58()) return PublicKey.default;\r\n    try {\r\n      const key = new PublicKey(publicKey);\r\n      return key;\r\n    } catch {\r\n      throw new Error(\"invalid public key\");\r\n    }\r\n  }\r\n\r\n  throw new Error(\"invalid public key\");\r\n}\r\n\r\nexport function tryParsePublicKey(v: string): PublicKey | string {\r\n  try {\r\n    return new PublicKey(v);\r\n  } catch (e) {\r\n    return v;\r\n  }\r\n}\r\n\r\nexport const MEMO_PROGRAM_ID = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\r\nexport const MEMO_PROGRAM_ID2 = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\r\nexport const RENT_PROGRAM_ID = new PublicKey(\"SysvarRent111111111111111111111111111111111\");\r\nexport const CLOCK_PROGRAM_ID = new PublicKey(\"SysvarC1ock11111111111111111111111111111111\");\r\nexport const METADATA_PROGRAM_ID = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\r\nexport const INSTRUCTION_PROGRAM_ID = new PublicKey(\"Sysvar1nstructions1111111111111111111111111\");\r\nexport const SYSTEM_PROGRAM_ID = SystemProgram.programId;\r\n\r\nexport const RAYMint = new PublicKey(\"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\");\r\nexport const PAIMint = new PublicKey(\"Ea5SjE2Y6yvCeW5dYTn7PYMuW5ikXkvbGdcmSnXeaLjS\");\r\nexport const SRMMint = new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\");\r\nexport const USDCMint = new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\r\nexport const USDTMint = new PublicKey(\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\");\r\nexport const mSOLMint = new PublicKey(\"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\");\r\nexport const stSOLMint = new PublicKey(\"7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj\");\r\nexport const USDHMint = new PublicKey(\"USDH1SM1ojwWUga67PGrgFWUHibbjqMvuMaDkRJTgkX\");\r\nexport const NRVMint = new PublicKey(\"NRVwhjBQiUPYtfDT5zRBVJajzFQHaBUNtC7SNVvqRFa\");\r\nexport const ANAMint = new PublicKey(\"ANAxByE6G2WjFp7A4NqtWYXb3mgruyzZYg3spfxe6Lbo\");\r\nexport const ETHMint = new PublicKey(\"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\");\r\nexport const WSOLMint = new PublicKey(\"So11111111111111111111111111111111111111112\");\r\nexport const SOLMint = PublicKey.default;\r\n\r\nexport function solToWSol(mint: PublicKeyish): PublicKey {\r\n  return validateAndParsePublicKey({ publicKey: mint, transformSol: true });\r\n}\r\n","import { SOL_INFO } from \"../raydium/token/constant\";\r\n\r\nimport { Token } from \"./token\";\r\n\r\ninterface CurrencyProps {\r\n  decimals: number;\r\n  symbol?: string;\r\n  name?: string;\r\n}\r\n/**\r\n * A currency is any fungible financial instrument on Solana, including SOL and all SPL tokens.\r\n * The only instance of the base class `Currency` is SOL.\r\n */\r\nexport class Currency {\r\n  public readonly symbol?: string;\r\n  public readonly name?: string;\r\n  public readonly decimals: number;\r\n\r\n  /**\r\n   * The only instance of the base class `Currency`.\r\n   */\r\n  public static readonly SOL: Currency = new Currency(SOL_INFO);\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.SOL`.\r\n   * @param decimals - decimals of the currency\r\n   * @param symbol - symbol of the currency\r\n   * @param name - name of the currency\r\n   */\r\n  public constructor({ decimals, symbol = \"UNKNOWN\", name = \"UNKNOWN\" }: CurrencyProps) {\r\n    this.decimals = decimals;\r\n    this.symbol = symbol;\r\n    this.name = name;\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return this === other;\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB);\r\n  } else if (currencyA instanceof Token || currencyB instanceof Token) {\r\n    return false;\r\n  } else {\r\n    return currencyA === currencyB;\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport { Rounding } from \"../common\";\r\nimport { Fraction } from \"./fraction\";\r\n\r\nexport const _100_PERCENT = new Fraction(new BN(100));\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits = 5, format?: object, rounding?: Rounding): string {\r\n    return this.mul(_100_PERCENT).toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  public toFixed(decimalPlaces = 2, format?: object, rounding?: Rounding): string {\r\n    return this.mul(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\r\n  }\r\n}\r\n","import { Rounding } from \"../common\";\r\nimport { BigNumberish, tenExponential } from \"../common/bignumber\";\r\nimport { createLogger } from \"../common/logger\";\r\n\r\nimport { Fraction } from \"./fraction\";\r\nimport { Token } from \"./token\";\r\n\r\nconst logger = createLogger(\"Raydium_price\");\r\n\r\ninterface PriceProps {\r\n  baseToken: Token;\r\n  denominator: BigNumberish;\r\n  quoteToken: Token;\r\n  numerator: BigNumberish;\r\n}\r\n\r\nexport class Price extends Fraction {\r\n  public readonly baseToken: Token; // input i.e. denominator\r\n  public readonly quoteToken: Token; // output i.e. numerator\r\n  // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n  public readonly scalar: Fraction;\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(params: PriceProps) {\r\n    const { baseToken, quoteToken, numerator, denominator } = params;\r\n    super(numerator, denominator);\r\n\r\n    this.baseToken = baseToken;\r\n    this.quoteToken = quoteToken;\r\n    this.scalar = new Fraction(tenExponential(baseToken.decimals), tenExponential(quoteToken.decimals));\r\n  }\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator);\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.mul(this.scalar);\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price({\r\n      baseToken: this.quoteToken,\r\n      quoteToken: this.baseToken,\r\n      denominator: this.numerator,\r\n      numerator: this.denominator,\r\n    });\r\n  }\r\n\r\n  public mul(other: Price): Price {\r\n    if (this.quoteToken !== other.baseToken) logger.logWithError(\"mul token not equals\");\r\n\r\n    const fraction = super.mul(other);\r\n    return new Price({\r\n      baseToken: this.baseToken,\r\n      quoteToken: other.quoteToken,\r\n      denominator: fraction.denominator,\r\n      numerator: fraction.numerator,\r\n    });\r\n  }\r\n\r\n  public toSignificant(significantDigits = this.quoteToken.decimals, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  public toFixed(decimalPlaces = this.quoteToken.decimals, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport { Fraction, Percent, Price, Token, TokenAmount } from \"../module\";\r\nimport { ReplaceType } from \"../raydium/type\";\r\n\r\nimport { tryParsePublicKey } from \"./pubKey\";\r\n\r\nexport async function sleep(ms: number): Promise<void> {\r\n  new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function getTimestamp(): number {\r\n  return new Date().getTime();\r\n}\r\n\r\nexport function notInnerObject(v: unknown): v is Record<string, any> {\r\n  return (\r\n    typeof v === \"object\" &&\r\n    v !== null &&\r\n    ![Token, TokenAmount, PublicKey, Fraction, BN, Price, Percent].some((o) => typeof o === \"object\" && v instanceof o)\r\n  );\r\n}\r\n\r\nexport function jsonInfo2PoolKeys<T>(jsonInfo: T): ReplaceType<T, string, PublicKey> {\r\n  // @ts-expect-error no need type for inner code\r\n  return typeof jsonInfo === \"string\"\r\n    ? tryParsePublicKey(jsonInfo)\r\n    : Array.isArray(jsonInfo)\r\n    ? jsonInfo.map((k) => jsonInfo2PoolKeys(k))\r\n    : notInnerObject(jsonInfo)\r\n    ? Object.fromEntries(Object.entries(jsonInfo).map(([k, v]) => [k, jsonInfo2PoolKeys(v)]))\r\n    : jsonInfo;\r\n}\r\n","/**\r\n * https://youmightnotneed.com/lodash/\r\n */\r\n\r\nexport function chunkArray<T>(arr: T[], chunkSize = 1, cache: T[][] = []): T[][] {\r\n  const tmp = [...arr];\r\n  if (chunkSize <= 0) return cache;\r\n  while (tmp.length) cache.push(tmp.splice(0, chunkSize));\r\n  return cache;\r\n}\r\n\r\nexport function intersection<T>(arr: T[], ...args: T[][]): T[] {\r\n  return arr.filter((item) => args.every((arr) => arr.includes(item)));\r\n}\r\n\r\nexport function xor<T>(arr: T[], ...args: T[][]): T[] {\r\n  return arr.filter((item) => args.every((arr) => !arr.includes(item)));\r\n}\r\n\r\nexport function uniq<T>(arr: T[]): T[] {\r\n  return [...new Set(arr)];\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { findProgramAddress } from \"./txTool/txUtils\";\r\n\r\nexport function getATAAddress(\r\n  owner: PublicKey,\r\n  mint: PublicKey,\r\n  programId?: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress(\r\n    [owner.toBuffer(), (programId ?? TOKEN_PROGRAM_ID).toBuffer(), mint.toBuffer()],\r\n    new PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"),\r\n  );\r\n}\r\n","import {\r\n  Commitment,\r\n  ComputeBudgetProgram,\r\n  Connection,\r\n  EpochInfo,\r\n  Keypair,\r\n  PublicKey,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionMessage,\r\n  VersionedTransaction,\r\n} from \"@solana/web3.js\";\r\n\r\nimport { createLogger } from \"../logger\";\r\nimport { CacheLTA } from \"./lookupTable\";\r\nimport { InstructionType } from \"./txType\";\r\n\r\nimport { ComputeBudgetConfig } from \"../../raydium/type\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\nconst logger = createLogger(\"Raydium_txUtil\");\r\n\r\nexport const MAX_BASE64_SIZE = 1644;\r\n\r\nexport function addComputeBudget(config: ComputeBudgetConfig): {\r\n  instructions: TransactionInstruction[];\r\n  instructionTypes: string[];\r\n} {\r\n  const ins: TransactionInstruction[] = [];\r\n  const insTypes: string[] = [];\r\n  if (config.microLamports) {\r\n    ins.push(ComputeBudgetProgram.setComputeUnitPrice({ microLamports: config.microLamports }));\r\n    insTypes.push(InstructionType.SetComputeUnitPrice);\r\n  }\r\n  if (config.units) {\r\n    ins.push(ComputeBudgetProgram.setComputeUnitLimit({ units: config.units }));\r\n    insTypes.push(InstructionType.SetComputeUnitLimit);\r\n  }\r\n\r\n  return {\r\n    instructions: ins,\r\n    instructionTypes: insTypes,\r\n  };\r\n}\r\n\r\nexport async function getRecentBlockHash(connection: Connection, propsCommitment?: Commitment): Promise<string> {\r\n  const commitment = propsCommitment ?? \"confirmed\";\r\n  return (await connection.getLatestBlockhash?.({ commitment }))?.blockhash;\r\n}\r\n\r\nexport async function confirmTransaction(connection: Connection, txId: string): Promise<string> {\r\n  connection.getSignatureStatuses([txId]);\r\n  return new Promise((resolve, reject) => {\r\n    const id = setTimeout(reject, 60 * 1000);\r\n    connection.onSignature(\r\n      txId,\r\n      (signatureResult) => {\r\n        clearTimeout(id);\r\n        if (!signatureResult.err) {\r\n          resolve(\"\");\r\n          return;\r\n        }\r\n        reject(Object.assign(signatureResult.err, { txId }));\r\n      },\r\n      \"confirmed\",\r\n    );\r\n  });\r\n}\r\n\r\n/**\r\n * Forecast transaction size\r\n */\r\nexport function forecastTransactionSize(instructions: TransactionInstruction[], signers: PublicKey[]): boolean {\r\n  if (instructions.length < 1) logger.logWithError(`no instructions provided: ${instructions.toString()}`);\r\n  if (signers.length < 1) logger.logWithError(`no signers provided:, ${signers.toString()}`);\r\n\r\n  const transaction = new Transaction();\r\n  transaction.recentBlockhash = \"11111111111111111111111111111111\";\r\n  transaction.feePayer = signers[0];\r\n  transaction.add(...instructions);\r\n\r\n  try {\r\n    return Buffer.from(transaction.serialize({ verifySignatures: false })).toString(\"base64\").length < MAX_BASE64_SIZE;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Simulates multiple instruction\r\n */\r\n/**\r\n * Simulates multiple instruction\r\n */\r\nexport async function simulateMultipleInstruction(\r\n  connection: Connection,\r\n  instructions: TransactionInstruction[],\r\n  keyword: string,\r\n  batchRequest = true,\r\n): Promise<string[]> {\r\n  const feePayer = new PublicKey(\"RaydiumSimuLateTransaction11111111111111111\");\r\n\r\n  const transactions: Transaction[] = [];\r\n\r\n  let transaction = new Transaction();\r\n  transaction.feePayer = feePayer;\r\n\r\n  for (const instruction of instructions) {\r\n    if (!forecastTransactionSize([...transaction.instructions, instruction], [feePayer])) {\r\n      transactions.push(transaction);\r\n      transaction = new Transaction();\r\n      transaction.feePayer = feePayer;\r\n    }\r\n    transaction.add(instruction);\r\n  }\r\n  if (transaction.instructions.length > 0) {\r\n    transactions.push(transaction);\r\n  }\r\n\r\n  let results: SimulatedTransactionResponse[] = [];\r\n\r\n  try {\r\n    results = await simulateTransaction(connection, transactions, batchRequest);\r\n    if (results.find((i) => i.err !== null)) throw Error(\"rpc simulateTransaction error\");\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      logger.logWithError(\"failed to simulate for instructions\", \"RPC_ERROR\", {\r\n        message: error.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  const logs: string[] = [];\r\n  for (const result of results) {\r\n    logger.debug(\"simulate result:\", result);\r\n\r\n    if (result.logs) {\r\n      const filteredLog = result.logs.filter((log) => log && log.includes(keyword));\r\n      logger.debug(\"filteredLog:\", logs);\r\n      if (!filteredLog.length) logger.logWithError(\"simulate log not match keyword\", \"keyword\", keyword);\r\n      logs.push(...filteredLog);\r\n    }\r\n  }\r\n\r\n  return logs;\r\n}\r\n\r\nexport function parseSimulateLogToJson(log: string, keyword: string): any {\r\n  const results = log.match(/{[\"\\w:,]+}/g);\r\n  if (!results || results.length !== 1) {\r\n    return logger.logWithError(`simulate log fail to match json, keyword: ${keyword}`);\r\n  }\r\n\r\n  return results[0];\r\n}\r\n\r\nexport function parseSimulateValue(log: string, key: string): any {\r\n  const reg = new RegExp(`\"${key}\":(\\\\d+)`, \"g\");\r\n\r\n  const results = reg.exec(log);\r\n  if (!results || results.length !== 2) {\r\n    return logger.logWithError(`simulate log fail to match key\", key: ${key}`);\r\n  }\r\n\r\n  return results[1];\r\n}\r\n\r\nexport interface ProgramAddress {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n}\r\nexport function findProgramAddress(\r\n  seeds: Array<Buffer | Uint8Array>,\r\n  programId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  const [publicKey, nonce] = PublicKey.findProgramAddressSync(seeds, programId);\r\n  return { publicKey, nonce };\r\n}\r\n\r\nexport async function simulateTransaction(\r\n  connection: Connection,\r\n  transactions: Transaction[],\r\n  batchRequest?: boolean,\r\n): Promise<any[]> {\r\n  let results: any[] = [];\r\n  if (batchRequest) {\r\n    const getLatestBlockhash = await connection.getLatestBlockhash();\r\n\r\n    const encodedTransactions: string[] = [];\r\n    for (const transaction of transactions) {\r\n      transaction.recentBlockhash = getLatestBlockhash.blockhash;\r\n      transaction.lastValidBlockHeight = getLatestBlockhash.lastValidBlockHeight;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      const message = transaction._compile();\r\n      const signData = message.serialize();\r\n\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      const wireTransaction = transaction._serialize(signData);\r\n      const encodedTransaction = wireTransaction.toString(\"base64\");\r\n\r\n      encodedTransactions.push(encodedTransaction);\r\n    }\r\n\r\n    const batch = encodedTransactions.map((keys) => {\r\n      const args = connection._buildArgs([keys], undefined, \"base64\");\r\n      return {\r\n        methodName: \"simulateTransaction\",\r\n        args,\r\n      };\r\n    });\r\n\r\n    const reqData: { methodName: string; args: any[] }[][] = [];\r\n    const itemReqIndex = 20;\r\n    for (let i = 0; i < Math.ceil(batch.length / itemReqIndex); i++) {\r\n      reqData.push(batch.slice(i * itemReqIndex, (i + 1) * itemReqIndex));\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    results = await (\r\n      await Promise.all(\r\n        reqData.map(async (i) => (await (connection as any)._rpcBatchRequest(i)).map((ii) => ii.result.value)),\r\n      )\r\n    ).flat();\r\n  } else {\r\n    try {\r\n      results = await Promise.all(\r\n        transactions.map(async (transaction) => await (await connection.simulateTransaction(transaction)).value),\r\n      );\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        logger.logWithError(\"failed to get info for multiple accounts\", \"RPC_ERROR\", {\r\n          message: error.message,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return results;\r\n}\r\n\r\nexport function checkLegacyTxSize({\r\n  instructions,\r\n  payer,\r\n  signers,\r\n}: {\r\n  instructions: TransactionInstruction[];\r\n  payer: PublicKey;\r\n  signers: PublicKey[];\r\n}): boolean {\r\n  return forecastTransactionSize(instructions, [payer, ...signers]);\r\n}\r\n\r\nexport function checkV0TxSize({\r\n  instructions,\r\n  payer,\r\n  lookupTableAddressAccount,\r\n  recentBlockhash = Keypair.generate().publicKey.toString(),\r\n}: {\r\n  instructions: TransactionInstruction[];\r\n  payer: PublicKey;\r\n  lookupTableAddressAccount?: CacheLTA;\r\n  recentBlockhash?: string;\r\n}): boolean {\r\n  const transactionMessage = new TransactionMessage({\r\n    payerKey: payer,\r\n    recentBlockhash,\r\n    instructions,\r\n  });\r\n\r\n  const messageV0 = transactionMessage.compileToV0Message(Object.values(lookupTableAddressAccount ?? {}));\r\n  try {\r\n    const buildLength = Buffer.from(new VersionedTransaction(messageV0).serialize()).toString(\"base64\").length;\r\n    return buildLength < MAX_BASE64_SIZE;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nlet epochInfoCache: { time: number; data?: EpochInfo } = {\r\n  time: 0,\r\n  data: undefined,\r\n};\r\n\r\nexport async function getEpochInfo(connection: Connection): Promise<EpochInfo> {\r\n  if (!epochInfoCache.data || (Date.now() - epochInfoCache.time) / 1000 > 30) {\r\n    const data = await connection.getEpochInfo();\r\n    epochInfoCache = {\r\n      time: Date.now(),\r\n      data,\r\n    };\r\n    return data;\r\n  } else {\r\n    return epochInfoCache.data;\r\n  }\r\n}\r\n\r\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\r\n  if (Buffer.isBuffer(arr)) {\r\n    return arr;\r\n  } else if (arr instanceof Uint8Array) {\r\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\r\n  } else {\r\n    return Buffer.from(arr);\r\n  }\r\n};\r\n\r\nexport const txToBase64 = (transaction: Transaction | VersionedTransaction): string => {\r\n  let serialized = transaction.serialize({ requireAllSignatures: false, verifySignatures: false });\r\n  if (transaction instanceof VersionedTransaction) serialized = toBuffer(serialized);\r\n  try {\r\n    return serialized instanceof Buffer ? serialized.toString(\"base64\") : Buffer.from(serialized).toString(\"base64\");\r\n  } catch {\r\n    return serialized.toString(\"base64\");\r\n  }\r\n};\r\n\r\nexport function printSimulate(transactions: Transaction[] | VersionedTransaction[]): string[] {\r\n  const allBase64: string[] = [];\r\n  transactions.forEach((transaction) => {\r\n    if (transaction instanceof Transaction) {\r\n      if (!transaction.recentBlockhash) transaction.recentBlockhash = TOKEN_PROGRAM_ID.toBase58();\r\n      if (!transaction.feePayer) transaction.feePayer = Keypair.generate().publicKey;\r\n    }\r\n    allBase64.push(txToBase64(transaction));\r\n  });\r\n  console.log(\"simulate tx string:\", allBase64);\r\n\r\n  return allBase64;\r\n}\r\n\r\nexport function transformTxToBase64(tx: Transaction | VersionedTransaction): string {\r\n  let serialized = tx.serialize({ requireAllSignatures: false, verifySignatures: false });\r\n  if (tx instanceof VersionedTransaction) serialized = toBuffer(serialized);\r\n  return serialized.toString(\"base64\");\r\n}\r\n","export enum TxVersion {\r\n  \"V0\",\r\n  \"LEGACY\",\r\n}\r\n\r\nexport const InstructionType = {\r\n  CreateAccount: \"CreateAccount\",\r\n  InitAccount: \"InitAccount\",\r\n  CreateATA: \"CreateATA\",\r\n  CloseAccount: \"CloseAccount\",\r\n  TransferAmount: \"TransferAmount\",\r\n  InitMint: \"InitMint\",\r\n  MintTo: \"MintTo\",\r\n\r\n  InitMarket: \"InitMarket\", // create market main ins\r\n  Util1216OwnerClaim: \"Util1216OwnerClaim\", // owner claim token ins\r\n\r\n  SetComputeUnitPrice: \"SetComputeUnitPrice\",\r\n  SetComputeUnitLimit: \"SetComputeUnitLimit\",\r\n\r\n  // CLMM\r\n  ClmmCreatePool: \"ClmmCreatePool\",\r\n  ClmmOpenPosition: \"ClmmOpenPosition\",\r\n  ClmmIncreasePosition: \"ClmmIncreasePosition\",\r\n  ClmmDecreasePosition: \"ClmmDecreasePosition\",\r\n  ClmmClosePosition: \"ClmmClosePosition\",\r\n  ClmmSwapBaseIn: \"ClmmSwapBaseIn\",\r\n  ClmmSwapBaseOut: \"ClmmSwapBaseOut\",\r\n  ClmmInitReward: \"ClmmInitReward\",\r\n  ClmmSetReward: \"ClmmSetReward\",\r\n  ClmmCollectReward: \"ClmmCollectReward\",\r\n  ClmmLockPosition: \"ClmmLockPosition\",\r\n  ClmmHarvestLockPosition: \"ClmmHarvestLockPosition\",\r\n\r\n  AmmV4Swap: \"AmmV4Swap\",\r\n  AmmV4AddLiquidity: \"AmmV4AddLiquidity\",\r\n  AmmV4RemoveLiquidity: \"AmmV4RemoveLiquidity\",\r\n  AmmV4SimulatePoolInfo: \"AmmV4SimulatePoolInfo\",\r\n  AmmV4SwapBaseIn: \"AmmV4SwapBaseIn\",\r\n  AmmV4SwapBaseOut: \"AmmV4SwapBaseOut\",\r\n  AmmV4CreatePool: \"AmmV4CreatePool\",\r\n  AmmV4InitPool: \"AmmV4InitPool\",\r\n\r\n  AmmV5AddLiquidity: \"AmmV5AddLiquidity\",\r\n  AmmV5RemoveLiquidity: \"AmmV5RemoveLiquidity\",\r\n  AmmV5SimulatePoolInfo: \"AmmV5SimulatePoolInfo\",\r\n  AmmV5SwapBaseIn: \"AmmV5SwapBaseIn\",\r\n  AmmV5SwapBaseOut: \"AmmV5SwapBaseOut\",\r\n\r\n  RouteSwap: \"RouteSwap\",\r\n  RouteSwap1: \"RouteSwap1\",\r\n  RouteSwap2: \"RouteSwap2\",\r\n\r\n  FarmV3Deposit: \"FarmV3Deposit\",\r\n  FarmV3Withdraw: \"FarmV3Withdraw\",\r\n  FarmV3CreateLedger: \"FarmV3CreateLedger\",\r\n\r\n  FarmV4Withdraw: \"FarmV4Withdraw\",\r\n\r\n  FarmV5Deposit: \"FarmV5Deposit\",\r\n  FarmV5Withdraw: \"FarmV5Withdraw\",\r\n  FarmV5CreateLedger: \"FarmV5CreateLedger\",\r\n\r\n  FarmV6Deposit: \"FarmV6Deposit\",\r\n  FarmV6Withdraw: \"FarmV6Withdraw\",\r\n  FarmV6Create: \"FarmV6Create\",\r\n  FarmV6Restart: \"FarmV6Restart\",\r\n  FarmV6CreatorAddReward: \"FarmV6CreatorAddReward\",\r\n  FarmV6CreatorWithdraw: \"FarmV6CreatorWithdraw\",\r\n\r\n  CpmmCreatePool: \"CpmmCreatePool\",\r\n  CpmmAddLiquidity: \"CpmmAddLiquidity\",\r\n  CpmmWithdrawLiquidity: \"CpmmWithdrawLiquidity\",\r\n  CpmmSwapBaseIn: \"CpmmSwapBaseIn\",\r\n  CpmmSwapBaseOut: \"CpmmSwapBaseOut\",\r\n\r\n  CpmmLockLp: \"CpmmLockLp\",\r\n  CpmmCollectLockFee: \"CpmmCollectLockFee\",\r\n  TransferTip: \"TransferTip\",\r\n};\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\n// raydium\r\nexport const FARM_PROGRAM_ID_V3 = new PublicKey(\"EhhTKczWMGQt46ynNeRX1WfeagwwJd7ufHvCDjRxjo5Q\");\r\n// temp fusion\r\nexport const FARM_PROGRAM_ID_V4 = new PublicKey(\"CBuCnLe26faBpcBP2fktp4rp8abpcAnTWft6ZrP5Q4T\");\r\n// \"fusion\"\r\nexport const FARM_PROGRAM_ID_V5 = new PublicKey(\"9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z\");\r\n// echosystem\r\nexport const FARM_PROGRAM_ID_V6 = new PublicKey(\"FarmqiPv5eAj3j1GMdMCMUGXqPUvmquZtMy86QH6rzhG\");\r\n\r\nexport const UTIL1216 = new PublicKey(\"CLaimxFqjHzgTJtAGHU47NPhg6qrc5sCnpC4tBLyABQS\");\r\n\r\nexport const OPEN_BOOK_PROGRAM = new PublicKey(\"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\");\r\nexport const SERUM_PROGRAM_ID_V3 = new PublicKey(\"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\");\r\n\r\nexport const AMM_V4 = new PublicKey(\"675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8\");\r\nexport const AMM_STABLE = new PublicKey(\"5quBtoiQqxF9Jv6KYKctB59NT3gtJD2Y65kdnB1Uev3h\");\r\nexport const LIQUIDITY_POOL_PROGRAM_ID_V5_MODEL = new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\");\r\nexport const CLMM_PROGRAM_ID = new PublicKey(\"CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK\");\r\nexport const CLMM_LOCK_PROGRAM_ID = new PublicKey(\"LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE\");\r\nexport const CLMM_LOCK_AUTH_ID = new PublicKey(\"kN1kEznaF5Xbd8LYuqtEFcxzWSBk5Fv6ygX6SqEGJVy\");\r\n\r\nexport const Router = new PublicKey(\"routeUGWgWzqBWFcrCfv8tritsqukccJPu3q5GPP3xS\");\r\nexport const FEE_DESTINATION_ID = new PublicKey(\"7YttLkHDoNj9wyDur5pM1ejNaAvT9X4eqaYcHQqtj2G5\");\r\n\r\nexport const IDO_PROGRAM_ID_V1 = new PublicKey(\"6FJon3QE27qgPVggARueB22hLvoh22VzJpXv4rBEoSLF\");\r\nexport const IDO_PROGRAM_ID_V2 = new PublicKey(\"CC12se5To1CdEuw7fDS27B7Geo5jJyL7t5UK2B44NgiH\");\r\nexport const IDO_PROGRAM_ID_V3 = new PublicKey(\"9HzJyW1qZsEiSfMUf6L2jo3CcTKAyBmSyKdwQeYisHrC\");\r\nexport const IDO_PROGRAM_ID_V4 = new PublicKey(\"DropEU8AvevN3UrXWXTMuz3rqnMczQVNjq3kcSdW2SQi\");\r\n\r\nexport const CREATE_CPMM_POOL_PROGRAM = new PublicKey(\"CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C\");\r\nexport const CREATE_CPMM_POOL_AUTH = new PublicKey(\"GpMZbSM2GgvTKHJirzeGfMFoaZ8UR2X7F4v8vHTvxFbL\");\r\nexport const CREATE_CPMM_POOL_FEE_ACC = new PublicKey(\"DNXgeM9EiiaAbaWvwjHj9fQQLAX5ZsfHyvmYUNRAdNC8\");\r\n\r\nexport const DEV_CREATE_CPMM_POOL_PROGRAM = new PublicKey(\"CPMDWBwJDtYax9qW7AyRuVC19Cc4L4Vcy4n2BHAbHkCW\");\r\nexport const DEV_CREATE_CPMM_POOL_AUTH = new PublicKey(\"7rQ1QFNosMkUCuh7Z7fPbTHvh73b68sQYdirycEzJVuw\");\r\nexport const DEV_CREATE_CPMM_POOL_FEE_ACC = new PublicKey(\"G11FKBRaAkHAKuLCgLM6K6NUc9rTjPAznRCjZifrTQe2\");\r\n\r\nexport const LOCK_CPMM_PROGRAM = new PublicKey(\"LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE\");\r\nexport const DEV_LOCK_CPMM_PROGRAM = new PublicKey(\"DLockwT7X7sxtLmGH9g5kmfcjaBtncdbUmi738m5bvQC\");\r\n\r\nexport const LOCK_CPMM_AUTH = new PublicKey(\"3f7GcQFG397GAaEnv51zR6tsTVihYRydnydDD1cXekxH\");\r\nexport const DEV_LOCK_CPMM_AUTH = new PublicKey(\"7AFUeLVRjBfzqK3tTGw8hN48KLQWSk6DTE8xprWdPqix\");\r\n\r\nexport const LAUNCHPAD_PROGRAM = new PublicKey(\"LanMV9sAd7wArD4vJFi2qDdfnVhFxYSUg6eADduJ3uj\");\r\nexport const LAUNCHPAD_AUTH = new PublicKey(\"WLHv2UAZm6z4KyaaELi5pjdbJh6RESMva1Rnn8pJVVh\");\r\n\r\nexport const DEV_LAUNCHPAD_PROGRAM = new PublicKey(\"LanD8FpTBBvzZFXjTxsAoipkFsxPUCDB4qAqKxYDiNP\");\r\nexport const DEV_LAUNCHPAD_AUTH = new PublicKey(\"HYNHiyKJ3gGVFvyxJAurK7qr7P2o5J9THmvCGMdULtpW\");\r\n\r\nexport const IDO_ALL_PROGRAM = {\r\n  IDO_PROGRAM_ID_V1,\r\n  IDO_PROGRAM_ID_V2,\r\n  IDO_PROGRAM_ID_V3,\r\n  IDO_PROGRAM_ID_V4,\r\n};\r\n\r\nexport const ALL_PROGRAM_ID = {\r\n  AMM_V4,\r\n  AMM_STABLE,\r\n\r\n  CLMM_PROGRAM_ID,\r\n  CLMM_LOCK_PROGRAM_ID,\r\n  CLMM_LOCK_AUTH_ID,\r\n\r\n  FARM_PROGRAM_ID_V3,\r\n  FARM_PROGRAM_ID_V5,\r\n  FARM_PROGRAM_ID_V6,\r\n\r\n  OPEN_BOOK_PROGRAM,\r\n  SERUM_PROGRAM_ID_V3,\r\n\r\n  UTIL1216,\r\n\r\n  Router,\r\n\r\n  CREATE_CPMM_POOL_PROGRAM,\r\n  CREATE_CPMM_POOL_AUTH,\r\n  CREATE_CPMM_POOL_FEE_ACC,\r\n\r\n  LOCK_CPMM_PROGRAM,\r\n  LOCK_CPMM_AUTH,\r\n\r\n  LAUNCHPAD_PROGRAM,\r\n  LAUNCHPAD_AUTH,\r\n\r\n  FEE_DESTINATION_ID,\r\n};\r\n\r\nexport type ProgramIdConfig = Partial<typeof ALL_PROGRAM_ID>;\r\n\r\nexport const DEVNET_PROGRAM_ID = {\r\n  AMM_V4: new PublicKey(\"HWy1jotHpo6UqeQxx49dpYYdQB8wj9Qk9MdxwjLvDHB8\"),\r\n  AMM_STABLE: new PublicKey(\"DDg4VmQaJV9ogWce7LpcjBA9bv22wRp5uaTPa5pGjijF\"),\r\n\r\n  CLMM_PROGRAM_ID: new PublicKey(\"devi51mZmdwUJGU9hjN27vEz64Gps7uUefqxg27EAtH\"),\r\n  CLMM_LOCK_PROGRAM_ID: new PublicKey(\"DLockwT7X7sxtLmGH9g5kmfcjaBtncdbUmi738m5bvQC\"),\r\n  CLMM_LOCK_AUTH_ID: new PublicKey(\"8qmHNvu2Kr2C7U8mJL4Vz1vTDxMhVuXKREwU7TNoaVEo\"),\r\n\r\n  FARM_PROGRAM_ID_V3: new PublicKey(\"85BFyr98MbCUU9MVTEgzx1nbhWACbJqLzho6zd6DZcWL\"),\r\n  FARM_PROGRAM_ID_V5: new PublicKey(\"EcLzTrNg9V7qhcdyXDe2qjtPkiGzDM2UbdRaeaadU5r2\"),\r\n  FARM_PROGRAM_ID_V6: new PublicKey(\"Farm2hJLcqPtPg8M4rR6DMrsRNc5TPm5Cs4bVQrMe2T7\"),\r\n\r\n  OPEN_BOOK_PROGRAM: new PublicKey(\"EoTcMgcDRTJVZDMZWBoU6rhYHZfkNTVEAfz3uUJRcYGj\"),\r\n  SERUM_PROGRAM_ID_V3: PublicKey.default,\r\n\r\n  UTIL1216: PublicKey.default,\r\n\r\n  Router: new PublicKey(\"BVChZ3XFEwTMUk1o9i3HAf91H6mFxSwa5X2wFAWhYPhU\"),\r\n\r\n  CREATE_CPMM_POOL_PROGRAM: DEV_CREATE_CPMM_POOL_PROGRAM,\r\n  CREATE_CPMM_POOL_AUTH: DEV_CREATE_CPMM_POOL_AUTH,\r\n  CREATE_CPMM_POOL_FEE_ACC: DEV_CREATE_CPMM_POOL_FEE_ACC,\r\n\r\n  LOCK_CPMM_PROGRAM: DEV_LOCK_CPMM_PROGRAM,\r\n  LOCK_CPMM_AUTH: DEV_LOCK_CPMM_AUTH,\r\n\r\n  LAUNCHPAD_PROGRAM: DEV_LAUNCHPAD_PROGRAM,\r\n  LAUNCHPAD_AUTH: DEV_LAUNCHPAD_AUTH,\r\n\r\n  FEE_DESTINATION_ID: new PublicKey(\"3XMrhbv989VxAMi3DErLV9eJht1pHppW5LbKxe9fkEFR\"),\r\n};\r\n","import { EpochInfo } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { TransferFee, TransferFeeConfig } from \"@solana/spl-token\";\r\n\r\nimport { TransferFeeDataBaseType } from \"../api/type\";\r\nimport { GetTransferAmountFee } from \"../raydium/type\";\r\n\r\nconst POINT = 10_000;\r\nexport function getTransferAmountFee(\r\n  amount: BN,\r\n  feeConfig: TransferFeeConfig | undefined,\r\n  epochInfo: EpochInfo,\r\n  addFee: boolean,\r\n): GetTransferAmountFee {\r\n  if (feeConfig === undefined) {\r\n    return {\r\n      amount,\r\n      fee: undefined,\r\n      expirationTime: undefined,\r\n    };\r\n  }\r\n\r\n  const nowFeeConfig: TransferFee =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\r\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n  const expirationTime: number | undefined =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch\r\n      ? ((Number(feeConfig.newerTransferFee.epoch) * epochInfo.slotsInEpoch - epochInfo.absoluteSlot) * 400) / 1000\r\n      : undefined;\r\n\r\n  if (addFee) {\r\n    if (nowFeeConfig.transferFeeBasisPoints === POINT) {\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      return {\r\n        amount: amount.add(nowMaxFee),\r\n        fee: nowMaxFee,\r\n        expirationTime,\r\n      };\r\n    } else {\r\n      const _TAmount = BNDivCeil(amount.mul(new BN(POINT)), new BN(POINT - nowFeeConfig.transferFeeBasisPoints));\r\n\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      const TAmount = _TAmount.sub(amount).gt(nowMaxFee) ? amount.add(nowMaxFee) : _TAmount;\r\n\r\n      const _fee = BNDivCeil(TAmount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n      const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n      return {\r\n        amount: TAmount,\r\n        fee,\r\n        expirationTime,\r\n      };\r\n    }\r\n  } else {\r\n    const _fee = BNDivCeil(amount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n    const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n\r\n    return {\r\n      amount,\r\n      fee,\r\n      expirationTime,\r\n    };\r\n  }\r\n}\r\n\r\nexport function getTransferAmountFeeV2(\r\n  amount: BN,\r\n  _feeConfig: TransferFeeDataBaseType | undefined,\r\n  epochInfo: EpochInfo,\r\n  addFee: boolean,\r\n): GetTransferAmountFee {\r\n  if (_feeConfig === undefined) {\r\n    return {\r\n      amount,\r\n      fee: undefined,\r\n      expirationTime: undefined,\r\n    };\r\n  }\r\n  const feeConfig = {\r\n    ..._feeConfig,\r\n    olderTransferFee: {\r\n      epoch: BigInt(_feeConfig.olderTransferFee.epoch),\r\n      maximumFee: BigInt(_feeConfig.olderTransferFee.maximumFee),\r\n      transferFeeBasisPoints: _feeConfig.olderTransferFee.transferFeeBasisPoints,\r\n    },\r\n    newerTransferFee: {\r\n      epoch: BigInt(_feeConfig.newerTransferFee.epoch),\r\n      maximumFee: BigInt(_feeConfig.newerTransferFee.maximumFee),\r\n      transferFeeBasisPoints: _feeConfig.newerTransferFee.transferFeeBasisPoints,\r\n    },\r\n  };\r\n\r\n  const nowFeeConfig: TransferFee =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\r\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n  const expirationTime: number | undefined =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch\r\n      ? ((Number(feeConfig.newerTransferFee.epoch) * epochInfo.slotsInEpoch - epochInfo.absoluteSlot) * 400) / 1000\r\n      : undefined;\r\n\r\n  if (addFee) {\r\n    if (nowFeeConfig.transferFeeBasisPoints === POINT) {\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      return {\r\n        amount: amount.add(nowMaxFee),\r\n        fee: nowMaxFee,\r\n        expirationTime,\r\n      };\r\n    } else {\r\n      const _TAmount = BNDivCeil(amount.mul(new BN(POINT)), new BN(POINT - nowFeeConfig.transferFeeBasisPoints));\r\n\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      const TAmount = _TAmount.sub(amount).gt(nowMaxFee) ? amount.add(nowMaxFee) : _TAmount;\r\n\r\n      const _fee = BNDivCeil(TAmount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n      const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n      return {\r\n        amount: TAmount,\r\n        fee,\r\n        expirationTime,\r\n      };\r\n    }\r\n  } else {\r\n    const _fee = BNDivCeil(amount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n    const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n\r\n    return {\r\n      amount,\r\n      fee,\r\n      expirationTime,\r\n    };\r\n  }\r\n}\r\n\r\nexport function minExpirationTime(\r\n  expirationTime1: number | undefined,\r\n  expirationTime2: number | undefined,\r\n): number | undefined {\r\n  if (expirationTime1 === undefined) return expirationTime2;\r\n  if (expirationTime2 === undefined) return expirationTime1;\r\n\r\n  return Math.min(expirationTime1, expirationTime2);\r\n}\r\n\r\nexport function BNDivCeil(bn1: BN, bn2: BN): BN {\r\n  const { div, mod } = bn1.divmod(bn2);\r\n\r\n  if (mod.gt(new BN(0))) {\r\n    return div.add(new BN(1));\r\n  } else {\r\n    return div;\r\n  }\r\n}\r\n\r\nexport function ceilDivBN(amountA: BN, amountB: BN): BN {\r\n  if (amountA.isZero()) return new BN(0);\r\n\r\n  const quotient = amountA.div(amountB);\r\n\r\n  if (quotient.isZero()) return new BN(1);\r\n\r\n  const remainder = amountA.mod(amountB);\r\n  if (remainder.gt(new BN(0))) {\r\n    return quotient.add(new BN(1));\r\n  }\r\n  return quotient;\r\n}\r\n","import { Connection, PublicKey, AddressLookupTableAccount } from \"@solana/web3.js\";\r\nimport { getMultipleAccountsInfo } from \"../accountInfo\";\r\n\r\nexport interface CacheLTA {\r\n  [key: string]: AddressLookupTableAccount;\r\n}\r\n\r\nexport async function getMultipleLookupTableInfo({\r\n  connection,\r\n  address,\r\n}: {\r\n  connection: Connection;\r\n  address: PublicKey[];\r\n}): Promise<CacheLTA> {\r\n  const dataInfos = await getMultipleAccountsInfo(\r\n    connection,\r\n    [...new Set<string>(address.map((i) => i.toString()))].map((i) => new PublicKey(i)),\r\n  );\r\n\r\n  const outDict: CacheLTA = {};\r\n  for (let i = 0; i < address.length; i++) {\r\n    const info = dataInfos[i];\r\n    const key = address[i];\r\n    if (!info) continue;\r\n    const lookupAccount = new AddressLookupTableAccount({\r\n      key,\r\n      state: AddressLookupTableAccount.deserialize(info.data),\r\n    });\r\n    outDict[key.toString()] = lookupAccount;\r\n    LOOKUP_TABLE_CACHE[key.toString()] = lookupAccount;\r\n  }\r\n\r\n  return outDict;\r\n}\r\n\r\nexport const LOOKUP_TABLE_CACHE: CacheLTA = {\r\n  \"AcL1Vo8oy1ULiavEcjSUcwfBSForXMudcZvDZy5nzJkU\": new AddressLookupTableAccount({\r\n    key: new PublicKey(\"AcL1Vo8oy1ULiavEcjSUcwfBSForXMudcZvDZy5nzJkU\"),\r\n    state: AddressLookupTableAccount.deserialize(\r\n      Buffer.from(\r\n        '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',\r\n        \"base64\",\r\n      ),\r\n    ),\r\n  }),\r\n};\r\n","import {\r\n  Commitment,\r\n  Connection,\r\n  PublicKey,\r\n  sendAndConfirmTransaction,\r\n  SignatureResult,\r\n  Signer,\r\n  SystemProgram,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionMessage,\r\n  VersionedTransaction,\r\n} from \"@solana/web3.js\";\r\nimport axios from \"axios\";\r\n\r\nimport { Api } from \"../../api\";\r\nimport { ComputeBudgetConfig, SignAllTransactions, TxTipConfig } from \"../../raydium/type\";\r\nimport { Cluster } from \"../../solana\";\r\nimport { Owner } from \"../owner\";\r\nimport { CacheLTA, getMultipleLookupTableInfo, LOOKUP_TABLE_CACHE } from \"./lookupTable\";\r\nimport { InstructionType, TxVersion } from \"./txType\";\r\nimport {\r\n  addComputeBudget,\r\n  checkLegacyTxSize,\r\n  checkV0TxSize,\r\n  confirmTransaction,\r\n  getRecentBlockHash,\r\n  printSimulate,\r\n} from \"./txUtils\";\r\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\r\n\r\n// Optional: keep this at top level\r\nconst SENDER_ENDPOINT = 'http://sg-sender.helius-rpc.com/fast'; // use closest region, currently singapore\r\n\r\n\r\nconst TIP_AMOUNT = 0.001 * LAMPORTS_PER_SOL;\r\nconst TIP_ACCOUNTS = [\r\n  \"4ACfpUFoaSD9bfPdeu6DBt89gB6ENTeHBXCAi87NhDEE\",\r\n  \"D2L6yPZ2FmmmTKPgzaMKdhu6EWZcTpLy1Vhx8uvZe7NZ\",\r\n  \"9bnz4RShgq1hAnLnZbP8kbgBg1kEmcJBYQq3gQbmnSta\",\r\n  \"5VY91ws6B2hMmBFRsXkoAAdsPHBJwRfBht4DXox3xkwn\",\r\n  \"2nyhqdwKcJZR2vcqCyrYsaPVdAnFoJjiksCXJ7hfEYgD\",\r\n  \"2q5pghRs6arqVjRvT5gfgWfWcHWmw1ZuCzphgd5KfWGJ\",\r\n  \"wyvPkWjVZz1M8fHQnMMCDTQDbkManefNNhweYk5WkcF\",\r\n  \"3KCKozbAaF75qEU33jtzozcJ29yJuaLJTy2jFdzUY8bT\",\r\n  \"4vieeGHPYPG2MmyPRcYjdiDmmhN3ww7hsFNap8pVN3Ey\",\r\n  \"4TQLFNWK8AovT1gFvda5jfw2oJeRMKEmw7aH6MGBJ3or\"\r\n].map(k => new PublicKey(k));\r\n\r\ninterface SolanaFeeInfo {\r\n  min: number;\r\n  max: number;\r\n  avg: number;\r\n  priorityTx: number;\r\n  nonVotes: number;\r\n  priorityRatio: number;\r\n  avgCuPerBlock: number;\r\n  blockspaceUsageRatio: number;\r\n}\r\ntype SolanaFeeInfoJson = {\r\n  \"1\": SolanaFeeInfo;\r\n  \"5\": SolanaFeeInfo;\r\n  \"15\": SolanaFeeInfo;\r\n};\r\n\r\ninterface ExecuteParams {\r\n  skipPreflight?: boolean;\r\n  recentBlockHash?: string;\r\n  sendAndConfirm?: boolean;\r\n  notSendToRpc?: boolean;\r\n}\r\n\r\ninterface TxBuilderInit {\r\n  connection: Connection;\r\n  feePayer: PublicKey;\r\n  cluster: Cluster;\r\n  owner?: Owner;\r\n  blockhashCommitment?: Commitment;\r\n  loopMultiTxStatus?: boolean;\r\n  api?: Api;\r\n  signAllTransactions?: SignAllTransactions;\r\n}\r\n\r\nexport interface AddInstructionParam {\r\n  addresses?: Record<string, PublicKey>;\r\n  instructions?: TransactionInstruction[];\r\n  endInstructions?: TransactionInstruction[];\r\n  lookupTableAddress?: string[];\r\n  signers?: Signer[];\r\n  instructionTypes?: string[];\r\n  endInstructionTypes?: string[];\r\n}\r\n\r\nexport interface TxBuildData<T = Record<string, any>> {\r\n  builder: TxBuilder;\r\n  transaction: Transaction;\r\n  instructionTypes: string[];\r\n  signers: Signer[];\r\n  execute: (params?: ExecuteParams) => Promise<{ txId: string; signedTx: Transaction }>;\r\n  extInfo: T;\r\n}\r\n\r\nexport interface TxV0BuildData<T = Record<string, any>> extends Omit<TxBuildData<T>, \"transaction\" | \"execute\"> {\r\n  builder: TxBuilder;\r\n  transaction: VersionedTransaction;\r\n  buildProps?: {\r\n    lookupTableCache?: CacheLTA;\r\n    lookupTableAddress?: string[];\r\n  };\r\n  execute: (params?: ExecuteParams) => Promise<{ txId: string; signedTx: VersionedTransaction }>;\r\n}\r\n\r\ntype TxUpdateParams = {\r\n  txId: string;\r\n  status: \"success\" | \"error\" | \"sent\";\r\n  signedTx: Transaction | VersionedTransaction;\r\n};\r\nexport interface MultiTxExecuteParam extends ExecuteParams {\r\n  sequentially: boolean;\r\n  skipTxCount?: number;\r\n  onTxUpdate?: (completeTxs: TxUpdateParams[]) => void;\r\n}\r\nexport interface MultiTxBuildData<T = Record<string, any>> {\r\n  builder: TxBuilder;\r\n  transactions: Transaction[];\r\n  instructionTypes: string[];\r\n  signers: Signer[][];\r\n  execute: (executeParams?: MultiTxExecuteParam) => Promise<{ txIds: string[]; signedTxs: Transaction[] }>;\r\n  extInfo: T;\r\n}\r\n\r\nexport interface MultiTxV0BuildData<T = Record<string, any>>\r\n  extends Omit<MultiTxBuildData<T>, \"transactions\" | \"execute\"> {\r\n  builder: TxBuilder;\r\n  transactions: VersionedTransaction[];\r\n  buildProps?: {\r\n    lookupTableCache?: CacheLTA;\r\n    lookupTableAddress?: string[];\r\n  };\r\n  execute: (executeParams?: MultiTxExecuteParam) => Promise<{ txIds: string[]; signedTxs: VersionedTransaction[] }>;\r\n}\r\n\r\nexport type MakeMultiTxData<T = TxVersion.LEGACY, O = Record<string, any>> = T extends TxVersion.LEGACY\r\n  ? MultiTxBuildData<O>\r\n  : MultiTxV0BuildData<O>;\r\n\r\nexport type MakeTxData<T = TxVersion.LEGACY, O = Record<string, any>> = T extends TxVersion.LEGACY\r\n  ? TxBuildData<O>\r\n  : TxV0BuildData<O>;\r\n\r\nconst LOOP_INTERVAL = 2000;\r\n\r\nexport async function helius_sender(\r\n  signedTx\r\n) {\r\n   \r\n   // Serialize the tx\r\n  const b64 = Buffer.from(signedTx.serialize()).toString(\"base64\");\r\n  \r\n  // Send via Sender\r\n  const response = await fetch(SENDER_ENDPOINT, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({\r\n      jsonrpc: '2.0',\r\n      id: Date.now().toString(),\r\n      method: 'sendTransaction',\r\n      params: [\r\n        b64,\r\n        {\r\n          encoding: 'base64',\r\n          skipPreflight: true,\r\n          maxRetries: 0,\r\n        },\r\n      ],\r\n    }),\r\n  });\r\n  \r\n  const json = await response.json();\r\n  console.log(\"Helius response:\", JSON.stringify(json, null, 2));\r\n  if (json.error) throw new Error(json.error.message);\r\n\r\n  const signature = json.result;\r\n  console.log('Transaction sent:', signature);\r\n\r\n  return signature;\r\n}\r\n\r\nexport class TxBuilder {\r\n  private connection: Connection;\r\n  private owner?: Owner;\r\n  private instructions: TransactionInstruction[] = [];\r\n  private endInstructions: TransactionInstruction[] = [];\r\n  private lookupTableAddress: string[] = [];\r\n  private signers: Signer[] = [];\r\n  private instructionTypes: string[] = [];\r\n  private endInstructionTypes: string[] = [];\r\n  private feePayer: PublicKey;\r\n  private cluster: Cluster;\r\n  private signAllTransactions?: SignAllTransactions;\r\n  private blockhashCommitment?: Commitment;\r\n  private loopMultiTxStatus: boolean;\r\n\r\n  constructor(params: TxBuilderInit) {\r\n    this.connection = params.connection;\r\n    this.feePayer = params.feePayer;\r\n    this.signAllTransactions = params.signAllTransactions;\r\n    this.owner = params.owner;\r\n    this.cluster = params.cluster;\r\n    this.blockhashCommitment = params.blockhashCommitment;\r\n    this.loopMultiTxStatus = !!params.loopMultiTxStatus;\r\n  }\r\n\r\n  get AllTxData(): {\r\n    instructions: TransactionInstruction[];\r\n    endInstructions: TransactionInstruction[];\r\n    signers: Signer[];\r\n    instructionTypes: string[];\r\n    endInstructionTypes: string[];\r\n    lookupTableAddress: string[];\r\n  } {\r\n    return {\r\n      instructions: this.instructions,\r\n      endInstructions: this.endInstructions,\r\n      signers: this.signers,\r\n      instructionTypes: this.instructionTypes,\r\n      endInstructionTypes: this.endInstructionTypes,\r\n      lookupTableAddress: this.lookupTableAddress,\r\n    };\r\n  }\r\n\r\n  get allInstructions(): TransactionInstruction[] {\r\n    return [...this.instructions, ...this.endInstructions];\r\n  }\r\n\r\n  public async getComputeBudgetConfig(): Promise<ComputeBudgetConfig | undefined> {\r\n    const json = (\r\n      await axios.get<SolanaFeeInfoJson>(`https://solanacompass.com/api/fees?cacheFreshTime=${5 * 60 * 1000}`)\r\n    ).data;\r\n    const { avg } = json?.[15] ?? {};\r\n    if (!avg) return undefined;\r\n    return {\r\n      units: 600000,\r\n      microLamports: Math.min(Math.ceil((avg * 1000000) / 600000), 25000),\r\n    };\r\n  }\r\n\r\n  public addCustomComputeBudget(config?: ComputeBudgetConfig): boolean {\r\n    if (config) {\r\n      const { instructions, instructionTypes } = addComputeBudget(config);\r\n      this.instructions.unshift(...instructions);\r\n      this.instructionTypes.unshift(...instructionTypes);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public addTipInstruction(tipConfig?: TxTipConfig): boolean {\r\n    if (tipConfig) {\r\n      this.endInstructions.push(\r\n        SystemProgram.transfer({\r\n          fromPubkey: tipConfig.feePayer ?? this.feePayer,\r\n          toPubkey: new PublicKey(tipConfig.address),\r\n          lamports: BigInt(tipConfig.amount.toString()),\r\n        }),\r\n      );\r\n      this.endInstructionTypes.push(InstructionType.TransferTip);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public async calComputeBudget({\r\n    config: propConfig,\r\n    defaultIns,\r\n  }: {\r\n    config?: ComputeBudgetConfig;\r\n    defaultIns?: TransactionInstruction[];\r\n  }): Promise<void> {\r\n    try {\r\n      const config = propConfig || (await this.getComputeBudgetConfig());\r\n      if (this.addCustomComputeBudget(config)) return;\r\n      defaultIns && this.instructions.unshift(...defaultIns);\r\n    } catch {\r\n      defaultIns && this.instructions.unshift(...defaultIns);\r\n    }\r\n  }\r\n\r\n  public addInstruction({\r\n    instructions = [],\r\n    endInstructions = [],\r\n    signers = [],\r\n    instructionTypes = [],\r\n    endInstructionTypes = [],\r\n    lookupTableAddress = [],\r\n  }: AddInstructionParam): TxBuilder {\r\n    this.instructions.push(...instructions);\r\n    this.endInstructions.push(...endInstructions);\r\n    this.signers.push(...signers);\r\n    this.instructionTypes.push(...instructionTypes);\r\n    this.endInstructionTypes.push(...endInstructionTypes);\r\n    this.lookupTableAddress.push(...lookupTableAddress.filter((address) => address !== PublicKey.default.toString()));\r\n    return this;\r\n  }\r\n\r\n  public async versionBuild<O = Record<string, any>>({\r\n    txVersion,\r\n    extInfo,\r\n  }: {\r\n    txVersion?: TxVersion;\r\n    extInfo?: O;\r\n  }): Promise<MakeTxData<TxVersion.LEGACY, O> | MakeTxData<TxVersion.V0, O>> {\r\n    if (txVersion === TxVersion.V0) return (await this.buildV0({ ...(extInfo || {}) })) as MakeTxData<TxVersion.V0, O>;\r\n    return this.build<O>(extInfo) as MakeTxData<TxVersion.LEGACY, O>;\r\n  }\r\n\r\n  public build<O = Record<string, any>>(extInfo?: O): MakeTxData<TxVersion.LEGACY, O> {\r\n    const transaction = new Transaction();\r\n    if (this.allInstructions.length) transaction.add(...this.allInstructions);\r\n    transaction.feePayer = this.feePayer;\r\n    if (this.owner?.signer && !this.signers.some((s) => s.publicKey.equals(this.owner!.publicKey)))\r\n      this.signers.push(this.owner.signer);\r\n\r\n    return {\r\n      builder: this,\r\n      transaction,\r\n      signers: this.signers,\r\n      instructionTypes: [...this.instructionTypes, ...this.endInstructionTypes],\r\n      execute: async (params) => {\r\n        const { recentBlockHash: propBlockHash, skipPreflight = true, sendAndConfirm, notSendToRpc } = params || {};\r\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n        transaction.recentBlockhash = recentBlockHash;\r\n        if (this.signers.length) transaction.sign(...this.signers);\r\n\r\n        printSimulate([transaction]);\r\n        console.log(\"SEND 1\");\r\n        if (this.owner?.isKeyPair) {\r\n          const txId = sendAndConfirm\r\n            ? await sendAndConfirmTransaction(\r\n                this.connection,\r\n                transaction,\r\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\r\n                  ? this.signers\r\n                  : [...this.signers, this.owner.signer!],\r\n                { skipPreflight },\r\n              )\r\n            : await this.connection.sendRawTransaction(transaction.serialize(), { skipPreflight });\r\n\r\n          return {\r\n            txId,\r\n            signedTx: transaction,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const txs = await this.signAllTransactions([transaction]);\r\n          if (this.signers.length) {\r\n            for (const item of txs) {\r\n              try {\r\n                item.sign(...this.signers);\r\n              } catch (e) {\r\n                //\r\n              }\r\n            }\r\n          }\r\n          return {\r\n            txId: notSendToRpc ? \"\" : await this.connection.sendRawTransaction(txs[0].serialize(), { skipPreflight }),\r\n            signedTx: txs[0],\r\n          };\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || ({} as O),\r\n    };\r\n  }\r\n\r\n  public buildMultiTx<T = Record<string, any>>(params: {\r\n    extraPreBuildData?: MakeTxData<TxVersion.LEGACY>[];\r\n    extInfo?: T;\r\n  }): MultiTxBuildData {\r\n    const { extraPreBuildData = [], extInfo } = params;\r\n    const { transaction } = this.build(extInfo);\r\n\r\n    const filterExtraBuildData = extraPreBuildData.filter((data) => data.transaction.instructions.length > 0);\r\n\r\n    const allTransactions: Transaction[] = [transaction, ...filterExtraBuildData.map((data) => data.transaction)];\r\n    const allSigners: Signer[][] = [this.signers, ...filterExtraBuildData.map((data) => data.signers)];\r\n    const allInstructionTypes: string[] = [\r\n      ...this.instructionTypes,\r\n      ...filterExtraBuildData.map((data) => data.instructionTypes).flat(),\r\n    ];\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) this.signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      signers: allSigners,\r\n      instructionTypes: allInstructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const {\r\n          sequentially,\r\n          onTxUpdate,\r\n          skipTxCount = 0,\r\n          recentBlockHash: propBlockHash,\r\n          skipPreflight = true,\r\n        } = executeParams || {};\r\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            const txIds: string[] = [];\r\n            let i = 0;\r\n            for (const tx of allTransactions) {\r\n              ++i;\r\n              if (i <= skipTxCount) continue;\r\n              const txId = await sendAndConfirmTransaction(\r\n                this.connection,\r\n                tx,\r\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\r\n                  ? this.signers\r\n                  : [...this.signers, this.owner.signer!],\r\n                { skipPreflight },\r\n              );\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return {\r\n              txIds,\r\n              signedTxs: allTransactions,\r\n            };\r\n          }\r\n          return {\r\n            txIds: await await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                tx.recentBlockhash = recentBlockHash;\r\n                return await this.connection.sendRawTransaction(tx.serialize(), { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n\r\n        if (this.signAllTransactions) {\r\n          const partialSignedTxs = allTransactions.map((tx, idx) => {\r\n            tx.recentBlockhash = recentBlockHash;\r\n            if (allSigners[idx].length) tx.sign(...allSigners[idx]);\r\n            return tx;\r\n          });\r\n          printSimulate(partialSignedTxs);\r\n          console.log(\"SEND 2\");\r\n          const signedTxs = await this.signAllTransactions(partialSignedTxs);\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            await checkSendTx();\r\n            return {\r\n              txIds: processedTxs.map((d) => d.txId),\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return {\r\n              txIds,\r\n              signedTxs,\r\n            };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n\r\n  public async versionMultiBuild<T extends TxVersion, O = Record<string, any>>({\r\n    extraPreBuildData,\r\n    txVersion,\r\n    extInfo,\r\n  }: {\r\n    extraPreBuildData?: MakeTxData<TxVersion.V0>[] | MakeTxData<TxVersion.LEGACY>[];\r\n    txVersion?: T;\r\n    extInfo?: O;\r\n  }): Promise<MakeMultiTxData<T, O>> {\r\n    if (txVersion === TxVersion.V0)\r\n      return (await this.buildV0MultiTx({\r\n        extraPreBuildData: extraPreBuildData as MakeTxData<TxVersion.V0>[],\r\n        buildProps: extInfo || {},\r\n      })) as MakeMultiTxData<T, O>;\r\n    return this.buildMultiTx<O>({\r\n      extraPreBuildData: extraPreBuildData as MakeTxData<TxVersion.LEGACY>[],\r\n      extInfo,\r\n    }) as MakeMultiTxData<T, O>;\r\n  }\r\n\r\n  public async buildV0<O = Record<string, any>>(\r\n    props?: O & {\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n      forerunCreate?: boolean;\r\n      recentBlockhash?: string;\r\n    },\r\n  ): Promise<MakeTxData<TxVersion.V0, O>> {\r\n    const {\r\n      lookupTableCache = {},\r\n      lookupTableAddress = [],\r\n      forerunCreate,\r\n      recentBlockhash: propRecentBlockhash,\r\n      ...extInfo\r\n    } = props || {};\r\n    const lookupTableAddressAccount = {\r\n      ...(this.cluster === \"devnet\" ? {} : LOOKUP_TABLE_CACHE),\r\n      ...lookupTableCache,\r\n    };\r\n    const allLTA = Array.from(new Set<string>([...lookupTableAddress, ...this.lookupTableAddress]));\r\n    const needCacheLTA: PublicKey[] = [];\r\n    for (const item of allLTA) {\r\n      if (lookupTableAddressAccount[item] === undefined) needCacheLTA.push(new PublicKey(item));\r\n    }\r\n    const newCacheLTA = await getMultipleLookupTableInfo({ connection: this.connection, address: needCacheLTA });\r\n    for (const [key, value] of Object.entries(newCacheLTA)) lookupTableAddressAccount[key] = value;\r\n\r\n    const recentBlockhash = forerunCreate\r\n      ? PublicKey.default.toBase58()\r\n      : propRecentBlockhash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n    const messageV0 = new TransactionMessage({\r\n      payerKey: this.feePayer,\r\n      recentBlockhash,\r\n      instructions: [...this.allInstructions],\r\n    }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n    if (this.owner?.signer && !this.signers.some((s) => s.publicKey.equals(this.owner!.publicKey)))\r\n      this.signers.push(this.owner.signer);\r\n    const transaction = new VersionedTransaction(messageV0);\r\n\r\n    transaction.sign(this.signers);\r\n\r\n    return {\r\n      builder: this,\r\n      transaction,\r\n      signers: this.signers,\r\n      instructionTypes: [...this.instructionTypes, ...this.endInstructionTypes],\r\n      execute: async (params) => {\r\n        const { skipPreflight = true, sendAndConfirm, notSendToRpc } = params || {};\r\n        printSimulate([transaction]);\r\n        console.log(\"SEND 3\");\r\n        if (this.owner?.isKeyPair) {\r\n          const txId = await this.connection.sendTransaction(transaction, { skipPreflight });\r\n          if (sendAndConfirm) {\r\n            await confirmTransaction(this.connection, txId);\r\n          }\r\n\r\n          return {\r\n            txId,\r\n            signedTx: transaction,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const txs = await this.signAllTransactions<VersionedTransaction>([transaction]);\r\n          if (this.signers.length) {\r\n            for (const item of txs) {\r\n              try {\r\n                item.sign(this.signers);\r\n              } catch (e) {\r\n                //\r\n              }\r\n            }\r\n          }\r\n          return {\r\n            txId: notSendToRpc ? \"\" : await this.connection.sendTransaction(txs[0], { skipPreflight }),\r\n            signedTx: txs[0],\r\n          };\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: (extInfo || {}) as O,\r\n    };\r\n  }\r\n\r\n  public async buildV0MultiTx<T = Record<string, any>>(params: {\r\n    extraPreBuildData?: MakeTxData<TxVersion.V0>[];\r\n    buildProps?: T & {\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n      forerunCreate?: boolean;\r\n      recentBlockhash?: string;\r\n    };\r\n  }): Promise<MultiTxV0BuildData> {\r\n    const { extraPreBuildData = [], buildProps } = params;\r\n    const { transaction } = await this.buildV0(buildProps);\r\n\r\n    const filterExtraBuildData = extraPreBuildData.filter((data) => data.builder.instructions.length > 0);\r\n\r\n    const allTransactions: VersionedTransaction[] = [\r\n      transaction,\r\n      ...filterExtraBuildData.map((data) => data.transaction),\r\n    ];\r\n    const allSigners: Signer[][] = [this.signers, ...filterExtraBuildData.map((data) => data.signers)];\r\n    const allInstructionTypes: string[] = [\r\n      ...this.instructionTypes,\r\n      ...filterExtraBuildData.map((data) => data.instructionTypes).flat(),\r\n    ];\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) this.signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    allTransactions.forEach(async (tx, idx) => {\r\n      tx.sign(allSigners[idx]);\r\n    });\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      signers: allSigners,\r\n      instructionTypes: allInstructionTypes,\r\n      buildProps,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const { sequentially, onTxUpdate, recentBlockHash: propBlockHash, skipPreflight = true } = executeParams || {};\r\n        if (propBlockHash) allTransactions.forEach((tx) => (tx.message.recentBlockhash = propBlockHash));\r\n        printSimulate(allTransactions);\r\n        console.log(\"SEND 4\");\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              const txId = await this.connection.sendTransaction(tx, { skipPreflight });\r\n              await confirmTransaction(this.connection, txId);\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return { txIds, signedTxs: allTransactions };\r\n          }\r\n          \r\n          return {\r\n            txIds: await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                return await this.connection.sendTransaction(tx, { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n\r\n        if (this.signAllTransactions) {\r\n          const signedTxs = await this.signAllTransactions(allTransactions);\r\n\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            checkSendTx();\r\n            return {\r\n              txIds: [],\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: buildProps || {},\r\n    };\r\n  }\r\n\r\n  public async sizeCheckBuild(\r\n    props?: Record<string, any> & { computeBudgetConfig?: ComputeBudgetConfig; splitIns?: TransactionInstruction[] },\r\n  ): Promise<MultiTxBuildData> {\r\n    const { splitIns = [], computeBudgetConfig, ...extInfo } = props || {};\r\n    const computeBudgetData: { instructions: TransactionInstruction[]; instructionTypes: string[] } =\r\n      computeBudgetConfig\r\n        ? addComputeBudget(computeBudgetConfig)\r\n        : {\r\n            instructions: [],\r\n            instructionTypes: [],\r\n          };\r\n\r\n    const signerKey: { [key: string]: Signer } = this.signers.reduce(\r\n      (acc, cur) => ({ ...acc, [cur.publicKey.toBase58()]: cur }),\r\n      {},\r\n    );\r\n\r\n    const allTransactions: Transaction[] = [];\r\n    const allSigners: Signer[][] = [];\r\n\r\n    let instructionQueue: TransactionInstruction[] = [];\r\n    let splitInsIdx = 0;\r\n    this.allInstructions.forEach((item) => {\r\n      const _itemIns = [...instructionQueue, item];\r\n      const _itemInsWithCompute = computeBudgetConfig ? [...computeBudgetData.instructions, ..._itemIns] : _itemIns;\r\n      const _signerStrs = new Set<string>(\r\n        _itemIns.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signer = [..._signerStrs.values()].map((i) => new PublicKey(i));\r\n\r\n      if (\r\n        item !== splitIns[splitInsIdx] &&\r\n        instructionQueue.length < 12 &&\r\n        (checkLegacyTxSize({ instructions: _itemInsWithCompute, payer: this.feePayer, signers: _signer }) ||\r\n          checkLegacyTxSize({ instructions: _itemIns, payer: this.feePayer, signers: _signer }))\r\n      ) {\r\n        // current ins add to queue still not exceed tx size limit\r\n        instructionQueue.push(item);\r\n      } else {\r\n        if (instructionQueue.length === 0) throw Error(\"item ins too big\");\r\n        splitInsIdx += item === splitIns[splitInsIdx] ? 1 : 0;\r\n        // if add computeBudget still not exceed tx size limit\r\n        if (\r\n          checkLegacyTxSize({\r\n            instructions: computeBudgetConfig\r\n              ? [...computeBudgetData.instructions, ...instructionQueue]\r\n              : [...instructionQueue],\r\n            payer: this.feePayer,\r\n            signers: _signer,\r\n          })\r\n        ) {\r\n          allTransactions.push(new Transaction().add(...computeBudgetData.instructions, ...instructionQueue));\r\n        } else {\r\n          allTransactions.push(new Transaction().add(...instructionQueue));\r\n        }\r\n        allSigners.push(\r\n          Array.from(\r\n            new Set<string>(\r\n              instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n            ),\r\n          )\r\n            .map((i) => signerKey[i])\r\n            .filter((i) => i !== undefined),\r\n        );\r\n        instructionQueue = [item];\r\n      }\r\n    });\r\n\r\n    if (instructionQueue.length > 0) {\r\n      const _signerStrs = new Set<string>(\r\n        instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signers = [..._signerStrs.values()].map((i) => signerKey[i]).filter((i) => i !== undefined);\r\n\r\n      if (\r\n        checkLegacyTxSize({\r\n          instructions: computeBudgetConfig\r\n            ? [...computeBudgetData.instructions, ...instructionQueue]\r\n            : [...instructionQueue],\r\n          payer: this.feePayer,\r\n          signers: _signers.map((s) => s.publicKey),\r\n        })\r\n      ) {\r\n        allTransactions.push(new Transaction().add(...computeBudgetData.instructions, ...instructionQueue));\r\n      } else {\r\n        allTransactions.push(new Transaction().add(...instructionQueue));\r\n      }\r\n      allSigners.push(_signers);\r\n    }\r\n    allTransactions.forEach((tx) => (tx.feePayer = this.feePayer));\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      signers: allSigners,\r\n      instructionTypes: this.instructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const {\r\n          sequentially,\r\n          onTxUpdate,\r\n          skipTxCount = 0,\r\n          recentBlockHash: propBlockHash,\r\n          skipPreflight = true,\r\n        } = executeParams || {};\r\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n        allTransactions.forEach(async (tx, idx) => {\r\n          tx.recentBlockhash = recentBlockHash;\r\n          if (allSigners[idx].length) tx.sign(...allSigners[idx]);\r\n        });\r\n        printSimulate(allTransactions);\r\n        console.log(\"SEND 5\");\r\n        console.log(\"sizeCheckBuild\")\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              ++i;\r\n              if (i <= skipTxCount) {\r\n                txIds.push(\"tx skipped\");\r\n                continue;\r\n              }\r\n              const txId = await sendAndConfirmTransaction(\r\n                this.connection,\r\n                tx,\r\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\r\n                  ? this.signers\r\n                  : [...this.signers, this.owner.signer!],\r\n                { skipPreflight },\r\n              );\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return {\r\n              txIds,\r\n              signedTxs: allTransactions,\r\n            };\r\n          }\r\n          return {\r\n            txIds: await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                return await this.connection.sendRawTransaction(tx.serialize(), { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const needSignedTx = await this.signAllTransactions(\r\n            allTransactions.slice(skipTxCount, allTransactions.length),\r\n          );\r\n          const signedTxs = [...allTransactions.slice(0, skipTxCount), ...needSignedTx];\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              if (i < skipTxCount) {\r\n                // success before, do not send again\r\n                processedTxs.push({ txId: \"\", status: \"success\", signedTx: signedTxs[i] });\r\n                onTxUpdate?.([...processedTxs]);\r\n                i++;\r\n                checkSendTx();\r\n              }\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            await checkSendTx();\r\n            return {\r\n              txIds: processedTxs.map((d) => d.txId),\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n\r\n  public async sizeCheckBuildV0(\r\n    props?: Record<string, any> & {\r\n      computeBudgetConfig?: ComputeBudgetConfig;\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n      splitIns?: TransactionInstruction[];\r\n    },\r\n  ): Promise<MultiTxV0BuildData> {\r\n    const {\r\n      computeBudgetConfig,\r\n      splitIns = [],\r\n      lookupTableCache = {},\r\n      lookupTableAddress = [],\r\n      ...extInfo\r\n    } = props || {};\r\n    const lookupTableAddressAccount = {\r\n      ...(this.cluster === \"devnet\" ? {} : LOOKUP_TABLE_CACHE),\r\n      ...lookupTableCache,\r\n    };\r\n    const allLTA = Array.from(new Set<string>([...this.lookupTableAddress, ...lookupTableAddress]));\r\n    const needCacheLTA: PublicKey[] = [];\r\n    for (const item of allLTA) {\r\n      if (lookupTableAddressAccount[item] === undefined) needCacheLTA.push(new PublicKey(item));\r\n    }\r\n    const newCacheLTA = await getMultipleLookupTableInfo({ connection: this.connection, address: needCacheLTA });\r\n    for (const [key, value] of Object.entries(newCacheLTA)) lookupTableAddressAccount[key] = value;\r\n\r\n    const computeBudgetData: { instructions: TransactionInstruction[]; instructionTypes: string[] } =\r\n      computeBudgetConfig\r\n        ? addComputeBudget(computeBudgetConfig)\r\n        : {\r\n            instructions: [],\r\n            instructionTypes: [],\r\n          };\r\n\r\n    const blockHash = await getRecentBlockHash(this.connection, this.blockhashCommitment);\r\n\r\n    const signerKey: { [key: string]: Signer } = this.signers.reduce(\r\n      (acc, cur) => ({ ...acc, [cur.publicKey.toBase58()]: cur }),\r\n      {},\r\n    );\r\n    const allTransactions: VersionedTransaction[] = [];\r\n    const allSigners: Signer[][] = [];\r\n\r\n    let instructionQueue: TransactionInstruction[] = [];\r\n    let splitInsIdx = 0;\r\n    this.allInstructions.forEach((item) => {\r\n      const _itemIns = [...instructionQueue, item];\r\n      const _itemInsWithCompute = computeBudgetConfig ? [...computeBudgetData.instructions, ..._itemIns] : _itemIns;\r\n      if (\r\n        item !== splitIns[splitInsIdx] &&\r\n        instructionQueue.length < 12 &&\r\n        (checkV0TxSize({ instructions: _itemInsWithCompute, payer: this.feePayer, lookupTableAddressAccount }) ||\r\n          checkV0TxSize({ instructions: _itemIns, payer: this.feePayer, lookupTableAddressAccount }))\r\n      ) {\r\n        // current ins add to queue still not exceed tx size limit\r\n        instructionQueue.push(item);\r\n      } else {\r\n        if (instructionQueue.length === 0) throw Error(\"item ins too big\");\r\n        splitInsIdx += item === splitIns[splitInsIdx] ? 1 : 0;\r\n        const lookupTableAddress: undefined | CacheLTA = {};\r\n        for (const item of [...new Set<string>(allLTA)]) {\r\n          if (lookupTableAddressAccount[item] !== undefined) lookupTableAddress[item] = lookupTableAddressAccount[item];\r\n        }\r\n        // if add computeBudget still not exceed tx size limit\r\n        if (\r\n          computeBudgetConfig &&\r\n          checkV0TxSize({\r\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n            payer: this.feePayer,\r\n            lookupTableAddressAccount,\r\n            recentBlockhash: blockHash,\r\n          })\r\n        ) {\r\n          const messageV0 = new TransactionMessage({\r\n            payerKey: this.feePayer,\r\n            recentBlockhash: blockHash,\r\n\r\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n          allTransactions.push(new VersionedTransaction(messageV0));\r\n        } else {\r\n          const messageV0 = new TransactionMessage({\r\n            payerKey: this.feePayer,\r\n            recentBlockhash: blockHash,\r\n            instructions: [...instructionQueue],\r\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n          allTransactions.push(new VersionedTransaction(messageV0));\r\n        }\r\n        allSigners.push(\r\n          Array.from(\r\n            new Set<string>(\r\n              instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n            ),\r\n          )\r\n            .map((i) => signerKey[i])\r\n            .filter((i) => i !== undefined),\r\n        );\r\n        instructionQueue = [item];\r\n      }\r\n    });\r\n\r\n    if (instructionQueue.length > 0) {\r\n      const _signerStrs = new Set<string>(\r\n        instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signers = [..._signerStrs.values()].map((i) => signerKey[i]).filter((i) => i !== undefined);\r\n\r\n      // 👉 TIP INSTRUCTION\r\n      const tipAccount = TIP_ACCOUNTS[Math.floor(Math.random() * TIP_ACCOUNTS.length)];\r\n      const tipInstruction = SystemProgram.transfer({\r\n        fromPubkey: this.feePayer,\r\n        toPubkey: tipAccount,\r\n        lamports: Math.floor(0.001 * LAMPORTS_PER_SOL),\r\n      });\r\n\r\n      if (\r\n        computeBudgetConfig &&\r\n        checkV0TxSize({\r\n          instructions: [tipInstruction, ...computeBudgetData.instructions, ...instructionQueue],\r\n          payer: this.feePayer,\r\n          lookupTableAddressAccount,\r\n          recentBlockhash: blockHash,\r\n        })\r\n      ) {\r\n        console.log(\"MESSAGE 1\")\r\n        const messageV0 = new TransactionMessage({\r\n          payerKey: this.feePayer,\r\n          recentBlockhash: blockHash,\r\n          instructions: [tipInstruction, ...instructionQueue],\r\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n        allTransactions.push(new VersionedTransaction(messageV0));\r\n      } else {\r\n        console.log(\"MESSAGE 2\")\r\n        const messageV0 = new TransactionMessage({\r\n          payerKey: this.feePayer,\r\n          recentBlockhash: blockHash,\r\n          instructions: [tipInstruction, ...instructionQueue],\r\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n        allTransactions.push(new VersionedTransaction(messageV0));\r\n      }\r\n\r\n      const tip = new TransactionMessage({\r\n        payerKey: this.feePayer,\r\n        recentBlockhash: blockHash,\r\n        instructions: [tipInstruction]\r\n      }).compileToV0Message([]);\r\n\r\n      const tipTx = new VersionedTransaction(tip);\r\n\r\n      console.log(\"📦 Tip-only tx size:\", tipTx.serialize().length);\r\n\r\n      const compute = new TransactionMessage({\r\n        payerKey: this.feePayer,\r\n        recentBlockhash: blockHash,\r\n        instructions: [...computeBudgetData.instructions],\r\n      }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n\r\n      const computeTx = new VersionedTransaction(compute);\r\n\r\n      console.log(\"📦 computeTx-only tx size:\", computeTx.serialize().length);\r\n\r\n      allSigners.push(_signers);\r\n\r\n      const instruction = new TransactionMessage({\r\n        payerKey: this.feePayer,\r\n        recentBlockhash: blockHash,\r\n        instructions: [...instructionQueue],\r\n      }).compileToV0Message([]);\r\n\r\n      const instructionTx = new VersionedTransaction(instruction);\r\n\r\n      console.log(\"📦 instructionTx-only tx size:\", instructionTx.serialize().length);\r\n\r\n      allSigners.push(_signers);\r\n\r\n    }\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    allTransactions.forEach((tx, idx) => {\r\n      tx.sign(allSigners[idx]);\r\n      console.log(`Tx #${idx + 1} size (bytes):`, tx.serialize().length);\r\n    });\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      buildProps: props,\r\n      signers: allSigners,\r\n      instructionTypes: this.instructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const {\r\n          sequentially,\r\n          onTxUpdate,\r\n          skipTxCount = 0,\r\n          recentBlockHash: propBlockHash,\r\n          skipPreflight = true,\r\n        } = executeParams || {};\r\n        allTransactions.map(async (tx, idx) => {\r\n          if (allSigners[idx].length) tx.sign(allSigners[idx]);\r\n          if (propBlockHash) tx.message.recentBlockhash = propBlockHash;\r\n        });\r\n        printSimulate(allTransactions);\r\n        console.log(\"SEND 6\");\r\n        console.log(\"sizeCheckBuildV0\")\r\n        if (this.owner?.isKeyPair) {\r\n          // if (sequentially) {\r\n          //   let i = 0;\r\n          //   const txIds: string[] = [];\r\n          //   for (const tx of allTransactions) {\r\n          //     ++i;\r\n          //     if (i <= skipTxCount) {\r\n          //       console.log(\"skip tx: \", i);\r\n          //       txIds.push(\"tx skipped\");\r\n          //       continue;\r\n          //     }\r\n          //     console.log('sending transaction')\r\n          //     const txId = await this.connection.sendTransaction(tx, { skipPreflight });\r\n          //     await confirmTransaction(this.connection, txId);\r\n\r\n          //     txIds.push(txId);\r\n          //   }\r\n          //   console.log('returning')\r\n          //   return { txIds, signedTxs: allTransactions };\r\n          // }\r\n          // return {\r\n          //   txIds: await Promise.all(\r\n          //     allTransactions.map(async (tx) => {\r\n          //       return await this.connection.sendTransaction(tx, { skipPreflight });\r\n          //     }),\r\n          //   ),\r\n          //   signedTxs: allTransactions,\r\n          // };\r\n          \r\n          // HELIUS SENDER IMPLEMENTATION\r\n          console.log(\"send transactions using Helius Sender\")\r\n          for (const tx of allTransactions) {\r\n            const sig = await helius_sender(tx);\r\n            console.log('Sent tx:', sig);\r\n          }\r\n          return { txIds: [], signedTxs: [] };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const needSignedTx = await this.signAllTransactions(\r\n            allTransactions.slice(skipTxCount, allTransactions.length),\r\n          );\r\n          const signedTxs = [...allTransactions.slice(0, skipTxCount), ...needSignedTx];\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              if (i < skipTxCount) {\r\n                // success before, do not send again\r\n                processedTxs.push({ txId: \"\", status: \"success\", signedTx: signedTxs[i] });\r\n                onTxUpdate?.([...processedTxs]);\r\n                i++;\r\n                checkSendTx();\r\n                return;\r\n              }\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n\r\n              let confirmed = false;\r\n              // eslint-disable-next-line\r\n              let intervalId: NodeJS.Timer | null = null,\r\n                subSignatureId: number | null = null;\r\n              const cbk = (signatureResult: SignatureResult): void => {\r\n                intervalId !== null && clearInterval(intervalId);\r\n                subSignatureId !== null && this.connection.removeSignatureListener(subSignatureId);\r\n                const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                if (targetTxIdx > -1) {\r\n                  if (processedTxs[targetTxIdx].status === \"error\" || processedTxs[targetTxIdx].status === \"success\")\r\n                    return;\r\n                  processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                }\r\n                onTxUpdate?.([...processedTxs]);\r\n                if (!signatureResult.err) checkSendTx();\r\n              };\r\n\r\n              if (this.loopMultiTxStatus)\r\n                intervalId = setInterval(async () => {\r\n                  if (confirmed) {\r\n                    clearInterval(intervalId!);\r\n                    return;\r\n                  }\r\n                  try {\r\n                    const r = await this.connection.getTransaction(txId, {\r\n                      commitment: \"confirmed\",\r\n                      maxSupportedTransactionVersion: TxVersion.V0,\r\n                    });\r\n                    if (r) {\r\n                      confirmed = true;\r\n                      clearInterval(intervalId!);\r\n                      cbk({ err: r.meta?.err || null });\r\n                      console.log(\"tx status from getTransaction:\", txId);\r\n                    }\r\n                  } catch (e) {\r\n                    confirmed = true;\r\n                    clearInterval(intervalId!);\r\n                    console.error(\"getTransaction timeout:\", e, txId);\r\n                  }\r\n                }, LOOP_INTERVAL);\r\n\r\n              subSignatureId = this.connection.onSignature(\r\n                txId,\r\n                (result) => {\r\n                  if (confirmed) {\r\n                    this.connection.removeSignatureListener(subSignatureId!);\r\n                    return;\r\n                  }\r\n                  confirmed = true;\r\n                  cbk(result);\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            checkSendTx();\r\n            return {\r\n              txIds: [],\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nexport const FEE_RATE_DENOMINATOR_VALUE = new BN(1_000_000);\r\n","import { Connection, PublicKey } from \"@solana/web3.js\";\r\nimport { MintLayout, RawMint, TOKEN_PROGRAM_ID, TransferFeeConfigLayout } from \"@solana/spl-token\";\r\nimport { BigNumberish } from \"@/common/bignumber\";\r\nimport { Token, TokenAmount } from \"../../module\";\r\nimport { SOL_INFO, TOKEN_WSOL } from \"./constant\";\r\nimport { TokenInfo } from \"./type\";\r\n\r\nimport { ApiV3Token } from \"../../api\";\r\nimport { solToWSol } from \"@/common\";\r\n\r\nexport const parseTokenInfo = async ({\r\n  connection,\r\n  mint,\r\n}: {\r\n  connection: Connection;\r\n  mint: PublicKey | string;\r\n}): Promise<RawMint | undefined> => {\r\n  const accountData = await connection.getAccountInfo(new PublicKey(mint));\r\n  if (!accountData || accountData.data.length !== MintLayout.span) return;\r\n  const tokenInfo = MintLayout.decode(accountData.data);\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  //@ts-ignore\r\n  return tokenInfo;\r\n};\r\n\r\nexport const toTokenInfo = ({\r\n  mint,\r\n  decimals,\r\n  programId = TOKEN_PROGRAM_ID,\r\n  logoURI = \"\",\r\n  priority = 3,\r\n}: {\r\n  mint: PublicKey;\r\n  decimals: number;\r\n  programId?: PublicKey | string;\r\n  priority?: number;\r\n  logoURI?: string;\r\n}): TokenInfo => {\r\n  const pubStr = mint.toBase58().substring(0, 6);\r\n  return {\r\n    address: mint.toBase58(),\r\n    decimals,\r\n    symbol: pubStr,\r\n    logoURI,\r\n    extensions: {},\r\n    chainId: 101,\r\n    programId: programId.toString(),\r\n    name: pubStr,\r\n    tags: [],\r\n    priority,\r\n  };\r\n};\r\n\r\nexport const toToken = (props: Omit<TokenInfo, \"priority\">): Token =>\r\n  new Token({\r\n    mint: props.address,\r\n    decimals: props.decimals,\r\n    symbol: props.symbol,\r\n    name: props.name,\r\n  });\r\n\r\nexport const toTokenAmount = ({\r\n  amount,\r\n  isRaw,\r\n  name,\r\n  ...props\r\n}: Omit<TokenInfo, \"priority\"> & {\r\n  amount: BigNumberish;\r\n  isRaw?: boolean;\r\n  name?: string;\r\n}): TokenAmount =>\r\n  new TokenAmount(\r\n    new Token({\r\n      mint: solToWSol(props.address).toBase58(),\r\n      decimals: props.decimals,\r\n      symbol: props.symbol,\r\n      name,\r\n    }),\r\n    amount,\r\n    isRaw,\r\n    name,\r\n  );\r\n\r\nexport function solToWSolToken<T extends ApiV3Token | TokenInfo>(token: T): T {\r\n  if (token.address === SOL_INFO.address) return TOKEN_WSOL as T;\r\n  return token;\r\n}\r\n\r\nexport function wSolToSolToken<T extends ApiV3Token | TokenInfo>(token: T): T {\r\n  if (token.address === TOKEN_WSOL.address) return SOL_INFO as T;\r\n  return token;\r\n}\r\n\r\nexport const toApiV3Token = ({\r\n  address,\r\n  programId,\r\n  decimals,\r\n  ...props\r\n}: {\r\n  address: string;\r\n  programId: string;\r\n  decimals: number;\r\n} & Partial<ApiV3Token>): ApiV3Token => ({\r\n  chainId: 101,\r\n  address: solToWSol(address).toBase58(),\r\n  programId,\r\n  logoURI: \"\",\r\n  symbol: \"\",\r\n  name: \"\",\r\n  decimals,\r\n  tags: [],\r\n  extensions: props.extensions || {},\r\n  ...props,\r\n});\r\n\r\nexport const toFeeConfig = (\r\n  config?: ReturnType<typeof TransferFeeConfigLayout.decode> | undefined | null,\r\n): ApiV3Token[\"extensions\"][\"feeConfig\"] | undefined =>\r\n  config\r\n    ? {\r\n        ...config,\r\n        transferFeeConfigAuthority: config.transferFeeConfigAuthority.toBase58(),\r\n        withdrawWithheldAuthority: config.withdrawWithheldAuthority.toBase58(),\r\n        withheldAmount: config.withheldAmount.toString(),\r\n        olderTransferFee: {\r\n          ...config.olderTransferFee,\r\n          epoch: config.olderTransferFee.epoch.toString(),\r\n          maximumFee: config.olderTransferFee.maximumFee.toString(),\r\n        },\r\n        newerTransferFee: {\r\n          ...config.newerTransferFee,\r\n          epoch: config.newerTransferFee.epoch.toString(),\r\n          maximumFee: config.newerTransferFee.maximumFee.toString(),\r\n        },\r\n      }\r\n    : undefined;\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { createLogger, Logger } from \"../common/logger\";\r\nimport { TxBuilder } from \"../common/txTool/txTool\";\r\n\r\nimport { Raydium } from \"./\";\r\n\r\nexport interface ModuleBaseProps {\r\n  scope: Raydium;\r\n  moduleName: string;\r\n}\r\n\r\nconst joinMsg = (...args: (string | number | Record<string, any>)[]): string =>\r\n  args\r\n    .map((arg) => {\r\n      try {\r\n        return typeof arg === \"object\" ? JSON.stringify(arg) : arg;\r\n      } catch {\r\n        return arg;\r\n      }\r\n    })\r\n    .join(\", \");\r\nexport default class ModuleBase {\r\n  public scope: Raydium;\r\n  private disabled = false;\r\n  protected logger: Logger;\r\n\r\n  constructor({ scope, moduleName }: ModuleBaseProps) {\r\n    this.scope = scope;\r\n    this.logger = createLogger(moduleName);\r\n  }\r\n\r\n  protected createTxBuilder(feePayer?: PublicKey): TxBuilder {\r\n    this.scope.checkOwner();\r\n    return new TxBuilder({\r\n      connection: this.scope.connection,\r\n      feePayer: feePayer || this.scope.ownerPubKey,\r\n      cluster: this.scope.cluster,\r\n      owner: this.scope.owner,\r\n      blockhashCommitment: this.scope.blockhashCommitment,\r\n      loopMultiTxStatus: this.scope.loopMultiTxStatus,\r\n      api: this.scope.api,\r\n      signAllTransactions: this.scope.signAllTransactions,\r\n    });\r\n  }\r\n\r\n  public logDebug(...args: (string | number | Record<string, any>)[]): void {\r\n    this.logger.debug(joinMsg(args));\r\n  }\r\n\r\n  public logInfo(...args: (string | number | Record<string, any>)[]): void {\r\n    this.logger.info(joinMsg(args));\r\n  }\r\n\r\n  public logAndCreateError(...args: (string | number | Record<string, any>)[]): void {\r\n    const message = joinMsg(args);\r\n    throw new Error(message);\r\n  }\r\n\r\n  public checkDisabled(): void {\r\n    if (this.disabled || !this.scope) this.logAndCreateError(\"module not working\");\r\n  }\r\n}\r\n","import { Connection, Keypair, PublicKey, Signer, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { ReturnTypeMakeInstructions } from \"@/raydium/type\";\r\nimport { ApiV3PoolInfoConcentratedItem, ApiV3Token, ClmmKeys } from \"@/api/type\";\r\nimport {\r\n  InstructionType,\r\n  MEMO_PROGRAM_ID,\r\n  MEMO_PROGRAM_ID2,\r\n  METADATA_PROGRAM_ID,\r\n  RENT_PROGRAM_ID,\r\n  createLogger,\r\n  getATAAddress,\r\n  parseBigNumberish,\r\n} from \"@/common\";\r\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { bool, s32, struct, u128, u64, u8 } from \"@/marshmallow\";\r\nimport { ClmmPositionLayout, ObservationInfoLayout } from \"./layout\";\r\nimport {\r\n  ClmmPoolPersonalPosition,\r\n  ClosePositionExtInfo,\r\n  InitRewardExtInfo,\r\n  ManipulateLiquidityExtInfo,\r\n  OpenPositionFromBaseExtInfo,\r\n  OpenPositionFromLiquidityExtInfo,\r\n  ClmmLockAddress,\r\n} from \"./type\";\r\nimport {\r\n  getPdaExBitmapAccount,\r\n  getPdaLockPositionId,\r\n  getPdaMetadataKey,\r\n  getPdaObservationAccount,\r\n  getPdaOperationAccount,\r\n  getPdaPersonalPositionAddress,\r\n  getPdaPoolId,\r\n  getPdaPoolRewardVaulId,\r\n  getPdaPoolVaultId,\r\n  getPdaProtocolPositionAddress,\r\n  getPdaTickArrayAddress,\r\n  getPdaLockClPositionIdV2,\r\n  getPdaMintExAccount,\r\n} from \"./utils/pda\";\r\nimport { PoolUtils } from \"./utils/pool\";\r\nimport { TickUtils } from \"./utils/tick\";\r\nimport { ZERO } from \"./utils/constants\";\r\nObservationInfoLayout.span; // do not delete this line\r\n\r\nconst logger = createLogger(\"Raydium_Clmm\");\r\n\r\nconst anchorDataBuf = {\r\n  createPool: [233, 146, 209, 142, 207, 104, 64, 188],\r\n  initReward: [95, 135, 192, 196, 242, 129, 230, 68],\r\n  setRewardEmissions: [112, 52, 167, 75, 32, 201, 211, 137],\r\n  openPosition: [77, 184, 74, 214, 112, 86, 241, 199],\r\n  openPositionWithTokenEx: [77, 255, 174, 82, 125, 29, 201, 46],\r\n  closePosition: [123, 134, 81, 0, 49, 68, 98, 98],\r\n  increaseLiquidity: [133, 29, 89, 223, 69, 238, 176, 10],\r\n  decreaseLiquidity: [58, 127, 188, 62, 79, 82, 196, 96],\r\n  swap: [43, 4, 237, 11, 26, 201, 30, 98], // [248, 198, 158, 145, 225, 117, 135, 200],\r\n  collectReward: [18, 237, 166, 197, 34, 16, 213, 144],\r\n};\r\n\r\nconst lockInsDataBuf = [188, 37, 179, 131, 82, 150, 84, 73];\r\nconst lockHarvestInsDataBuf = [16, 72, 250, 198, 14, 162, 212, 19];\r\n\r\ninterface CreatePoolInstruction {\r\n  connection: Connection;\r\n  programId: PublicKey;\r\n  owner: PublicKey;\r\n  mintA: ApiV3Token;\r\n  mintB: ApiV3Token;\r\n  ammConfigId: PublicKey;\r\n  initialPriceX64: BN;\r\n  forerunCreate?: boolean;\r\n  extendMintAccount?: PublicKey[];\r\n}\r\n\r\nexport class ClmmInstrument {\r\n  static createPoolInstruction(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    poolCreator: PublicKey,\r\n    ammConfigId: PublicKey,\r\n    observationId: PublicKey,\r\n    mintA: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintProgramIdA: PublicKey,\r\n    mintB: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintProgramIdB: PublicKey,\r\n    exTickArrayBitmap: PublicKey,\r\n    sqrtPriceX64: BN,\r\n    extendMintAccount?: PublicKey[],\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u128(\"sqrtPriceX64\"), u64(\"zero\")]);\r\n\r\n    const keys = [\r\n      { pubkey: poolCreator, isSigner: true, isWritable: true },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: mintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintB, isSigner: false, isWritable: false },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n      { pubkey: observationId, isSigner: false, isWritable: true },\r\n      { pubkey: exTickArrayBitmap, isSigner: false, isWritable: true },\r\n      { pubkey: mintProgramIdA, isSigner: false, isWritable: false },\r\n      { pubkey: mintProgramIdB, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      ...(extendMintAccount?.map((k) => ({ pubkey: k, isSigner: false, isWritable: false })) || []),\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        sqrtPriceX64,\r\n        zero: ZERO,\r\n      },\r\n      data,\r\n    );\r\n    const aData = Buffer.from([...anchorDataBuf.createPool, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static async createPoolInstructions(props: CreatePoolInstruction): Promise<\r\n    ReturnTypeMakeInstructions<{\r\n      poolId: PublicKey;\r\n      observationId: PublicKey;\r\n      exBitmapAccount: PublicKey;\r\n      mintAVault: PublicKey;\r\n      mintBVault: PublicKey;\r\n    }>\r\n  > {\r\n    const { programId, owner, mintA, mintB, ammConfigId, initialPriceX64, extendMintAccount } = props;\r\n    const [mintAAddress, mintBAddress] = [new PublicKey(mintA.address), new PublicKey(mintB.address)];\r\n\r\n    const { publicKey: poolId } = getPdaPoolId(programId, ammConfigId, mintAAddress, mintBAddress);\r\n    const { publicKey: observationId } = getPdaObservationAccount(programId, poolId);\r\n    const { publicKey: mintAVault } = getPdaPoolVaultId(programId, poolId, mintAAddress);\r\n    const { publicKey: mintBVault } = getPdaPoolVaultId(programId, poolId, mintBAddress);\r\n    const exBitmapAccount = getPdaExBitmapAccount(programId, poolId).publicKey;\r\n\r\n    const ins = [\r\n      this.createPoolInstruction(\r\n        programId,\r\n        poolId,\r\n        owner,\r\n        ammConfigId,\r\n        observationId,\r\n        mintAAddress,\r\n        mintAVault,\r\n        new PublicKey(mintA.programId || TOKEN_PROGRAM_ID),\r\n        mintBAddress,\r\n        mintBVault,\r\n        new PublicKey(mintB.programId || TOKEN_PROGRAM_ID),\r\n        exBitmapAccount,\r\n        initialPriceX64,\r\n        extendMintAccount,\r\n      ),\r\n    ];\r\n\r\n    return {\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.CreateAccount, InstructionType.ClmmCreatePool],\r\n      address: { poolId, observationId, exBitmapAccount, mintAVault, mintBVault },\r\n      lookupTableAddress: [],\r\n    };\r\n  }\r\n\r\n  static openPositionFromLiquidityInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    metadataAccount: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    personalPosition: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    tokenVaultA: PublicKey,\r\n    tokenVaultB: PublicKey,\r\n    tokenMintA: PublicKey,\r\n    tokenMintB: PublicKey,\r\n\r\n    tickLowerIndex: number,\r\n    tickUpperIndex: number,\r\n    tickArrayLowerStartIndex: number,\r\n    tickArrayUpperStartIndex: number,\r\n    liquidity: BN,\r\n    amountMaxA: BN,\r\n    amountMaxB: BN,\r\n    withMetadata: \"create\" | \"no-create\",\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      s32(\"tickLowerIndex\"),\r\n      s32(\"tickUpperIndex\"),\r\n      s32(\"tickArrayLowerStartIndex\"),\r\n      s32(\"tickArrayUpperStartIndex\"),\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      bool(\"withMetadata\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: metadataAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\r\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        tickLowerIndex,\r\n        tickUpperIndex,\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n        liquidity,\r\n        amountMaxA,\r\n        amountMaxB,\r\n        withMetadata: withMetadata === \"create\",\r\n        baseFlag: false,\r\n        optionBaseFlag: 0,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.openPosition, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static openPositionFromLiquidityInstruction22(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    personalPosition: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    tokenVaultA: PublicKey,\r\n    tokenVaultB: PublicKey,\r\n    tokenMintA: PublicKey,\r\n    tokenMintB: PublicKey,\r\n\r\n    tickLowerIndex: number,\r\n    tickUpperIndex: number,\r\n    tickArrayLowerStartIndex: number,\r\n    tickArrayUpperStartIndex: number,\r\n    liquidity: BN,\r\n    amountMaxA: BN,\r\n    amountMaxB: BN,\r\n    withMetadata: \"create\" | \"no-create\",\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      s32(\"tickLowerIndex\"),\r\n      s32(\"tickUpperIndex\"),\r\n      s32(\"tickArrayLowerStartIndex\"),\r\n      s32(\"tickArrayUpperStartIndex\"),\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      bool(\"withMetadata\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\r\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        tickLowerIndex,\r\n        tickUpperIndex,\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n        liquidity,\r\n        amountMaxA,\r\n        amountMaxB,\r\n        withMetadata: withMetadata === \"create\",\r\n        baseFlag: false,\r\n        optionBaseFlag: 0,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.openPositionWithTokenEx, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static async openPositionInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    amountMaxA,\r\n    amountMaxB,\r\n    withMetadata,\r\n    getEphemeralSigners,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      feePayer: PublicKey;\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    amountMaxA: BN;\r\n    amountMaxB: BN;\r\n    withMetadata: \"create\" | \"no-create\";\r\n    getEphemeralSigners?: (k: number) => any;\r\n    nft2022?: boolean;\r\n  }): Promise<ReturnTypeMakeInstructions> {\r\n    const signers: Signer[] = [];\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    let nftMintAccount;\r\n    if (getEphemeralSigners) {\r\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\r\n    } else {\r\n      const _k = Keypair.generate();\r\n      signers.push(_k);\r\n      nftMintAccount = _k.publicKey;\r\n    }\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\r\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\r\n\r\n    const ins = nft2022\r\n      ? this.openPositionFromLiquidityInstruction22(\r\n          programId,\r\n          ownerInfo.feePayer,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n          liquidity,\r\n          amountMaxA,\r\n          amountMaxB,\r\n          withMetadata,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        )\r\n      : this.openPositionFromLiquidityInstruction(\r\n          programId,\r\n          ownerInfo.feePayer,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          metadataAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n          liquidity,\r\n          amountMaxA,\r\n          amountMaxB,\r\n          withMetadata,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        );\r\n\r\n    return {\r\n      signers,\r\n      instructions: [ins],\r\n      instructionTypes: [InstructionType.ClmmOpenPosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n      address: {\r\n        nftMint: nftMintAccount,\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        metadataAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n    };\r\n  }\r\n\r\n  static async openPositionFromBaseInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    base,\r\n    baseAmount,\r\n    otherAmountMax,\r\n    withMetadata,\r\n    getEphemeralSigners,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      feePayer: PublicKey;\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    tickLower: number;\r\n    tickUpper: number;\r\n\r\n    base: \"MintA\" | \"MintB\";\r\n    baseAmount: BN;\r\n\r\n    otherAmountMax: BN;\r\n    withMetadata: \"create\" | \"no-create\";\r\n    getEphemeralSigners?: (k: number) => any;\r\n    nft2022?: boolean;\r\n  }): Promise<ReturnTypeMakeInstructions<OpenPositionFromBaseExtInfo>> {\r\n    const signers: Signer[] = [];\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    let nftMintAccount: PublicKey;\r\n    if (getEphemeralSigners) {\r\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\r\n    } else {\r\n      const _k = Keypair.generate();\r\n      signers.push(_k);\r\n      nftMintAccount = _k.publicKey;\r\n    }\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\r\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\r\n\r\n    const ins = nft2022\r\n      ? this.openPositionFromBaseInstruction22(\r\n          programId,\r\n          ownerInfo.feePayer,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n\r\n          withMetadata,\r\n\r\n          base,\r\n          baseAmount,\r\n\r\n          otherAmountMax,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        )\r\n      : this.openPositionFromBaseInstruction(\r\n          programId,\r\n          ownerInfo.feePayer,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          metadataAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n\r\n          withMetadata,\r\n\r\n          base,\r\n          baseAmount,\r\n\r\n          otherAmountMax,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        );\r\n\r\n    return {\r\n      address: {\r\n        nftMint: nftMintAccount,\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        metadataAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      instructions: [ins],\r\n      signers,\r\n      instructionTypes: [InstructionType.ClmmOpenPosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static openPositionFromBaseInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    metadataAccount: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    personalPosition: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    tokenVaultA: PublicKey,\r\n    tokenVaultB: PublicKey,\r\n    tokenMintA: PublicKey,\r\n    tokenMintB: PublicKey,\r\n\r\n    tickLowerIndex: number,\r\n    tickUpperIndex: number,\r\n    tickArrayLowerStartIndex: number,\r\n    tickArrayUpperStartIndex: number,\r\n\r\n    withMetadata: \"create\" | \"no-create\",\r\n    base: \"MintA\" | \"MintB\",\r\n    baseAmount: BN,\r\n\r\n    otherAmountMax: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      s32(\"tickLowerIndex\"),\r\n      s32(\"tickUpperIndex\"),\r\n      s32(\"tickArrayLowerStartIndex\"),\r\n      s32(\"tickArrayUpperStartIndex\"),\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      bool(\"withMetadata\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: metadataAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\r\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        tickLowerIndex,\r\n        tickUpperIndex,\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n        liquidity: new BN(0),\r\n        amountMaxA: base === \"MintA\" ? baseAmount : otherAmountMax,\r\n        amountMaxB: base === \"MintA\" ? otherAmountMax : baseAmount,\r\n        withMetadata: withMetadata === \"create\",\r\n        baseFlag: base === \"MintA\",\r\n        optionBaseFlag: 1,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.openPosition, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static openPositionFromBaseInstruction22(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    personalPosition: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    tokenVaultA: PublicKey,\r\n    tokenVaultB: PublicKey,\r\n    tokenMintA: PublicKey,\r\n    tokenMintB: PublicKey,\r\n\r\n    tickLowerIndex: number,\r\n    tickUpperIndex: number,\r\n    tickArrayLowerStartIndex: number,\r\n    tickArrayUpperStartIndex: number,\r\n\r\n    withMetadata: \"create\" | \"no-create\",\r\n    base: \"MintA\" | \"MintB\",\r\n    baseAmount: BN,\r\n\r\n    otherAmountMax: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      s32(\"tickLowerIndex\"),\r\n      s32(\"tickUpperIndex\"),\r\n      s32(\"tickArrayLowerStartIndex\"),\r\n      s32(\"tickArrayUpperStartIndex\"),\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      bool(\"withMetadata\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\r\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        tickLowerIndex,\r\n        tickUpperIndex,\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n        liquidity: new BN(0),\r\n        amountMaxA: base === \"MintA\" ? baseAmount : otherAmountMax,\r\n        amountMaxB: base === \"MintA\" ? otherAmountMax : baseAmount,\r\n        withMetadata: withMetadata === \"create\",\r\n        baseFlag: base === \"MintA\",\r\n        optionBaseFlag: 1,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.openPositionWithTokenEx, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static async openPositionFromLiquidityInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    amountMaxA,\r\n    amountMaxB,\r\n    withMetadata,\r\n    getEphemeralSigners,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    amountMaxA: BN;\r\n    amountMaxB: BN;\r\n    withMetadata: \"create\" | \"no-create\";\r\n    getEphemeralSigners?: (k: number) => any;\r\n    nft2022?: boolean;\r\n  }): Promise<ReturnTypeMakeInstructions<OpenPositionFromLiquidityExtInfo[\"address\"]>> {\r\n    let nftMintAccount: PublicKey;\r\n    const signers: Keypair[] = [];\r\n    if (getEphemeralSigners) {\r\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\r\n    } else {\r\n      const _k = Keypair.generate();\r\n      signers.push(_k);\r\n      nftMintAccount = _k.publicKey;\r\n    }\r\n\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\r\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\r\n\r\n    const ins = nft2022\r\n      ? this.openPositionFromLiquidityInstruction22(\r\n          programId,\r\n          ownerInfo.wallet,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolKeys.mintA.address),\r\n          new PublicKey(poolKeys.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n          liquidity,\r\n          amountMaxA,\r\n          amountMaxB,\r\n          withMetadata,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        )\r\n      : this.openPositionFromLiquidityInstruction(\r\n          programId,\r\n          ownerInfo.wallet,\r\n          id,\r\n          ownerInfo.wallet,\r\n          nftMintAccount,\r\n          positionNftAccount,\r\n          metadataAccount,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          personalPosition,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolKeys.mintA.address),\r\n          new PublicKey(poolKeys.mintB.address),\r\n\r\n          tickLower,\r\n          tickUpper,\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n          liquidity,\r\n          amountMaxA,\r\n          amountMaxB,\r\n          withMetadata,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        );\r\n\r\n    return {\r\n      address: {\r\n        nftMint: nftMintAccount,\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        metadataAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      instructions: [ins],\r\n      signers,\r\n      instructionTypes: [InstructionType.ClmmOpenPosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static closePositionInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n    nft2022?: boolean,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([]);\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftMint, isSigner: false, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: nft2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode({}, data);\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.closePosition, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static closePositionInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    ownerPosition,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n    };\r\n    nft2022?: boolean;\r\n  }): ReturnTypeMakeInstructions<ClosePositionExtInfo[\"address\"]> {\r\n    const programId = new PublicKey(poolInfo.programId);\r\n    // const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\r\n    const positionNftAccount = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID).publicKey\r\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID).publicKey;\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\r\n\r\n    const ins: TransactionInstruction[] = [];\r\n    ins.push(\r\n      this.closePositionInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        ownerPosition.nftMint,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        nft2022,\r\n      ),\r\n    );\r\n\r\n    return {\r\n      address: {\r\n        positionNftAccount,\r\n        personalPosition,\r\n      },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmClosePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static increasePositionFromLiquidityInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n\r\n    poolId: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintMintA: PublicKey,\r\n    mintMintB: PublicKey,\r\n\r\n    liquidity: BN,\r\n    amountMaxA: BN,\r\n    amountMaxB: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        liquidity,\r\n        amountMaxA,\r\n        amountMaxB,\r\n        optionBaseFlag: 0,\r\n        baseFlag: false,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.increaseLiquidity, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static increasePositionFromLiquidityInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerPosition,\r\n    ownerInfo,\r\n    liquidity,\r\n    amountMaxA,\r\n    amountMaxB,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    liquidity: BN;\r\n    amountMaxA: BN;\r\n    amountMaxB: BN;\r\n    nft2022?: boolean;\r\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickLower,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickUpper,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\r\n\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      programId,\r\n      id,\r\n      ownerPosition.tickLower,\r\n      ownerPosition.tickUpper,\r\n    );\r\n\r\n    const ins = this.increasePositionFromLiquidityInstruction(\r\n      programId,\r\n      ownerInfo.wallet,\r\n      positionNftAccount,\r\n      personalPosition,\r\n      id,\r\n      protocolPosition,\r\n      tickArrayLower,\r\n      tickArrayUpper,\r\n      ownerInfo.tokenAccountA,\r\n      ownerInfo.tokenAccountB,\r\n      new PublicKey(poolKeys.vault.A),\r\n      new PublicKey(poolKeys.vault.B),\r\n      new PublicKey(poolInfo.mintA.address),\r\n      new PublicKey(poolInfo.mintB.address),\r\n\r\n      liquidity,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n      ])\r\n        ? getPdaExBitmapAccount(programId, id).publicKey\r\n        : undefined,\r\n    );\r\n\r\n    return {\r\n      address: {\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      signers: [],\r\n      instructions: [ins],\r\n      instructionTypes: [InstructionType.ClmmIncreasePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static increasePositionFromBaseInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerPosition,\r\n    ownerInfo,\r\n    base,\r\n    baseAmount,\r\n    otherAmountMax,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPoolPersonalPosition;\r\n\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    base: \"MintA\" | \"MintB\";\r\n    baseAmount: BN;\r\n\r\n    otherAmountMax: BN;\r\n    nft2022?: boolean;\r\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickLower,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickUpper,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\r\n\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      programId,\r\n      id,\r\n      ownerPosition.tickLower,\r\n      ownerPosition.tickUpper,\r\n    );\r\n\r\n    return {\r\n      address: {\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      instructions: [\r\n        this.increasePositionFromBaseInstruction(\r\n          programId,\r\n          ownerInfo.wallet,\r\n          positionNftAccount,\r\n          personalPosition,\r\n          id,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          base,\r\n          baseAmount,\r\n\r\n          otherAmountMax,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        ),\r\n      ],\r\n      signers: [],\r\n      instructionTypes: [InstructionType.ClmmIncreasePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static increasePositionFromBaseInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n\r\n    poolId: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintMintA: PublicKey,\r\n    mintMintB: PublicKey,\r\n\r\n    base: \"MintA\" | \"MintB\",\r\n    baseAmount: BN,\r\n\r\n    otherAmountMax: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        liquidity: new BN(0),\r\n        amountMaxA: base === \"MintA\" ? baseAmount : otherAmountMax,\r\n        amountMaxB: base === \"MintA\" ? otherAmountMax : baseAmount,\r\n        baseFlag: base === \"MintA\",\r\n        optionBaseFlag: 1,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.increaseLiquidity, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static decreaseLiquidityInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n\r\n    poolId: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintMintA: PublicKey,\r\n    mintMintB: PublicKey,\r\n    rewardAccounts: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[],\r\n\r\n    liquidity: BN,\r\n    amountMinA: BN,\r\n    amountMinB: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u128(\"liquidity\"), u64(\"amountMinA\"), u64(\"amountMinB\")]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n      ...rewardAccounts\r\n        .map((i) => [\r\n          { pubkey: i.poolRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.ownerRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.rewardMint, isSigner: false, isWritable: false },\r\n        ])\r\n        .flat(),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        liquidity,\r\n        amountMinA,\r\n        amountMinB,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.decreaseLiquidity, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static decreaseLiquidityInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerPosition,\r\n    ownerInfo,\r\n    liquidity,\r\n    amountMinA,\r\n    amountMinB,\r\n    programId,\r\n    nft2022,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n      rewardAccounts: PublicKey[];\r\n    };\r\n\r\n    liquidity: BN;\r\n    amountMinA: BN;\r\n    amountMinB: BN;\r\n    programId?: PublicKey;\r\n    nft2022?: boolean;\r\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\r\n    const [poolProgramId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickLower,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickUpper,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(poolProgramId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(poolProgramId, id, tickArrayUpperStartIndex);\r\n    const { publicKey: positionNftAccount } = nft2022\r\n      ? getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_2022_PROGRAM_ID)\r\n      : getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, programId);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(poolProgramId, ownerPosition.nftMint);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      poolProgramId,\r\n      id,\r\n      ownerPosition.tickLower,\r\n      ownerPosition.tickUpper,\r\n    );\r\n\r\n    const rewardAccounts: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[] = [];\r\n    for (let i = 0; i < poolInfo.rewardDefaultInfos.length; i++) {\r\n      rewardAccounts.push({\r\n        poolRewardVault: new PublicKey(poolKeys.rewardInfos[i].vault),\r\n        ownerRewardVault: ownerInfo.rewardAccounts[i],\r\n        rewardMint: new PublicKey(poolInfo.rewardDefaultInfos[i].mint.address),\r\n      });\r\n    }\r\n\r\n    const ins: TransactionInstruction[] = [];\r\n    const decreaseIns = this.decreaseLiquidityInstruction(\r\n      poolProgramId,\r\n      ownerInfo.wallet,\r\n      positionNftAccount,\r\n      personalPosition,\r\n      id,\r\n      protocolPosition,\r\n      tickArrayLower,\r\n      tickArrayUpper,\r\n      ownerInfo.tokenAccountA,\r\n      ownerInfo.tokenAccountB,\r\n      new PublicKey(poolKeys.vault.A),\r\n      new PublicKey(poolKeys.vault.B),\r\n      new PublicKey(poolInfo.mintA.address),\r\n      new PublicKey(poolInfo.mintB.address),\r\n      rewardAccounts,\r\n\r\n      liquidity,\r\n      amountMinA,\r\n      amountMinB,\r\n      PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n      ])\r\n        ? getPdaExBitmapAccount(poolProgramId, id).publicKey\r\n        : undefined,\r\n    );\r\n    ins.push(decreaseIns);\r\n\r\n    return {\r\n      address: {\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmDecreasePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static swapInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    ammConfigId: PublicKey,\r\n    inputTokenAccount: PublicKey,\r\n    outputTokenAccount: PublicKey,\r\n    inputVault: PublicKey,\r\n    outputVault: PublicKey,\r\n    inputMint: PublicKey,\r\n    outputMint: PublicKey,\r\n    tickArray: PublicKey[],\r\n    observationId: PublicKey,\r\n\r\n    amount: BN,\r\n    otherAmountThreshold: BN,\r\n    sqrtPriceLimitX64: BN,\r\n    isBaseInput: boolean,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      u64(\"amount\"),\r\n      u64(\"otherAmountThreshold\"),\r\n      u128(\"sqrtPriceLimitX64\"),\r\n      bool(\"isBaseInput\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n      ...tickArray.map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: false },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: inputTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: outputTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: inputVault, isSigner: false, isWritable: true },\r\n      { pubkey: outputVault, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: observationId, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: inputMint, isSigner: false, isWritable: false },\r\n      { pubkey: outputMint, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        amount,\r\n        otherAmountThreshold,\r\n        sqrtPriceLimitX64,\r\n        isBaseInput,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.swap, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static makeSwapBaseInInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    observationId,\r\n    ownerInfo,\r\n    inputMint,\r\n    amountIn,\r\n    amountOutMin,\r\n    sqrtPriceLimitX64,\r\n    remainingAccounts,\r\n  }: {\r\n    poolInfo: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\">;\r\n    poolKeys: ClmmKeys;\r\n    observationId: PublicKey;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    inputMint: PublicKey;\r\n\r\n    amountIn: BN;\r\n    amountOutMin: BN;\r\n    sqrtPriceLimitX64: BN;\r\n\r\n    remainingAccounts: PublicKey[];\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const [mintAVault, mintBVault] = [new PublicKey(poolKeys.vault.A), new PublicKey(poolKeys.vault.B)];\r\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\r\n\r\n    const isInputMintA = poolInfo.mintA.address === inputMint.toString();\r\n\r\n    const ins = [\r\n      this.swapInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n\r\n        id,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        isInputMintA ? ownerInfo.tokenAccountA : ownerInfo.tokenAccountB,\r\n        isInputMintA ? ownerInfo.tokenAccountB : ownerInfo.tokenAccountA,\r\n\r\n        isInputMintA ? mintAVault : mintBVault,\r\n        isInputMintA ? mintBVault : mintAVault,\r\n\r\n        isInputMintA ? mintA : mintB,\r\n        isInputMintA ? mintB : mintA,\r\n\r\n        remainingAccounts,\r\n        observationId,\r\n        amountIn,\r\n        amountOutMin,\r\n        sqrtPriceLimitX64,\r\n        true,\r\n        getPdaExBitmapAccount(programId, id).publicKey,\r\n      ),\r\n    ];\r\n    return {\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmSwapBaseIn],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n      address: {},\r\n    };\r\n  }\r\n\r\n  static makeSwapBaseOutInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    observationId,\r\n    ownerInfo,\r\n    outputMint,\r\n    amountOut,\r\n    amountInMax,\r\n    sqrtPriceLimitX64,\r\n    remainingAccounts,\r\n  }: {\r\n    poolInfo: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\">;\r\n    poolKeys: ClmmKeys;\r\n    observationId: PublicKey;\r\n\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    outputMint: PublicKey;\r\n\r\n    amountOut: BN;\r\n    amountInMax: BN;\r\n    sqrtPriceLimitX64: BN;\r\n\r\n    remainingAccounts: PublicKey[];\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const [mintAVault, mintBVault] = [new PublicKey(poolKeys.vault.A), new PublicKey(poolKeys.vault.B)];\r\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\r\n    const isInputMintA = poolInfo.mintA.address === outputMint.toBase58();\r\n    const ins = [\r\n      this.swapInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n\r\n        id,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        isInputMintA ? ownerInfo.tokenAccountB : ownerInfo.tokenAccountA,\r\n        isInputMintA ? ownerInfo.tokenAccountA : ownerInfo.tokenAccountB,\r\n\r\n        isInputMintA ? mintBVault : mintAVault,\r\n        isInputMintA ? mintAVault : mintBVault,\r\n\r\n        isInputMintA ? mintB : mintA,\r\n        isInputMintA ? mintA : mintB,\r\n\r\n        remainingAccounts,\r\n        observationId,\r\n        amountOut,\r\n        amountInMax,\r\n        sqrtPriceLimitX64,\r\n        false,\r\n        getPdaExBitmapAccount(programId, id).publicKey,\r\n      ),\r\n    ];\r\n    return {\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmSwapBaseOut],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n      address: {},\r\n    };\r\n  }\r\n\r\n  static initRewardInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    operationId: PublicKey,\r\n    ammConfigId: PublicKey,\r\n\r\n    ownerTokenAccount: PublicKey,\r\n    rewardProgramId: PublicKey,\r\n    rewardMint: PublicKey,\r\n    rewardVault: PublicKey,\r\n\r\n    openTime: number,\r\n    endTime: number,\r\n    emissionsPerSecondX64: BN,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u64(\"openTime\"), u64(\"endTime\"), u128(\"emissionsPerSecondX64\")]);\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: operationId, isSigner: false, isWritable: true },\r\n      { pubkey: rewardMint, isSigner: false, isWritable: false },\r\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: rewardProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        openTime: parseBigNumberish(openTime),\r\n        endTime: parseBigNumberish(endTime),\r\n        emissionsPerSecondX64,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.initReward, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static initRewardInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    rewardInfo,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccount: PublicKey;\r\n    };\r\n    rewardInfo: {\r\n      programId: PublicKey;\r\n      mint: PublicKey;\r\n      openTime: number;\r\n      endTime: number;\r\n      emissionsPerSecondX64: BN;\r\n    };\r\n  }): ReturnTypeMakeInstructions<InitRewardExtInfo[\"address\"]> {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const poolRewardVault = getPdaPoolRewardVaulId(programId, id, rewardInfo.mint).publicKey;\r\n    const operationId = getPdaOperationAccount(programId).publicKey;\r\n    const ins = [\r\n      this.initRewardInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        id,\r\n        operationId,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        ownerInfo.tokenAccount,\r\n        rewardInfo.programId,\r\n        rewardInfo.mint,\r\n        poolRewardVault,\r\n\r\n        rewardInfo.openTime,\r\n        rewardInfo.endTime,\r\n        rewardInfo.emissionsPerSecondX64,\r\n      ),\r\n    ];\r\n    return {\r\n      address: { poolRewardVault, operationId },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmInitReward],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static setRewardInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    operationId: PublicKey,\r\n    ammConfigId: PublicKey,\r\n\r\n    ownerTokenAccount: PublicKey,\r\n    rewardVault: PublicKey,\r\n    rewardMint: PublicKey,\r\n\r\n    rewardIndex: number,\r\n    openTime: number,\r\n    endTime: number,\r\n    emissionsPerSecondX64: BN,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u8(\"rewardIndex\"), u128(\"emissionsPerSecondX64\"), u64(\"openTime\"), u64(\"endTime\")]);\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: operationId, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: rewardMint, isSigner: false, isWritable: true },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        rewardIndex,\r\n        emissionsPerSecondX64,\r\n        openTime: parseBigNumberish(openTime),\r\n        endTime: parseBigNumberish(endTime),\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.setRewardEmissions, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static setRewardInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    rewardInfo,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccount: PublicKey;\r\n    };\r\n    rewardInfo: {\r\n      mint: PublicKey;\r\n      openTime: number;\r\n      endTime: number;\r\n      emissionsPerSecondX64: BN;\r\n    };\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    let rewardIndex: number | undefined;\r\n    let rewardVault: PublicKey | undefined;\r\n    let rewardMint: PublicKey | undefined;\r\n    for (let index = 0; index < poolInfo.rewardDefaultInfos.length; index++)\r\n      if (poolInfo.rewardDefaultInfos[index].mint.address === rewardInfo.mint.toString()) {\r\n        rewardIndex = index;\r\n        rewardVault = new PublicKey(poolKeys.rewardInfos[index].vault);\r\n        rewardMint = new PublicKey(poolKeys.rewardInfos[index].mint.address);\r\n      }\r\n\r\n    if (rewardIndex === undefined || rewardVault === undefined)\r\n      logger.logWithError(\"reward mint check error\", \"no reward mint\", poolInfo.rewardDefaultInfos);\r\n\r\n    const operationId = getPdaOperationAccount(programId).publicKey;\r\n\r\n    const ins = [\r\n      this.setRewardInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        id,\r\n        operationId,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        ownerInfo.tokenAccount,\r\n        rewardVault!,\r\n        rewardMint!,\r\n\r\n        rewardIndex!,\r\n        rewardInfo.openTime,\r\n        rewardInfo.endTime,\r\n        rewardInfo.emissionsPerSecondX64,\r\n      ),\r\n    ];\r\n    return {\r\n      address: { rewardVault: rewardVault!, operationId },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmSetReward],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static collectRewardInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n\r\n    ownerTokenAccount: PublicKey,\r\n    rewardVault: PublicKey,\r\n    rewardMint: PublicKey,\r\n\r\n    rewardIndex: number,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u8(\"rewardIndex\")]);\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\r\n      { pubkey: rewardMint, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        rewardIndex,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.collectReward, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static collectRewardInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    rewardMint,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccount: PublicKey;\r\n    };\r\n    rewardMint: PublicKey;\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    let rewardIndex: number | undefined;\r\n    let rewardVault: PublicKey | undefined;\r\n    for (let index = 0; index < poolInfo.rewardDefaultInfos.length; index++)\r\n      if (poolInfo.rewardDefaultInfos[index].mint.address === rewardMint.toString()) {\r\n        rewardIndex = index;\r\n        rewardVault = new PublicKey(poolKeys.rewardInfos[index].vault);\r\n      }\r\n\r\n    if (rewardIndex === undefined || rewardVault === undefined)\r\n      logger.logWithError(\"reward mint check error\", \"no reward mint\", poolInfo.rewardDefaultInfos);\r\n\r\n    const ins = [\r\n      this.collectRewardInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        id,\r\n\r\n        ownerInfo.tokenAccount,\r\n        rewardVault!,\r\n        rewardMint,\r\n\r\n        rewardIndex!,\r\n      ),\r\n    ];\r\n    return {\r\n      address: { rewardVault: rewardVault! },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmCollectReward],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static async makeLockPositions({\r\n    programId,\r\n    authProgramId,\r\n    poolProgramId,\r\n    payer,\r\n    wallet,\r\n    nftMint,\r\n    nft2022,\r\n    getEphemeralSigners,\r\n  }: {\r\n    programId: PublicKey;\r\n    authProgramId: PublicKey;\r\n    poolProgramId: PublicKey;\r\n    wallet: PublicKey;\r\n    payer: PublicKey;\r\n    nftMint: PublicKey;\r\n    nft2022?: boolean;\r\n    getEphemeralSigners?: (k: number) => any;\r\n  }): Promise<ReturnTypeMakeInstructions<ClmmLockAddress>> {\r\n    const signers: Signer[] = [];\r\n    let lockNftMint: PublicKey;\r\n    if (getEphemeralSigners) {\r\n      lockNftMint = new PublicKey((await getEphemeralSigners(1))[0]);\r\n    } else {\r\n      const _k = Keypair.generate();\r\n      signers.push(_k);\r\n      lockNftMint = _k.publicKey;\r\n    }\r\n\r\n    const positionNftAccount = nft2022\r\n      ? getATAAddress(wallet, nftMint, TOKEN_2022_PROGRAM_ID).publicKey\r\n      : getATAAddress(wallet, nftMint, TOKEN_PROGRAM_ID).publicKey;\r\n    const { publicKey: positionId } = getPdaPersonalPositionAddress(poolProgramId, nftMint);\r\n    const lockPositionId = getPdaLockClPositionIdV2(programId, lockNftMint).publicKey;\r\n    const lockNftAccount = getATAAddress(wallet, lockNftMint, TOKEN_PROGRAM_ID).publicKey;\r\n    const metadataAccount = getPdaMetadataKey(lockNftMint).publicKey;\r\n\r\n    const ins = ClmmInstrument.lockPositionInstructionV2({\r\n      programId,\r\n      auth: authProgramId,\r\n      payer,\r\n      positionOwner: wallet,\r\n      lockOwner: wallet,\r\n      positionNftAccount,\r\n      positionId,\r\n      lockPositionId,\r\n      lockNftMint,\r\n      lockNftAccount,\r\n      metadataAccount,\r\n      withMetadata: true,\r\n      nft2022,\r\n\r\n      positionNftMint: nftMint,\r\n      authPositionNftAccount: getATAAddress(authProgramId, nftMint, nft2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID)\r\n        .publicKey,\r\n      positionNftProgram: nft2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID,\r\n    });\r\n\r\n    return {\r\n      address: {\r\n        positionId,\r\n        lockPositionId,\r\n        lockNftAccount,\r\n        lockNftMint,\r\n        positionNftAccount,\r\n        metadataAccount,\r\n      },\r\n      instructions: [ins],\r\n      signers,\r\n      instructionTypes: [InstructionType.ClmmLockPosition],\r\n      lookupTableAddress: [],\r\n    };\r\n  }\r\n\r\n  static lockPositionInstructionV2({\r\n    programId,\r\n    auth,\r\n    payer,\r\n    positionOwner,\r\n    lockOwner,\r\n    positionNftAccount,\r\n    positionId,\r\n    positionNftMint,\r\n    authPositionNftAccount,\r\n    positionNftProgram,\r\n    lockPositionId,\r\n    lockNftMint,\r\n    lockNftAccount,\r\n    metadataAccount,\r\n    withMetadata,\r\n  }: {\r\n    programId: PublicKey;\r\n    auth: PublicKey;\r\n    payer: PublicKey;\r\n    positionOwner: PublicKey;\r\n    lockOwner: PublicKey;\r\n    positionNftAccount: PublicKey;\r\n    positionId: PublicKey;\r\n    positionNftMint: PublicKey;\r\n    authPositionNftAccount: PublicKey;\r\n    positionNftProgram: PublicKey;\r\n    lockPositionId: PublicKey;\r\n    lockNftMint: PublicKey;\r\n    lockNftAccount: PublicKey;\r\n    metadataAccount: PublicKey;\r\n    withMetadata: boolean;\r\n    nft2022?: boolean;\r\n  }): TransactionInstruction {\r\n    const keys = [\r\n      { pubkey: auth, isSigner: false, isWritable: false },\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionOwner, isSigner: true, isWritable: true },\r\n      { pubkey: lockOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: positionId, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: false, isWritable: true },\r\n      { pubkey: authPositionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: lockPositionId, isSigner: false, isWritable: true },\r\n      { pubkey: lockNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: lockNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: metadataAccount, isSigner: false, isWritable: true },\r\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftProgram, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    ];\r\n    const dataLayout = struct([bool(\"withMetadata\")]);\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        withMetadata,\r\n      },\r\n      data,\r\n    );\r\n    const aData = Buffer.from([...lockInsDataBuf, ...data]);\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static lockPositionInstruction({\r\n    programId,\r\n    authProgramId,\r\n    poolProgramId,\r\n    owner,\r\n    positionNft,\r\n  }: {\r\n    programId: PublicKey;\r\n    authProgramId: PublicKey;\r\n    poolProgramId: PublicKey;\r\n    owner: PublicKey;\r\n    positionNft: PublicKey;\r\n  }): TransactionInstruction {\r\n    const { publicKey: nftAccount } = getATAAddress(owner, positionNft, TOKEN_PROGRAM_ID);\r\n    const { publicKey: positionId } = getPdaPersonalPositionAddress(poolProgramId, positionNft);\r\n\r\n    const keys = [\r\n      { pubkey: authProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: owner, isSigner: true, isWritable: false },\r\n      { pubkey: nftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: positionId, isSigner: false, isWritable: false },\r\n      { pubkey: getPdaLockPositionId(programId, positionId).publicKey, isSigner: false, isWritable: true },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    ];\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: Buffer.from(lockInsDataBuf),\r\n    });\r\n  }\r\n\r\n  static harvestLockPositionInstruction(props: {\r\n    poolKeys: ClmmKeys;\r\n    programId: PublicKey;\r\n    authProgramId: PublicKey;\r\n    ownerPosition: ClmmPositionLayout;\r\n    owner: PublicKey;\r\n    ownerRewardAccounts: PublicKey[];\r\n    userVaultA: PublicKey;\r\n    userVaultB: PublicKey;\r\n  }): TransactionInstruction {\r\n    const [poolProgramId, poolId] = [new PublicKey(props.poolKeys.programId), new PublicKey(props.poolKeys.id)];\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      props.ownerPosition.tickLower,\r\n      props.poolKeys.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      props.ownerPosition.tickUpper,\r\n      props.poolKeys.config.tickSpacing,\r\n    );\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(poolProgramId, poolId, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(poolProgramId, poolId, tickArrayUpperStartIndex);\r\n    const { publicKey: nftAccount } = getATAAddress(props.owner, props.ownerPosition.nftMint, TOKEN_PROGRAM_ID);\r\n    const { publicKey: positionId } = getPdaPersonalPositionAddress(poolProgramId, props.ownerPosition.nftMint);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      poolProgramId,\r\n      poolId,\r\n      props.ownerPosition.tickLower,\r\n      props.ownerPosition.tickUpper,\r\n    );\r\n\r\n    const rewardAccounts: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[] = [];\r\n\r\n    for (let i = 0; i < props.poolKeys.rewardInfos.length; i++) {\r\n      rewardAccounts.push({\r\n        poolRewardVault: new PublicKey(props.poolKeys.rewardInfos[i].vault),\r\n        ownerRewardVault: props.ownerRewardAccounts[i],\r\n        rewardMint: new PublicKey(props.poolKeys.rewardInfos[i].mint.address),\r\n      });\r\n    }\r\n\r\n    const remainingAccounts = [\r\n      ...rewardAccounts\r\n        .map((i) => [\r\n          { pubkey: i.poolRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.ownerRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.rewardMint, isSigner: false, isWritable: false },\r\n        ])\r\n        .flat(),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: props.authProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: getPdaLockPositionId(props.programId, positionId).publicKey, isSigner: false, isWritable: false },\r\n      { pubkey: poolProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: props.owner, isSigner: true, isWritable: false },\r\n      { pubkey: nftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: positionId, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: new PublicKey(props.poolKeys.vault.A), isSigner: false, isWritable: true },\r\n      { pubkey: new PublicKey(props.poolKeys.vault.B), isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: props.userVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: props.userVaultB, isSigner: false, isWritable: true },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID2, isSigner: false, isWritable: false },\r\n      { pubkey: new PublicKey(props.poolKeys.mintA.address), isSigner: false, isWritable: false },\r\n      { pubkey: new PublicKey(props.poolKeys.mintB.address), isSigner: false, isWritable: false },\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId: props.programId,\r\n      data: Buffer.from(lockHarvestInsDataBuf),\r\n    });\r\n  }\r\n\r\n  static harvestLockPositionInstructionV2({\r\n    programId,\r\n    auth,\r\n    lockPositionId,\r\n    clmmProgram,\r\n    lockOwner,\r\n    lockNftMint,\r\n    lockNftAccount,\r\n    positionNftAccount,\r\n    positionId,\r\n    poolId,\r\n    protocolPosition,\r\n    vaultA,\r\n    vaultB,\r\n    tickArrayLower,\r\n    tickArrayUpper,\r\n    userVaultA,\r\n    userVaultB,\r\n    mintA,\r\n    mintB,\r\n    rewardAccounts,\r\n    exTickArrayBitmap,\r\n  }: {\r\n    programId: PublicKey;\r\n    auth: PublicKey;\r\n    lockPositionId: PublicKey;\r\n    clmmProgram: PublicKey;\r\n    lockOwner: PublicKey;\r\n    lockNftMint: PublicKey;\r\n    lockNftAccount: PublicKey;\r\n    positionNftAccount: PublicKey;\r\n    positionId: PublicKey;\r\n    poolId: PublicKey;\r\n    protocolPosition: PublicKey;\r\n    vaultA: PublicKey;\r\n    vaultB: PublicKey;\r\n    tickArrayLower: PublicKey;\r\n    tickArrayUpper: PublicKey;\r\n    userVaultA: PublicKey;\r\n    userVaultB: PublicKey;\r\n    mintA: PublicKey;\r\n    mintB: PublicKey;\r\n    rewardAccounts: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[];\r\n\r\n    exTickArrayBitmap?: PublicKey;\r\n  }): TransactionInstruction {\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n      ...rewardAccounts\r\n        .map((i) => [\r\n          { pubkey: i.poolRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.ownerRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.rewardMint, isSigner: false, isWritable: false },\r\n        ])\r\n        .flat(),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: auth, isSigner: false, isWritable: false },\r\n      { pubkey: lockOwner, isSigner: true, isWritable: false },\r\n      // { pubkey: lockNftMint, isSigner: false, isWritable: false },\r\n      { pubkey: lockNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: lockPositionId, isSigner: false, isWritable: false },\r\n      { pubkey: clmmProgram, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: positionId, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: vaultA, isSigner: false, isWritable: true },\r\n      { pubkey: vaultB, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: userVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: userVaultB, isSigner: false, isWritable: true },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID2, isSigner: false, isWritable: false },\r\n      { pubkey: mintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintB, isSigner: false, isWritable: false },\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: Buffer.from(lockHarvestInsDataBuf),\r\n    });\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN, { isBN } from \"bn.js\";\r\n\r\nimport {\r\n  bits,\r\n  blob,\r\n  Blob,\r\n  Layout,\r\n  offset as _offset,\r\n  seq as _seq,\r\n  Structure as _Structure,\r\n  u32 as _u32,\r\n  u8 as _u8,\r\n  UInt,\r\n  union as _union,\r\n  Union as _Union,\r\n} from \"./buffer-layout\";\r\n\r\nexport * from \"./buffer-layout\";\r\nexport { blob };\r\n\r\nexport class BNLayout<P extends string = \"\"> extends Layout<BN, P> {\r\n  blob: Layout<Buffer>;\r\n  signed: boolean;\r\n\r\n  constructor(span: number, signed: boolean, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends, but it desn't matter\r\n    super(span, property);\r\n    this.blob = blob(span);\r\n    this.signed = signed;\r\n  }\r\n\r\n  /** @override */\r\n  decode(b: Buffer, offset = 0): BN {\r\n    const num = new BN(this.blob.decode(b, offset), 10, \"le\");\r\n    if (this.signed) {\r\n      return num.fromTwos(this.span * 8).clone();\r\n    }\r\n    return num;\r\n  }\r\n\r\n  /** @override */\r\n  encode(src: BN, b: Buffer, offset = 0): number {\r\n    if (typeof src === \"number\") src = new BN(src); // src will pass a number accidently in union\r\n    if (this.signed) {\r\n      src = src.toTwos(this.span * 8);\r\n    }\r\n    return this.blob.encode(src.toArrayLike(Buffer, \"le\", this.span), b, offset);\r\n  }\r\n}\r\n\r\nexport class WideBits<P extends string = \"\"> extends Layout<Record<string, boolean>, P> {\r\n  _lower: any;\r\n  _upper: any;\r\n  // TODO: unknown\r\n  constructor(property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(8, property);\r\n    this._lower = bits(_u32(), false);\r\n    this._upper = bits(_u32(), false);\r\n  }\r\n\r\n  addBoolean(property: string): void {\r\n    if (this._lower.fields.length < 32) {\r\n      this._lower.addBoolean(property);\r\n    } else {\r\n      this._upper.addBoolean(property);\r\n    }\r\n  }\r\n\r\n  decode(b: Buffer, offset = 0): Record<string, boolean> {\r\n    const lowerDecoded = this._lower.decode(b, offset);\r\n    const upperDecoded = this._upper.decode(b, offset + this._lower.span);\r\n    return { ...lowerDecoded, ...upperDecoded };\r\n  }\r\n\r\n  encode(src: any /* TEMP */, b: Buffer, offset = 0): any {\r\n    return this._lower.encode(src, b, offset) + this._upper.encode(src, b, offset + this._lower.span);\r\n  }\r\n}\r\n\r\nexport function u8<P extends string = \"\">(property?: P): UInt<number, P> {\r\n  return new UInt(1, property);\r\n}\r\n\r\nexport function u32<P extends string = \"\">(property?: P): UInt<number, P> {\r\n  return new UInt(4, property);\r\n}\r\n\r\nexport function u64<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(8, false, property);\r\n}\r\n\r\nexport function u128<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(16, false, property);\r\n}\r\n\r\nexport function i8<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(1, true, property);\r\n}\r\n\r\nexport function i64<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(8, true, property);\r\n}\r\n\r\nexport function i128<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(16, true, property);\r\n}\r\n\r\nexport class WrappedLayout<T, U, P extends string = \"\"> extends Layout<U, P> {\r\n  layout: Layout<T>;\r\n  decoder: (data: T) => U;\r\n  encoder: (src: U) => T;\r\n\r\n  constructor(layout: Layout<T>, decoder: (data: T) => U, encoder: (src: U) => T, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(layout.span, property);\r\n    this.layout = layout;\r\n    this.decoder = decoder;\r\n    this.encoder = encoder;\r\n  }\r\n\r\n  decode(b: Buffer, offset?: number): U {\r\n    return this.decoder(this.layout.decode(b, offset));\r\n  }\r\n\r\n  encode(src: U, b: Buffer, offset?: number): number {\r\n    return this.layout.encode(this.encoder(src), b, offset);\r\n  }\r\n\r\n  getSpan(b: Buffer, offset?: number): number {\r\n    return this.layout.getSpan(b, offset);\r\n  }\r\n}\r\n\r\nexport function publicKey<P extends string = \"\">(property?: P): Layout<PublicKey, P> {\r\n  return new WrappedLayout(\r\n    blob(32),\r\n    (b: Buffer) => new PublicKey(b),\r\n    (key: PublicKey) => key.toBuffer(),\r\n    property,\r\n  );\r\n}\r\n\r\nexport class OptionLayout<T, P> extends Layout<T | null, P> {\r\n  layout: Layout<T>;\r\n  discriminator: Layout<number>;\r\n\r\n  constructor(layout: Layout<T>, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(-1, property);\r\n    this.layout = layout;\r\n    this.discriminator = _u8();\r\n  }\r\n\r\n  encode(src: T | null, b: Buffer, offset = 0): number {\r\n    if (src === null || src === undefined) {\r\n      return this.discriminator.encode(0, b, offset);\r\n    }\r\n    this.discriminator.encode(1, b, offset);\r\n    return this.layout.encode(src, b, offset + 1) + 1;\r\n  }\r\n\r\n  decode(b: Buffer, offset = 0): T | null {\r\n    const discriminator = this.discriminator.decode(b, offset);\r\n    if (discriminator === 0) {\r\n      return null;\r\n    } else if (discriminator === 1) {\r\n      return this.layout.decode(b, offset + 1);\r\n    }\r\n    throw new Error(\"Invalid option \" + this.property);\r\n  }\r\n\r\n  getSpan(b: Buffer, offset = 0): number {\r\n    const discriminator = this.discriminator.decode(b, offset);\r\n    if (discriminator === 0) {\r\n      return 1;\r\n    } else if (discriminator === 1) {\r\n      return this.layout.getSpan(b, offset + 1) + 1;\r\n    }\r\n    throw new Error(\"Invalid option \" + this.property);\r\n  }\r\n}\r\n\r\nexport function option<T, P extends string = \"\">(layout: Layout<T>, property?: P): Layout<T | null, P> {\r\n  return new OptionLayout<T, P>(layout, property);\r\n}\r\n\r\nexport function bool<P extends string = \"\">(property?: P): Layout<boolean, P> {\r\n  return new WrappedLayout(_u8(), decodeBool, encodeBool, property);\r\n}\r\n\r\nexport function decodeBool(value: number): boolean {\r\n  if (value === 0) {\r\n    return false;\r\n  } else if (value === 1) {\r\n    return true;\r\n  }\r\n  throw new Error(\"Invalid bool: \" + value);\r\n}\r\n\r\nexport function encodeBool(value: boolean): number {\r\n  return value ? 1 : 0;\r\n}\r\n\r\nexport function vec<T, P extends string = \"\">(elementLayout: Layout<T>, property?: P): Layout<T[], P> {\r\n  const length = _u32(\"length\");\r\n  const layout: Layout<{ values: T[] }> = struct([\r\n    length,\r\n    seq(elementLayout, _offset(length, -length.span), \"values\"),\r\n  ]) as any; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ values }) => values,\r\n    (values) => ({ values }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport function tagged<T, P extends string = \"\">(tag: BN, layout: Layout<T>, property?: P): Layout<T, P> {\r\n  const wrappedLayout: Layout<{ tag: BN; data: T }> = struct([u64(\"tag\"), layout.replicate(\"data\")]) as any; // Something I don't know\r\n\r\n  function decodeTag({ tag: receivedTag, data }: { tag: BN; data: T }): T {\r\n    if (!receivedTag.eq(tag)) {\r\n      throw new Error(\"Invalid tag, expected: \" + tag.toString(\"hex\") + \", got: \" + receivedTag.toString(\"hex\"));\r\n    }\r\n    return data;\r\n  }\r\n\r\n  return new WrappedLayout(wrappedLayout, decodeTag, (data) => ({ tag, data }), property);\r\n}\r\n\r\nexport function vecU8<P extends string = \"\">(property?: P): Layout<Buffer, P> {\r\n  const length = _u32(\"length\");\r\n  const layout: Layout<{ data: Buffer }> = struct([length, blob(_offset(length, -length.span), \"data\")]) as any; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ data }) => data,\r\n    (data) => ({ data }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport function str<P extends string = \"\">(property?: P): Layout<string, P> {\r\n  return new WrappedLayout(\r\n    vecU8(),\r\n    (data) => data.toString(\"utf-8\"),\r\n    (s) => Buffer.from(s, \"utf-8\"),\r\n    property,\r\n  );\r\n}\r\n\r\nexport interface EnumLayout<T, P extends string = \"\"> extends Layout<T, P> {\r\n  registry: Record<string, Layout<any>>;\r\n}\r\n\r\nexport function rustEnum<T, P extends string = \"\">(variants: Layout<any>[], property?: P): EnumLayout<T, P> {\r\n  const unionLayout = _union(_u8(), property);\r\n  variants.forEach((variant, index) => unionLayout.addVariant(index, variant, variant.property));\r\n  return unionLayout as any; // ?why use UnionLayout? This must be a fault\r\n}\r\n\r\nexport function array<T, P extends string = \"\">(\r\n  elementLayout: Layout<T>,\r\n  length: number,\r\n  property?: P,\r\n): Layout<T[], P> {\r\n  const layout = struct([seq(elementLayout, length, \"values\")]) as any as Layout<{ values: T[] }>; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ values }) => values,\r\n    (values) => ({ values }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport class Structure<T, P, D extends { [key: string]: any; }> extends _Structure<T, P, D> {\r\n  /** @override */\r\n  decode(b: Buffer, offset?: number): D {\r\n    return super.decode(b, offset);\r\n  }\r\n}\r\n\r\nexport function struct<T, P extends string = \"\">(\r\n  fields: T,\r\n  property?: P,\r\n  decodePrefixes?: boolean,\r\n): T extends Layout<infer Value, infer Property>[]\r\n  ? Structure<\r\n    Value,\r\n    P,\r\n    {\r\n      [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\r\n      ? V\r\n      : any;\r\n    }\r\n  >\r\n  : any {\r\n  //@ts-expect-error this type is not quite satisfied the define, but, never no need to worry about.\r\n  return new Structure(fields, property, decodePrefixes);\r\n}\r\n\r\nexport type GetLayoutSchemaFromStructure<T extends Structure<any, any, any>> = T extends Structure<any, any, infer S>\r\n  ? S\r\n  : any;\r\nexport type GetStructureFromLayoutSchema<S extends { [key: string]: any; }> = Structure<any, any, S>;\r\n\r\nexport class Union<Schema extends { [key: string]: any; }> extends _Union<Schema> {\r\n  encodeInstruction(instruction: any): Buffer {\r\n    const instructionMaxSpan = Math.max(...Object.values(this.registry).map((r) => r.span));\r\n    const b = Buffer.alloc(instructionMaxSpan);\r\n    return b.slice(0, this.encode(instruction, b));\r\n  }\r\n\r\n  decodeInstruction(instruction: any): Partial<Schema> {\r\n    return this.decode(instruction);\r\n  }\r\n}\r\nexport function union<UnionSchema extends { [key: string]: any } = any>(\r\n  discr: any,\r\n  defaultLayout?: any,\r\n  property?: string,\r\n): Union<UnionSchema> {\r\n  return new Union(discr, defaultLayout, property);\r\n}\r\n\r\nclass Zeros extends Blob {\r\n  decode(b: Buffer, offset: number): Buffer {\r\n    const slice = super.decode(b, offset);\r\n    if (!slice.every((v) => v === 0)) {\r\n      throw new Error(\"nonzero padding bytes\");\r\n    }\r\n    return slice;\r\n  }\r\n}\r\n\r\nexport function zeros(length: number): Zeros {\r\n  return new Zeros(length);\r\n}\r\n\r\nexport function seq<T, P extends string = \"\", AnotherP extends string = \"\">(\r\n  elementLayout: Layout<T, P>,\r\n  count: number | BN | Layout<BN | number, P>,\r\n  property?: AnotherP,\r\n): Layout<T[], AnotherP> {\r\n  let parsedCount: number;\r\n  const superCount =\r\n    typeof count === \"number\"\r\n      ? count\r\n      : isBN(count)\r\n        ? count.toNumber()\r\n        : new Proxy(count as unknown as Layout<number> /* pretend to be Layout<number> */, {\r\n          get(target, property): any {\r\n            if (!parsedCount) {\r\n              // get count in targetLayout. note that count may be BN\r\n              const countProperty = Reflect.get(target, \"count\");\r\n\r\n              // let targetLayout's  property:count be a number\r\n              parsedCount = isBN(countProperty) ? countProperty.toNumber() : countProperty;\r\n\r\n              // record the count\r\n              Reflect.set(target, \"count\", parsedCount);\r\n            }\r\n            return Reflect.get(target, property);\r\n          },\r\n          set(target, property, value): any {\r\n            if (property === \"count\") {\r\n              parsedCount = value;\r\n            }\r\n            return Reflect.set(target, property, value);\r\n          },\r\n        });\r\n\r\n  // @ts-expect-error force type\r\n  return _seq(elementLayout, superCount, property);\r\n}\r\n","import {\r\n  bits as _bits,\r\n  BitStructure as _BitStructure,\r\n  blob as _blob,\r\n  Blob as _Blob,\r\n  cstr as _cstr,\r\n  f32 as _f32,\r\n  f32be as _f32be,\r\n  f64 as _f64,\r\n  f64be as _f64be,\r\n  greedy as _greedy,\r\n  Layout as _Layout,\r\n  ns64 as _ns64,\r\n  ns64be as _ns64be,\r\n  nu64 as _nu64,\r\n  nu64be as _nu64be,\r\n  offset as _offset,\r\n  s16 as _s16,\r\n  s16be as _s16be,\r\n  s24 as _s24,\r\n  s24be as _s24be,\r\n  s32 as _s32,\r\n  s32be as _s32be,\r\n  s40 as _s40,\r\n  s40be as _s40be,\r\n  s48 as _s48,\r\n  s48be as _s48be,\r\n  s8 as _s8,\r\n  seq as _seq,\r\n  struct as _struct,\r\n  Structure as _Structure,\r\n  u16 as _u16,\r\n  u16be as _u16be,\r\n  u24 as _u24,\r\n  u24be as _u24be,\r\n  u32 as _u32,\r\n  u32be as _u32be,\r\n  u40 as _u40,\r\n  u40be as _u40be,\r\n  u48 as _u48,\r\n  u48be as _u48be,\r\n  u8 as _u8,\r\n  UInt as _UInt,\r\n  union as _union,\r\n  Union as _Union,\r\n  unionLayoutDiscriminator as _unionLayoutDiscriminator,\r\n  utf8 as _utf8,\r\n} from \"@solana/buffer-layout\";\r\n\r\n//#region ------------------- Layout -------------------\r\nexport interface Layout<T = any, P = \"\"> {\r\n  span: number;\r\n  property?: P;\r\n  decode(b: Buffer, offset?: number): T;\r\n  encode(src: T, b: Buffer, offset?: number): number;\r\n  getSpan(b: Buffer, offset?: number): number;\r\n  replicate<AP extends string>(name: AP): Layout<T, AP>;\r\n}\r\nexport interface LayoutConstructor {\r\n  new <T, P>(): Layout<T, P>; // for class extends syntex\r\n  new <T, P>(span?: T, property?: P): Layout<T, P>;\r\n  readonly prototype: Layout;\r\n}\r\nexport const Layout = _Layout as unknown as LayoutConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Structure -------------------\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nexport interface Structure<T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>\r\n  extends Layout<DecodeSchema, P> {\r\n  span: number;\r\n  decode(b: Buffer, offset?: number): DecodeSchema;\r\n  layoutFor<AP extends string>(property: AP): Layout<DecodeSchema[AP]>;\r\n  offsetOf<AP extends string>(property: AP): number;\r\n}\r\ninterface StructureConstructor {\r\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(): Structure<T, P, DecodeSchema>;\r\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(\r\n    fields: T,\r\n    property?: P,\r\n    decodePrefixes?: boolean,\r\n  ): Structure<T, P, DecodeSchema>;\r\n}\r\nexport const Structure = _Structure as unknown as StructureConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Union -------------------\r\nexport interface Union<UnionSchema extends { [key: string]: any } = any> extends Layout {\r\n  registry: object;\r\n  decode(b: Buffer, offset?: number): Partial<UnionSchema>;\r\n  addVariant(\r\n    variant: number,\r\n    layout: Structure<any, any, Partial<UnionSchema>> | Layout<any, keyof UnionSchema>,\r\n    property?: string,\r\n  ): any /* TEMP: code in Layout.js 1809 */;\r\n}\r\ninterface UnionConstructor {\r\n  new <UnionSchema extends { [key: string]: any } = any>(): Union<UnionSchema>;\r\n  new <UnionSchema extends { [key: string]: any } = any>(\r\n    discr: Layout<any, any>,\r\n    defaultLayout: Layout<any, any>,\r\n    property?: string,\r\n  ): Union<UnionSchema>;\r\n}\r\nexport const Union = _Union as unknown as UnionConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- BitStructure -------------------\r\nexport type BitStructure<T = unknown /* TEMP */, P = \"\"> = Layout<T, P>;\r\ninterface BitStructureConstructor {\r\n  new (...params: any[]): BitStructure;\r\n}\r\nexport const BitStructure = _BitStructure as BitStructureConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- UInt -------------------\r\nexport type UInt<T = any, P = \"\"> = Layout<T, P>;\r\ninterface UIntConstructor {\r\n  new <T, P>(span?: T, property?: P): UInt<T, P>;\r\n}\r\nexport const UInt = _UInt as UIntConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Blob -------------------\r\nexport type Blob<P extends string = \"\"> = Layout<Buffer, P>;\r\ninterface BlobConstructor {\r\n  new (...params: ConstructorParameters<LayoutConstructor>): Blob;\r\n}\r\nexport const Blob = _Blob as unknown as BlobConstructor;\r\n//#endregion\r\n\r\nexport const greedy = _greedy as <P extends string = \"\">(elementSpan?: number, property?: P) => Layout<number, P>;\r\nexport const u8 = _u8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u16 = _u16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u24 = _u24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u32 = _u32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u40 = _u40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u48 = _u48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const nu64 = _nu64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u16be = _u16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u24be = _u24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u32be = _u32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u40be = _u40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u48be = _u48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const nu64be = _nu64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s8 = _s8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s16 = _s16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s24 = _s24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s32 = _s32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s40 = _s40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s48 = _s48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const ns64 = _ns64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s16be = _s16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s24be = _s24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s32be = _s32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s40be = _s40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s48be = _s48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const ns64be = _ns64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f32 = _f32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f32be = _f32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f64 = _f64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f64be = _f64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\n\r\nexport const struct = _struct as <T, P extends string = \"\">(\r\n  fields: T,\r\n  property?: P,\r\n  decodePrefixes?: boolean,\r\n) => T extends Layout<infer Value, infer Property>[]\r\n  ? Structure<\r\n      Value,\r\n      P,\r\n      {\r\n        [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\r\n          ? V\r\n          : any;\r\n      }\r\n    >\r\n  : any;\r\n\r\nexport const seq = _seq as unknown as <T, P>(\r\n  elementLayout: Layout<T, string>,\r\n  count: number | Layout<number, string>,\r\n  property?: P,\r\n) => Layout<T[]>;\r\nexport const union = _union as <UnionSchema extends { [key: string]: any } = any>(\r\n  discr: Layout<any, any>,\r\n  defaultLayout?: any,\r\n  property?: string,\r\n) => Union<UnionSchema>;\r\nexport const unionLayoutDiscriminator = _unionLayoutDiscriminator as <P extends string = \"\">(\r\n  layout: Layout<any, P>,\r\n  property?: P,\r\n) => any;\r\nexport const blob = _blob as unknown as <P extends string = \"\">(\r\n  length: number | Layout<number, P>,\r\n  property?: P,\r\n) => Blob<P>;\r\nexport const cstr = _cstr as <P extends string = \"\">(property?: P) => Layout<string, P>;\r\nexport const utf8 = _utf8 as <P extends string = \"\">(maxSpan: number, property?: P) => Layout<string, P>;\r\nexport const bits = _bits as unknown as <T, P extends string = \"\">(\r\n  word: Layout<T>,\r\n  msb?: boolean,\r\n  property?: P,\r\n) => BitStructure<T, P>; // TODO: not quite sure\r\nexport const offset = _offset as unknown as <T, P extends string = \"\">(\r\n  layout: Layout<T, P>,\r\n  offset?: number,\r\n  property?: P,\r\n) => Layout<T, P>;\r\n\r\nexport type GetStructureSchema<T extends Structure> = T extends Structure<any, any, infer S> ? S : unknown;\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\n\r\nimport { ApiV3PoolInfoConcentratedItem } from \"../../../api/type\";\r\nimport { ClmmPoolInfo, TickArrayBitmapExtensionType } from \"../type\";\r\nimport { MAX_TICK, MIN_TICK } from \"./constants\";\r\nimport { SqrtPriceMath, TickMath } from \"./math\";\r\nimport { getPdaTickArrayAddress } from \"./pda\";\r\nimport { TickQuery } from \"./tickQuery\";\r\n\r\nexport const TICK_ARRAY_SIZE = 60;\r\nexport const TICK_ARRAY_BITMAP_SIZE = 512;\r\n\r\nexport interface ReturnTypeGetTickPrice {\r\n  tick: number;\r\n  price: Decimal;\r\n  tickSqrtPriceX64: BN;\r\n}\r\n\r\nexport interface ReturnTypeGetPriceAndTick {\r\n  tick: number;\r\n  price: Decimal;\r\n}\r\n\r\nexport type Tick = {\r\n  tick: number;\r\n  liquidityNet: BN;\r\n  liquidityGross: BN;\r\n  feeGrowthOutsideX64A: BN;\r\n  feeGrowthOutsideX64B: BN;\r\n  rewardGrowthsOutsideX64: BN[];\r\n};\r\n\r\nexport type TickArray = {\r\n  address: PublicKey;\r\n  poolId: PublicKey;\r\n  startTickIndex: number;\r\n  ticks: Tick[];\r\n  initializedTickCount: number;\r\n};\r\n\r\nexport type TickState = {\r\n  tick: number;\r\n  liquidityNet: BN;\r\n  liquidityGross: BN;\r\n  feeGrowthOutsideX64A: BN;\r\n  feeGrowthOutsideX64B: BN;\r\n  tickCumulativeOutside: BN;\r\n  secondsPerLiquidityOutsideX64: BN;\r\n  secondsOutside: number;\r\n  rewardGrowthsOutside: BN[];\r\n};\r\n\r\nexport type TickArrayState = {\r\n  ammPool: PublicKey;\r\n  startTickIndex: number;\r\n  ticks: TickState[];\r\n  initializedTickCount: number;\r\n};\r\n\r\nexport class TickUtils {\r\n  public static getTickArrayAddressByTick(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickIndex: number,\r\n    tickSpacing: number,\r\n  ): PublicKey {\r\n    const startIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\r\n    const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(programId, poolId, startIndex);\r\n    return tickArrayAddress;\r\n  }\r\n\r\n  public static getTickOffsetInArray(tickIndex: number, tickSpacing: number): number {\r\n    if (tickIndex % tickSpacing != 0) {\r\n      throw new Error(\"tickIndex % tickSpacing not equal 0\");\r\n    }\r\n    const startTickIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\r\n    const offsetInArray = Math.floor((tickIndex - startTickIndex) / tickSpacing);\r\n    if (offsetInArray < 0 || offsetInArray >= TICK_ARRAY_SIZE) {\r\n      throw new Error(\"tick offset in array overflow\");\r\n    }\r\n    return offsetInArray;\r\n  }\r\n\r\n  public static getTickArrayBitIndex(tickIndex: number, tickSpacing: number): number {\r\n    const ticksInArray = TickQuery.tickCount(tickSpacing);\r\n\r\n    let startIndex: number = tickIndex / ticksInArray;\r\n    if (tickIndex < 0 && tickIndex % ticksInArray != 0) {\r\n      startIndex = Math.ceil(startIndex) - 1;\r\n    } else {\r\n      startIndex = Math.floor(startIndex);\r\n    }\r\n    return startIndex;\r\n  }\r\n\r\n  public static getTickArrayStartIndexByTick(tickIndex: number, tickSpacing: number): number {\r\n    return this.getTickArrayBitIndex(tickIndex, tickSpacing) * TickQuery.tickCount(tickSpacing);\r\n  }\r\n\r\n  public static getTickArrayOffsetInBitmapByTick(tick: number, tickSpacing: number): number {\r\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\r\n    const compressed = Math.floor(tick / multiplier) + 512;\r\n    return Math.abs(compressed);\r\n  }\r\n\r\n  public static checkTickArrayIsInitialized(\r\n    bitmap: BN,\r\n    tick: number,\r\n    tickSpacing: number,\r\n  ): {\r\n    isInitialized: boolean;\r\n    startIndex: number;\r\n  } {\r\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\r\n    const compressed = Math.floor(tick / multiplier) + 512;\r\n    const bitPos = Math.abs(compressed);\r\n    return {\r\n      isInitialized: bitmap.testn(bitPos),\r\n      startIndex: (bitPos - 512) * multiplier,\r\n    };\r\n  }\r\n\r\n  public static getNextTickArrayStartIndex(\r\n    lastTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): number {\r\n    return zeroForOne\r\n      ? lastTickArrayStartIndex - tickSpacing * TICK_ARRAY_SIZE\r\n      : lastTickArrayStartIndex + tickSpacing * TICK_ARRAY_SIZE;\r\n  }\r\n\r\n  public static mergeTickArrayBitmap(bns: BN[]): BN {\r\n    let b = new BN(0);\r\n    for (let i = 0; i < bns.length; i++) {\r\n      b = b.add(bns[i].shln(64 * i));\r\n    }\r\n    return b;\r\n  }\r\n\r\n  public static getInitializedTickArrayInRange(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\r\n    tickSpacing: number,\r\n    tickArrayStartIndex: number,\r\n    expectedCount: number,\r\n  ): number[] {\r\n    const tickArrayOffset = Math.floor(tickArrayStartIndex / (tickSpacing * TICK_ARRAY_SIZE));\r\n    return [\r\n      // find right of currenct offset\r\n      ...TickUtils.searchLowBitFromStart(\r\n        tickArrayBitmap,\r\n        exTickArrayBitmap,\r\n        tickArrayOffset - 1,\r\n        expectedCount,\r\n        tickSpacing,\r\n      ),\r\n\r\n      // find left of current offset\r\n      ...TickUtils.searchHightBitFromStart(\r\n        tickArrayBitmap,\r\n        exTickArrayBitmap,\r\n        tickArrayOffset,\r\n        expectedCount,\r\n        tickSpacing,\r\n      ),\r\n    ];\r\n  }\r\n\r\n  public static getAllInitializedTickArrayStartIndex(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\r\n    tickSpacing: number,\r\n  ): number[] {\r\n    // find from offset 0 to 1024\r\n    return TickUtils.searchHightBitFromStart(\r\n      tickArrayBitmap,\r\n      exTickArrayBitmap,\r\n      -7680,\r\n      TICK_ARRAY_BITMAP_SIZE,\r\n      tickSpacing,\r\n    );\r\n  }\r\n\r\n  public static getAllInitializedTickArrayInfo(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\r\n    tickSpacing: number,\r\n  ): {\r\n    tickArrayStartIndex: number;\r\n    tickArrayAddress: PublicKey;\r\n  }[] {\r\n    const result: {\r\n      tickArrayStartIndex: number;\r\n      tickArrayAddress: PublicKey;\r\n    }[] = [];\r\n    const allInitializedTickArrayIndex: number[] = TickUtils.getAllInitializedTickArrayStartIndex(\r\n      tickArrayBitmap,\r\n      exTickArrayBitmap,\r\n      tickSpacing,\r\n    );\r\n    for (const startIndex of allInitializedTickArrayIndex) {\r\n      const { publicKey: address } = getPdaTickArrayAddress(programId, poolId, startIndex);\r\n      result.push({\r\n        tickArrayStartIndex: startIndex,\r\n        tickArrayAddress: address,\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static getAllInitializedTickInTickArray(tickArray: TickArrayState): TickState[] {\r\n    return tickArray.ticks.filter((i) => i.liquidityGross.gtn(0));\r\n  }\r\n\r\n  public static searchLowBitFromStart(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\r\n    currentTickArrayBitStartIndex: number,\r\n    expectedCount: number,\r\n    tickSpacing: number,\r\n  ): number[] {\r\n    const tickArrayBitmaps = [\r\n      ...[...exTickArrayBitmap.negativeTickArrayBitmap].reverse(),\r\n      tickArrayBitmap.slice(0, 8),\r\n      tickArrayBitmap.slice(8, 16),\r\n      ...exTickArrayBitmap.positiveTickArrayBitmap,\r\n    ].map((i) => TickUtils.mergeTickArrayBitmap(i));\r\n    const result: number[] = [];\r\n    while (currentTickArrayBitStartIndex >= -7680) {\r\n      const arrayIndex = Math.floor((currentTickArrayBitStartIndex + 7680) / 512);\r\n      const searchIndex = (currentTickArrayBitStartIndex + 7680) % 512;\r\n\r\n      if (tickArrayBitmaps[arrayIndex].testn(searchIndex)) result.push(currentTickArrayBitStartIndex);\r\n\r\n      currentTickArrayBitStartIndex--;\r\n      if (result.length === expectedCount) break;\r\n    }\r\n\r\n    const tickCount = TickQuery.tickCount(tickSpacing);\r\n    return result.map((i) => i * tickCount);\r\n  }\r\n\r\n  public static searchHightBitFromStart(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\r\n    currentTickArrayBitStartIndex: number,\r\n    expectedCount: number,\r\n    tickSpacing: number,\r\n  ): number[] {\r\n    const tickArrayBitmaps = [\r\n      ...[...exTickArrayBitmap.negativeTickArrayBitmap].reverse(),\r\n      tickArrayBitmap.slice(0, 8),\r\n      tickArrayBitmap.slice(8, 16),\r\n      ...exTickArrayBitmap.positiveTickArrayBitmap,\r\n    ].map((i) => TickUtils.mergeTickArrayBitmap(i));\r\n    const result: number[] = [];\r\n    while (currentTickArrayBitStartIndex < 7680) {\r\n      const arrayIndex = Math.floor((currentTickArrayBitStartIndex + 7680) / 512);\r\n      const searchIndex = (currentTickArrayBitStartIndex + 7680) % 512;\r\n\r\n      if (tickArrayBitmaps[arrayIndex].testn(searchIndex)) result.push(currentTickArrayBitStartIndex);\r\n\r\n      currentTickArrayBitStartIndex++;\r\n      if (result.length === expectedCount) break;\r\n    }\r\n\r\n    const tickCount = TickQuery.tickCount(tickSpacing);\r\n    return result.map((i) => i * tickCount);\r\n  }\r\n\r\n  public static checkIsOutOfBoundary(tick: number): boolean {\r\n    return tick < MIN_TICK || tick > MAX_TICK;\r\n  }\r\n\r\n  public static nextInitTick(\r\n    tickArrayCurrent: TickArray,\r\n    currentTickIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n    t: boolean,\r\n  ): Tick | null {\r\n    const currentTickArrayStartIndex = TickQuery.getArrayStartIndex(currentTickIndex, tickSpacing);\r\n    if (currentTickArrayStartIndex != tickArrayCurrent.startTickIndex) {\r\n      return null;\r\n    }\r\n    let offsetInArray = Math.floor((currentTickIndex - tickArrayCurrent.startTickIndex) / tickSpacing);\r\n\r\n    if (zeroForOne) {\r\n      while (offsetInArray >= 0) {\r\n        if (tickArrayCurrent.ticks[offsetInArray].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[offsetInArray];\r\n        }\r\n        offsetInArray = offsetInArray - 1;\r\n      }\r\n    } else {\r\n      if (!t) offsetInArray = offsetInArray + 1;\r\n      while (offsetInArray < TICK_ARRAY_SIZE) {\r\n        if (tickArrayCurrent.ticks[offsetInArray].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[offsetInArray];\r\n        }\r\n        offsetInArray = offsetInArray + 1;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public static firstInitializedTick(tickArrayCurrent: TickArray, zeroForOne: boolean): Tick {\r\n    if (zeroForOne) {\r\n      let i = TICK_ARRAY_SIZE - 1;\r\n      while (i >= 0) {\r\n        if (tickArrayCurrent.ticks[i].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[i];\r\n        }\r\n        i = i - 1;\r\n      }\r\n    } else {\r\n      let i = 0;\r\n      while (i < TICK_ARRAY_SIZE) {\r\n        if (tickArrayCurrent.ticks[i].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[i];\r\n        }\r\n        i = i + 1;\r\n      }\r\n    }\r\n\r\n    throw Error(`firstInitializedTick check error: ${tickArrayCurrent} - ${zeroForOne}`);\r\n  }\r\n\r\n  public static _getTickPriceLegacy({\r\n    poolInfo,\r\n    tick,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ClmmPoolInfo;\r\n    tick: number;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetTickPrice {\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn\r\n      ? { tick, price: tickPrice, tickSqrtPriceX64 }\r\n      : { tick, price: new Decimal(1).div(tickPrice), tickSqrtPriceX64 };\r\n  }\r\n\r\n  public static _getPriceAndTickLegacy({\r\n    poolInfo,\r\n    price,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ClmmPoolInfo;\r\n    price: Decimal;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetPriceAndTick {\r\n    const _price = baseIn ? price : new Decimal(1).div(price);\r\n\r\n    const tick = TickMath.getTickWithPriceAndTickspacing(\r\n      _price,\r\n      poolInfo.ammConfig.tickSpacing,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn ? { tick, price: tickPrice } : { tick, price: new Decimal(1).div(tickPrice) };\r\n  }\r\n\r\n  public static getTickPrice({\r\n    poolInfo,\r\n    tick,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    tick: number;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetTickPrice {\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn\r\n      ? { tick, price: tickPrice, tickSqrtPriceX64 }\r\n      : { tick, price: new Decimal(1).div(tickPrice), tickSqrtPriceX64 };\r\n  }\r\n\r\n  public static getPriceAndTick({\r\n    poolInfo,\r\n    price,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    price: Decimal;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetPriceAndTick {\r\n    const _price = baseIn ? price : new Decimal(1).div(price);\r\n\r\n    const tick = TickMath.getTickWithPriceAndTickspacing(\r\n      _price,\r\n      poolInfo.config.tickSpacing,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn ? { tick, price: tickPrice } : { tick, price: new Decimal(1).div(tickPrice) };\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\n\r\nexport const ZERO = new BN(0);\r\nexport const ONE = new BN(1);\r\nexport const NEGATIVE_ONE = new BN(-1);\r\n\r\nexport const Q64 = new BN(1).shln(64);\r\nexport const Q128 = new BN(1).shln(128);\r\n\r\nexport const MaxU64 = Q64.sub(ONE);\r\n\r\nexport const U64Resolution = 64;\r\n\r\nexport const MaxUint128 = Q128.subn(1);\r\n\r\nexport const MIN_TICK = -443636;\r\nexport const MAX_TICK = -MIN_TICK;\r\n\r\nexport const MIN_SQRT_PRICE_X64: BN = new BN(\"4295048016\");\r\nexport const MAX_SQRT_PRICE_X64: BN = new BN(\"79226673521066979257578248091\");\r\n\r\nexport const MIN_SQRT_PRICE_X64_ADD_ONE: BN = new BN(\"4295048017\");\r\nexport const MAX_SQRT_PRICE_X64_SUB_ONE: BN = new BN(\"79226673521066979257578248090\");\r\n\r\n// export const MIN_TICK_ARRAY_START_INDEX = -307200;\r\n// export const MAX_TICK_ARRAY_START_INDEX = 306600;\r\n\r\nexport const BIT_PRECISION = 16;\r\nexport const LOG_B_2_X32 = \"59543866431248\";\r\nexport const LOG_B_P_ERR_MARGIN_LOWER_X64 = \"184467440737095516\";\r\nexport const LOG_B_P_ERR_MARGIN_UPPER_X64 = \"15793534762490258745\";\r\n\r\nexport const FEE_RATE_DENOMINATOR = new BN(10).pow(new BN(6));\r\n\r\nexport enum Fee {\r\n  rate_500 = 500, //  500 / 10e6 = 0.0005\r\n  rate_3000 = 3000, // 3000/ 10e6 = 0.003\r\n  rate_10000 = 10000, // 10000 /10e6 = 0.01\r\n}\r\nexport const TICK_SPACINGS: { [amount in Fee]: number } = {\r\n  [Fee.rate_500]: 10,\r\n  [Fee.rate_3000]: 60,\r\n  [Fee.rate_10000]: 200,\r\n};\r\n\r\nexport const mockCreatePoolInfo = {\r\n  version: 6,\r\n  liquidity: ZERO,\r\n  tickCurrent: 0,\r\n  feeGrowthGlobalX64A: ZERO,\r\n  feeGrowthGlobalX64B: ZERO,\r\n  protocolFeesTokenA: ZERO,\r\n  protocolFeesTokenB: ZERO,\r\n  swapInAmountTokenA: ZERO,\r\n  swapOutAmountTokenB: ZERO,\r\n  swapInAmountTokenB: ZERO,\r\n  swapOutAmountTokenA: ZERO,\r\n  tickArrayBitmap: [],\r\n\r\n  rewardInfos: [],\r\n\r\n  day: {\r\n    volume: 0,\r\n    volumeFee: 0,\r\n    feeA: 0,\r\n    feeB: 0,\r\n    feeApr: 0,\r\n    rewardApr: { A: 0, B: 0, C: 0 },\r\n    apr: 0,\r\n    priceMax: 0,\r\n    priceMin: 0,\r\n  },\r\n  week: {\r\n    volume: 0,\r\n    volumeFee: 0,\r\n    feeA: 0,\r\n    feeB: 0,\r\n    feeApr: 0,\r\n    rewardApr: { A: 0, B: 0, C: 0 },\r\n    apr: 0,\r\n    priceMax: 0,\r\n    priceMin: 0,\r\n  },\r\n  month: {\r\n    volume: 0,\r\n    volumeFee: 0,\r\n    feeA: 0,\r\n    feeB: 0,\r\n    feeApr: 0,\r\n    rewardApr: { A: 0, B: 0, C: 0 },\r\n    apr: 0,\r\n    priceMax: 0,\r\n    priceMin: 0,\r\n  },\r\n  tvl: 0,\r\n};\r\n\r\nexport const mockV3CreatePoolInfo = {\r\n  tvl: 0,\r\n  volumeQuote: 0,\r\n  mintAmountA: 0,\r\n  mintAmountB: 0,\r\n  rewardDefaultInfos: [],\r\n  farmUpcomingCount: 0,\r\n  farmOngoingCount: 0,\r\n  farmFinishedCount: 0,\r\n\r\n  day: {\r\n    volume: 0,\r\n    volumeQuote: 0,\r\n    volumeFee: 0,\r\n    apr: 0,\r\n    feeApr: 0,\r\n    priceMin: 0,\r\n    priceMax: 0,\r\n    rewardApr: [0],\r\n  },\r\n  week: {\r\n    volume: 0,\r\n    volumeQuote: 0,\r\n    volumeFee: 0,\r\n    apr: 0,\r\n    feeApr: 0,\r\n    priceMin: 0,\r\n    priceMax: 0,\r\n    rewardApr: [0],\r\n  },\r\n  month: {\r\n    volume: 0,\r\n    volumeQuote: 0,\r\n    volumeFee: 0,\r\n    apr: 0,\r\n    feeApr: 0,\r\n    priceMin: 0,\r\n    priceMax: 0,\r\n    rewardApr: [0],\r\n  },\r\n  pooltype: [],\r\n};\r\n\r\nexport const U64_IGNORE_RANGE = new BN(\"18446744073700000000\");\r\n","import { EpochInfo, PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\n\r\nimport { ApiV3PoolInfoConcentratedItem } from \"../../../api/type\";\r\nimport { getTransferAmountFeeV2, minExpirationTime } from \"../../../common/transfer\";\r\nimport { ReturnTypeGetLiquidityAmountOut, TickArrayBitmapExtensionType } from \"../type\";\r\nimport {\r\n  BIT_PRECISION,\r\n  Fee,\r\n  FEE_RATE_DENOMINATOR,\r\n  LOG_B_2_X32,\r\n  LOG_B_P_ERR_MARGIN_LOWER_X64,\r\n  LOG_B_P_ERR_MARGIN_UPPER_X64,\r\n  MAX_SQRT_PRICE_X64,\r\n  MAX_TICK,\r\n  MaxU64,\r\n  MaxUint128,\r\n  MIN_SQRT_PRICE_X64,\r\n  MIN_TICK,\r\n  NEGATIVE_ONE,\r\n  ONE,\r\n  Q128,\r\n  Q64,\r\n  U64Resolution,\r\n  ZERO,\r\n} from \"./constants\";\r\nimport { getPdaTickArrayAddress } from \"./pda\";\r\nimport { PoolUtils } from \"./pool\";\r\nimport { Tick, TickArray, TickUtils } from \"./tick\";\r\nimport { TickQuery } from \"./tickQuery\";\r\n\r\nexport class MathUtil {\r\n  public static mulDivRoundingUp(a: BN, b: BN, denominator: BN): BN {\r\n    const numerator = a.mul(b);\r\n    let result = numerator.div(denominator);\r\n    if (!numerator.mod(denominator).eq(ZERO)) {\r\n      result = result.add(ONE);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static mulDivFloor(a: BN, b: BN, denominator: BN): BN {\r\n    if (denominator.eq(ZERO)) {\r\n      throw new Error(\"division by 0\");\r\n    }\r\n    return a.mul(b).div(denominator);\r\n  }\r\n\r\n  public static mulDivCeil(a: BN, b: BN, denominator: BN): BN {\r\n    if (denominator.eq(ZERO)) {\r\n      throw new Error(\"division by 0\");\r\n    }\r\n    const numerator = a.mul(b).add(denominator.sub(ONE));\r\n    return numerator.div(denominator);\r\n  }\r\n\r\n  public static x64ToDecimal(num: BN, decimalPlaces?: number): Decimal {\r\n    return new Decimal(num.toString()).div(Decimal.pow(2, 64)).toDecimalPlaces(decimalPlaces);\r\n  }\r\n\r\n  public static decimalToX64(num: Decimal): BN {\r\n    return new BN(num.mul(Decimal.pow(2, 64)).floor().toFixed());\r\n  }\r\n\r\n  public static wrappingSubU128(n0: BN, n1: BN): BN {\r\n    return n0.add(Q128).sub(n1).mod(Q128);\r\n  }\r\n}\r\n\r\n// sqrt price math\r\nfunction mulRightShift(val: BN, mulBy: BN): BN {\r\n  return signedRightShift(val.mul(mulBy), 64, 256);\r\n}\r\n\r\nfunction signedLeftShift(n0: BN, shiftBy: number, bitWidth: number): BN {\r\n  const twosN0 = n0.toTwos(bitWidth).shln(shiftBy);\r\n  twosN0.imaskn(bitWidth + 1);\r\n  return twosN0.fromTwos(bitWidth);\r\n}\r\n\r\nfunction signedRightShift(n0: BN, shiftBy: number, bitWidth: number): BN {\r\n  const twoN0 = n0.toTwos(bitWidth).shrn(shiftBy);\r\n  twoN0.imaskn(bitWidth - shiftBy + 1);\r\n  return twoN0.fromTwos(bitWidth - shiftBy);\r\n}\r\n\r\nexport class SqrtPriceMath {\r\n  public static sqrtPriceX64ToPrice(sqrtPriceX64: BN, decimalsA: number, decimalsB: number): Decimal {\r\n    return MathUtil.x64ToDecimal(sqrtPriceX64)\r\n      .pow(2)\r\n      .mul(Decimal.pow(10, decimalsA - decimalsB));\r\n  }\r\n\r\n  public static priceToSqrtPriceX64(price: Decimal, decimalsA: number, decimalsB: number): BN {\r\n    return MathUtil.decimalToX64(price.mul(Decimal.pow(10, decimalsB - decimalsA)).sqrt());\r\n  }\r\n\r\n  public static getNextSqrtPriceX64FromInput(sqrtPriceX64: BN, liquidity: BN, amountIn: BN, zeroForOne: boolean): BN {\r\n    if (!sqrtPriceX64.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64 must greater than 0\");\r\n    }\r\n    if (!liquidity.gt(ZERO)) {\r\n      throw new Error(\"liquidity must greater than 0\");\r\n    }\r\n\r\n    return zeroForOne\r\n      ? this.getNextSqrtPriceFromTokenAmountARoundingUp(sqrtPriceX64, liquidity, amountIn, true)\r\n      : this.getNextSqrtPriceFromTokenAmountBRoundingDown(sqrtPriceX64, liquidity, amountIn, true);\r\n  }\r\n\r\n  public static getNextSqrtPriceX64FromOutput(sqrtPriceX64: BN, liquidity: BN, amountOut: BN, zeroForOne: boolean): BN {\r\n    if (!sqrtPriceX64.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64 must greater than 0\");\r\n    }\r\n    if (!liquidity.gt(ZERO)) {\r\n      throw new Error(\"liquidity must greater than 0\");\r\n    }\r\n\r\n    return zeroForOne\r\n      ? this.getNextSqrtPriceFromTokenAmountBRoundingDown(sqrtPriceX64, liquidity, amountOut, false)\r\n      : this.getNextSqrtPriceFromTokenAmountARoundingUp(sqrtPriceX64, liquidity, amountOut, false);\r\n  }\r\n\r\n  private static getNextSqrtPriceFromTokenAmountARoundingUp(\r\n    sqrtPriceX64: BN,\r\n    liquidity: BN,\r\n    amount: BN,\r\n    add: boolean,\r\n  ): BN {\r\n    if (amount.eq(ZERO)) return sqrtPriceX64;\r\n    const liquidityLeftShift = liquidity.shln(U64Resolution);\r\n\r\n    if (add) {\r\n      const numerator1 = liquidityLeftShift;\r\n      const denominator = liquidityLeftShift.add(amount.mul(sqrtPriceX64));\r\n      if (denominator.gte(numerator1)) {\r\n        return MathUtil.mulDivCeil(numerator1, sqrtPriceX64, denominator);\r\n      }\r\n      return MathUtil.mulDivRoundingUp(numerator1, ONE, numerator1.div(sqrtPriceX64).add(amount));\r\n    } else {\r\n      const amountMulSqrtPrice = amount.mul(sqrtPriceX64);\r\n      if (!liquidityLeftShift.gt(amountMulSqrtPrice)) {\r\n        throw new Error(\"getNextSqrtPriceFromTokenAmountARoundingUp,liquidityLeftShift must gt amountMulSqrtPrice\");\r\n      }\r\n      const denominator = liquidityLeftShift.sub(amountMulSqrtPrice);\r\n      return MathUtil.mulDivCeil(liquidityLeftShift, sqrtPriceX64, denominator);\r\n    }\r\n  }\r\n\r\n  private static getNextSqrtPriceFromTokenAmountBRoundingDown(\r\n    sqrtPriceX64: BN,\r\n    liquidity: BN,\r\n    amount: BN,\r\n    add: boolean,\r\n  ): BN {\r\n    const deltaY = amount.shln(U64Resolution);\r\n    if (add) {\r\n      return sqrtPriceX64.add(deltaY.div(liquidity));\r\n    } else {\r\n      const amountDivLiquidity = MathUtil.mulDivRoundingUp(deltaY, ONE, liquidity);\r\n      if (!sqrtPriceX64.gt(amountDivLiquidity)) {\r\n        throw new Error(\"getNextSqrtPriceFromTokenAmountBRoundingDown sqrtPriceX64 must gt amountDivLiquidity\");\r\n      }\r\n      return sqrtPriceX64.sub(amountDivLiquidity);\r\n    }\r\n  }\r\n\r\n  public static getSqrtPriceX64FromTick(tick: number): BN {\r\n    if (!Number.isInteger(tick)) {\r\n      throw new Error(\"tick must be integer\");\r\n    }\r\n    if (tick < MIN_TICK || tick > MAX_TICK) {\r\n      throw new Error(\"tick must be in MIN_TICK and MAX_TICK\");\r\n    }\r\n    const tickAbs: number = tick < 0 ? tick * -1 : tick;\r\n\r\n    let ratio: BN = (tickAbs & 0x1) != 0 ? new BN(\"18445821805675395072\") : new BN(\"18446744073709551616\");\r\n    if ((tickAbs & 0x2) != 0) ratio = mulRightShift(ratio, new BN(\"18444899583751176192\"));\r\n    if ((tickAbs & 0x4) != 0) ratio = mulRightShift(ratio, new BN(\"18443055278223355904\"));\r\n    if ((tickAbs & 0x8) != 0) ratio = mulRightShift(ratio, new BN(\"18439367220385607680\"));\r\n    if ((tickAbs & 0x10) != 0) ratio = mulRightShift(ratio, new BN(\"18431993317065453568\"));\r\n    if ((tickAbs & 0x20) != 0) ratio = mulRightShift(ratio, new BN(\"18417254355718170624\"));\r\n    if ((tickAbs & 0x40) != 0) ratio = mulRightShift(ratio, new BN(\"18387811781193609216\"));\r\n    if ((tickAbs & 0x80) != 0) ratio = mulRightShift(ratio, new BN(\"18329067761203558400\"));\r\n    if ((tickAbs & 0x100) != 0) ratio = mulRightShift(ratio, new BN(\"18212142134806163456\"));\r\n    if ((tickAbs & 0x200) != 0) ratio = mulRightShift(ratio, new BN(\"17980523815641700352\"));\r\n    if ((tickAbs & 0x400) != 0) ratio = mulRightShift(ratio, new BN(\"17526086738831433728\"));\r\n    if ((tickAbs & 0x800) != 0) ratio = mulRightShift(ratio, new BN(\"16651378430235570176\"));\r\n    if ((tickAbs & 0x1000) != 0) ratio = mulRightShift(ratio, new BN(\"15030750278694412288\"));\r\n    if ((tickAbs & 0x2000) != 0) ratio = mulRightShift(ratio, new BN(\"12247334978884435968\"));\r\n    if ((tickAbs & 0x4000) != 0) ratio = mulRightShift(ratio, new BN(\"8131365268886854656\"));\r\n    if ((tickAbs & 0x8000) != 0) ratio = mulRightShift(ratio, new BN(\"3584323654725218816\"));\r\n    if ((tickAbs & 0x10000) != 0) ratio = mulRightShift(ratio, new BN(\"696457651848324352\"));\r\n    if ((tickAbs & 0x20000) != 0) ratio = mulRightShift(ratio, new BN(\"26294789957507116\"));\r\n    if ((tickAbs & 0x40000) != 0) ratio = mulRightShift(ratio, new BN(\"37481735321082\"));\r\n\r\n    if (tick > 0) ratio = MaxUint128.div(ratio);\r\n    return ratio;\r\n  }\r\n\r\n  public static getTickFromPrice(price: Decimal, decimalsA: number, decimalsB: number): number {\r\n    return SqrtPriceMath.getTickFromSqrtPriceX64(SqrtPriceMath.priceToSqrtPriceX64(price, decimalsA, decimalsB));\r\n  }\r\n\r\n  public static getTickFromSqrtPriceX64(sqrtPriceX64: BN): number {\r\n    if (sqrtPriceX64.gt(MAX_SQRT_PRICE_X64) || sqrtPriceX64.lt(MIN_SQRT_PRICE_X64)) {\r\n      throw new Error(\"Provided sqrtPrice is not within the supported sqrtPrice range.\");\r\n    }\r\n\r\n    const msb = sqrtPriceX64.bitLength() - 1;\r\n    const adjustedMsb = new BN(msb - 64);\r\n    const log2pIntegerX32 = signedLeftShift(adjustedMsb, 32, 128);\r\n\r\n    let bit = new BN(\"8000000000000000\", \"hex\");\r\n    let precision = 0;\r\n    let log2pFractionX64 = new BN(0);\r\n\r\n    let r = msb >= 64 ? sqrtPriceX64.shrn(msb - 63) : sqrtPriceX64.shln(63 - msb);\r\n\r\n    while (bit.gt(new BN(0)) && precision < BIT_PRECISION) {\r\n      r = r.mul(r);\r\n      const rMoreThanTwo = r.shrn(127);\r\n      r = r.shrn(63 + rMoreThanTwo.toNumber());\r\n      log2pFractionX64 = log2pFractionX64.add(bit.mul(rMoreThanTwo));\r\n      bit = bit.shrn(1);\r\n      precision += 1;\r\n    }\r\n\r\n    const log2pFractionX32 = log2pFractionX64.shrn(32);\r\n\r\n    const log2pX32 = log2pIntegerX32.add(log2pFractionX32);\r\n    const logbpX64 = log2pX32.mul(new BN(LOG_B_2_X32));\r\n\r\n    const tickLow = signedRightShift(logbpX64.sub(new BN(LOG_B_P_ERR_MARGIN_LOWER_X64)), 64, 128).toNumber();\r\n    const tickHigh = signedRightShift(logbpX64.add(new BN(LOG_B_P_ERR_MARGIN_UPPER_X64)), 64, 128).toNumber();\r\n\r\n    if (tickLow == tickHigh) {\r\n      return tickLow;\r\n    } else {\r\n      const derivedTickHighSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tickHigh);\r\n      return derivedTickHighSqrtPriceX64.lte(sqrtPriceX64) ? tickHigh : tickLow;\r\n    }\r\n  }\r\n}\r\n\r\n// tick math\r\nexport class TickMath {\r\n  public static getTickWithPriceAndTickspacing(\r\n    price: Decimal,\r\n    tickSpacing: number,\r\n    mintDecimalsA: number,\r\n    mintDecimalsB: number,\r\n  ): number {\r\n    const tick = SqrtPriceMath.getTickFromSqrtPriceX64(\r\n      SqrtPriceMath.priceToSqrtPriceX64(price, mintDecimalsA, mintDecimalsB),\r\n    );\r\n    let result = tick / tickSpacing;\r\n    if (result < 0) {\r\n      result = Math.floor(result);\r\n    } else {\r\n      result = Math.ceil(result);\r\n    }\r\n    return result * tickSpacing;\r\n  }\r\n\r\n  public static roundPriceWithTickspacing(\r\n    price: Decimal,\r\n    tickSpacing: number,\r\n    mintDecimalsA: number,\r\n    mintDecimalsB: number,\r\n  ): Decimal {\r\n    const tick = TickMath.getTickWithPriceAndTickspacing(price, tickSpacing, mintDecimalsA, mintDecimalsB);\r\n    const sqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    return SqrtPriceMath.sqrtPriceX64ToPrice(sqrtPriceX64, mintDecimalsA, mintDecimalsB);\r\n  }\r\n}\r\n\r\nexport class LiquidityMath {\r\n  public static addDelta(x: BN, y: BN): BN {\r\n    return x.add(y);\r\n  }\r\n\r\n  public static getTokenAmountAFromLiquidity(\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    roundUp: boolean,\r\n  ): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    if (!sqrtPriceX64A.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64A must greater than 0\");\r\n    }\r\n\r\n    const numerator1 = liquidity.ushln(U64Resolution);\r\n    const numerator2 = sqrtPriceX64B.sub(sqrtPriceX64A);\r\n\r\n    return roundUp\r\n      ? MathUtil.mulDivRoundingUp(MathUtil.mulDivCeil(numerator1, numerator2, sqrtPriceX64B), ONE, sqrtPriceX64A)\r\n      : MathUtil.mulDivFloor(numerator1, numerator2, sqrtPriceX64B).div(sqrtPriceX64A);\r\n  }\r\n\r\n  public static getTokenAmountBFromLiquidity(\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    roundUp: boolean,\r\n  ): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n    if (!sqrtPriceX64A.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64A must greater than 0\");\r\n    }\r\n\r\n    return roundUp\r\n      ? MathUtil.mulDivCeil(liquidity, sqrtPriceX64B.sub(sqrtPriceX64A), Q64)\r\n      : MathUtil.mulDivFloor(liquidity, sqrtPriceX64B.sub(sqrtPriceX64A), Q64);\r\n  }\r\n\r\n  public static getLiquidityFromTokenAmountA(sqrtPriceX64A: BN, sqrtPriceX64B: BN, amountA: BN, roundUp: boolean): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    const numerator = amountA.mul(sqrtPriceX64A).mul(sqrtPriceX64B);\r\n    const denominator = sqrtPriceX64B.sub(sqrtPriceX64A);\r\n    const result = numerator.div(denominator);\r\n\r\n    if (roundUp) {\r\n      return MathUtil.mulDivRoundingUp(result, ONE, MaxU64);\r\n    } else {\r\n      return result.shrn(U64Resolution);\r\n    }\r\n  }\r\n\r\n  public static getLiquidityFromTokenAmountB(sqrtPriceX64A: BN, sqrtPriceX64B: BN, amountB: BN): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n    return MathUtil.mulDivFloor(amountB, MaxU64, sqrtPriceX64B.sub(sqrtPriceX64A));\r\n  }\r\n\r\n  public static getLiquidityFromTokenAmounts(\r\n    sqrtPriceCurrentX64: BN,\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    amountA: BN,\r\n    amountB: BN,\r\n  ): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    if (sqrtPriceCurrentX64.lte(sqrtPriceX64A)) {\r\n      return LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64A, sqrtPriceX64B, amountA, false);\r\n    } else if (sqrtPriceCurrentX64.lt(sqrtPriceX64B)) {\r\n      const liquidity0 = LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceCurrentX64, sqrtPriceX64B, amountA, false);\r\n      const liquidity1 = LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceCurrentX64, amountB);\r\n      return liquidity0.lt(liquidity1) ? liquidity0 : liquidity1;\r\n    } else {\r\n      return LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64B, amountB);\r\n    }\r\n  }\r\n\r\n  public static getAmountsFromLiquidity(\r\n    sqrtPriceCurrentX64: BN,\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    roundUp: boolean,\r\n  ): { amountA: BN; amountB: BN } {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    if (sqrtPriceCurrentX64.lte(sqrtPriceX64A)) {\r\n      return {\r\n        amountA: LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64A, sqrtPriceX64B, liquidity, roundUp),\r\n        amountB: new BN(0),\r\n      };\r\n    } else if (sqrtPriceCurrentX64.lt(sqrtPriceX64B)) {\r\n      const amountA = LiquidityMath.getTokenAmountAFromLiquidity(\r\n        sqrtPriceCurrentX64,\r\n        sqrtPriceX64B,\r\n        liquidity,\r\n        roundUp,\r\n      );\r\n      const amountB = LiquidityMath.getTokenAmountBFromLiquidity(\r\n        sqrtPriceX64A,\r\n        sqrtPriceCurrentX64,\r\n        liquidity,\r\n        roundUp,\r\n      );\r\n      return { amountA, amountB };\r\n    } else {\r\n      return {\r\n        amountA: new BN(0),\r\n        amountB: LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64A, sqrtPriceX64B, liquidity, roundUp),\r\n      };\r\n    }\r\n  }\r\n\r\n  public static getAmountsFromLiquidityWithSlippage(\r\n    sqrtPriceCurrentX64: BN,\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    amountMax: boolean,\r\n    roundUp: boolean,\r\n    amountSlippage: number,\r\n  ): { amountSlippageA: BN; amountSlippageB: BN } {\r\n    const { amountA, amountB } = LiquidityMath.getAmountsFromLiquidity(\r\n      sqrtPriceCurrentX64,\r\n      sqrtPriceX64A,\r\n      sqrtPriceX64B,\r\n      liquidity,\r\n      roundUp,\r\n    );\r\n    const coefficient = amountMax ? 1 + amountSlippage : 1 - amountSlippage;\r\n\r\n    const amount0Slippage = new BN(new Decimal(amountA.toString()).mul(coefficient).toFixed(0));\r\n    const amount1Slippage = new BN(new Decimal(amountB.toString()).mul(coefficient).toFixed(0));\r\n    return {\r\n      amountSlippageA: amount0Slippage,\r\n      amountSlippageB: amount1Slippage,\r\n    };\r\n  }\r\n\r\n  public static getAmountsOutFromLiquidity({\r\n    poolInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n    amountAddFee,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    slippage: number;\r\n    add: boolean;\r\n\r\n    epochInfo: EpochInfo;\r\n    amountAddFee: boolean;\r\n  }): ReturnTypeGetLiquidityAmountOut {\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\r\n\r\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\r\n\r\n    const amounts = LiquidityMath.getAmountsFromLiquidity(sqrtPriceX64, sqrtPriceX64A, sqrtPriceX64B, liquidity, add);\r\n\r\n    const [amountA, amountB] = [\r\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, amountAddFee),\r\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, amountAddFee),\r\n    ];\r\n    const [amountSlippageA, amountSlippageB] = [\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountA.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintA.extensions?.feeConfig,\r\n        epochInfo,\r\n        amountAddFee,\r\n      ),\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountB.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintB.extensions?.feeConfig,\r\n        epochInfo,\r\n        amountAddFee,\r\n      ),\r\n    ];\r\n\r\n    return {\r\n      liquidity,\r\n      amountA,\r\n      amountB,\r\n      amountSlippageA,\r\n      amountSlippageB,\r\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\r\n    };\r\n  }\r\n}\r\n\r\n// swap math\r\n\r\ntype SwapStep = {\r\n  sqrtPriceX64Next: BN;\r\n  amountIn: BN;\r\n  amountOut: BN;\r\n  feeAmount: BN;\r\n};\r\n\r\nexport interface StepComputations {\r\n  sqrtPriceStartX64: BN;\r\n  tickNext: number;\r\n  initialized: boolean;\r\n  sqrtPriceNextX64: BN;\r\n  amountIn: BN;\r\n  amountOut: BN;\r\n  feeAmount: BN;\r\n}\r\n\r\nexport abstract class SwapMath {\r\n  public static swapCompute(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    tickArrayBitmap: BN[],\r\n    tickarrayBitmapExtension: TickArrayBitmapExtensionType,\r\n    zeroForOne: boolean,\r\n    fee: number,\r\n    liquidity: BN,\r\n    currentTick: number,\r\n    tickSpacing: number,\r\n    currentSqrtPriceX64: BN,\r\n    amountSpecified: BN,\r\n    lastSavedTickArrayStartIndex: number,\r\n    sqrtPriceLimitX64?: BN,\r\n    catchLiquidityInsufficient = false,\r\n  ): {\r\n    allTrade: boolean;\r\n    amountSpecifiedRemaining: BN;\r\n    amountCalculated: BN;\r\n    feeAmount: BN;\r\n    sqrtPriceX64: BN;\r\n    liquidity: BN;\r\n    tickCurrent: number;\r\n    accounts: PublicKey[];\r\n  } {\r\n    if (amountSpecified.eq(ZERO)) {\r\n      throw new Error(\"amountSpecified must not be 0\");\r\n    }\r\n    if (!sqrtPriceLimitX64) sqrtPriceLimitX64 = zeroForOne ? MIN_SQRT_PRICE_X64.add(ONE) : MAX_SQRT_PRICE_X64.sub(ONE);\r\n\r\n    if (zeroForOne) {\r\n      if (sqrtPriceLimitX64.lt(MIN_SQRT_PRICE_X64)) {\r\n        throw new Error(\"sqrtPriceX64 must greater than MIN_SQRT_PRICE_X64\");\r\n      }\r\n\r\n      if (sqrtPriceLimitX64.gte(currentSqrtPriceX64)) {\r\n        throw new Error(\"sqrtPriceX64 must smaller than current\");\r\n      }\r\n    } else {\r\n      if (sqrtPriceLimitX64.gt(MAX_SQRT_PRICE_X64)) {\r\n        throw new Error(\"sqrtPriceX64 must smaller than MAX_SQRT_PRICE_X64\");\r\n      }\r\n\r\n      if (sqrtPriceLimitX64.lte(currentSqrtPriceX64)) {\r\n        throw new Error(\"sqrtPriceX64 must greater than current\");\r\n      }\r\n    }\r\n    const baseInput = amountSpecified.gt(ZERO);\r\n\r\n    const state = {\r\n      amountSpecifiedRemaining: amountSpecified,\r\n      amountCalculated: ZERO,\r\n      sqrtPriceX64: currentSqrtPriceX64,\r\n      tick:\r\n        currentTick > lastSavedTickArrayStartIndex\r\n          ? Math.min(lastSavedTickArrayStartIndex + TickQuery.tickCount(tickSpacing) - 1, currentTick)\r\n          : lastSavedTickArrayStartIndex,\r\n      accounts: [] as PublicKey[],\r\n      liquidity,\r\n      feeAmount: new BN(0),\r\n    };\r\n    let tickAarrayStartIndex = lastSavedTickArrayStartIndex;\r\n    let tickArrayCurrent = tickArrayCache[lastSavedTickArrayStartIndex];\r\n    let loopCount = 0;\r\n    let t = !zeroForOne && tickArrayCurrent.startTickIndex === state.tick;\r\n    while (\r\n      !state.amountSpecifiedRemaining.eq(ZERO) &&\r\n      !state.sqrtPriceX64.eq(sqrtPriceLimitX64)\r\n      // state.tick < MAX_TICK &&\r\n      // state.tick > MIN_TICK\r\n    ) {\r\n      if (loopCount > 10) {\r\n        // throw Error('liquidity limit')\r\n      }\r\n      const step: Partial<StepComputations> = {};\r\n      step.sqrtPriceStartX64 = state.sqrtPriceX64;\r\n\r\n      const tickState: Tick | null = TickUtils.nextInitTick(tickArrayCurrent, state.tick, tickSpacing, zeroForOne, t);\r\n\r\n      let nextInitTick: Tick | null = tickState ? tickState : null; // TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne)\r\n      let tickArrayAddress: null | PublicKey = null;\r\n\r\n      if (!nextInitTick?.liquidityGross.gtn(0)) {\r\n        const nextInitTickArrayIndex = PoolUtils.nextInitializedTickArrayStartIndex(\r\n          {\r\n            tickCurrent: state.tick,\r\n            tickSpacing,\r\n            tickArrayBitmap,\r\n            exBitmapInfo: tickarrayBitmapExtension,\r\n          },\r\n          tickAarrayStartIndex,\r\n          zeroForOne,\r\n        );\r\n        if (!nextInitTickArrayIndex.isExist) {\r\n          if (catchLiquidityInsufficient) {\r\n            return {\r\n              allTrade: false,\r\n              amountSpecifiedRemaining: state.amountSpecifiedRemaining,\r\n              amountCalculated: state.amountCalculated,\r\n              feeAmount: state.feeAmount,\r\n              sqrtPriceX64: state.sqrtPriceX64,\r\n              liquidity: state.liquidity,\r\n              tickCurrent: state.tick,\r\n              accounts: state.accounts,\r\n            };\r\n          }\r\n          throw Error(\"swapCompute LiquidityInsufficient\");\r\n        }\r\n        tickAarrayStartIndex = nextInitTickArrayIndex.nextStartIndex;\r\n\r\n        const { publicKey: expectedNextTickArrayAddress } = getPdaTickArrayAddress(\r\n          programId,\r\n          poolId,\r\n          tickAarrayStartIndex,\r\n        );\r\n        tickArrayAddress = expectedNextTickArrayAddress;\r\n        tickArrayCurrent = tickArrayCache[tickAarrayStartIndex];\r\n\r\n        try {\r\n          nextInitTick = TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne);\r\n        } catch (e) {\r\n          throw Error(\"not found next tick info\");\r\n        }\r\n      }\r\n\r\n      step.tickNext = nextInitTick.tick;\r\n      step.initialized = nextInitTick.liquidityGross.gtn(0);\r\n      if (lastSavedTickArrayStartIndex !== tickAarrayStartIndex && tickArrayAddress) {\r\n        state.accounts.push(tickArrayAddress);\r\n        lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n      }\r\n      if (step.tickNext < MIN_TICK) {\r\n        step.tickNext = MIN_TICK;\r\n      } else if (step.tickNext > MAX_TICK) {\r\n        step.tickNext = MAX_TICK;\r\n      }\r\n\r\n      step.sqrtPriceNextX64 = SqrtPriceMath.getSqrtPriceX64FromTick(step.tickNext);\r\n      let targetPrice: BN;\r\n      if (\r\n        (zeroForOne && step.sqrtPriceNextX64.lt(sqrtPriceLimitX64)) ||\r\n        (!zeroForOne && step.sqrtPriceNextX64.gt(sqrtPriceLimitX64))\r\n      ) {\r\n        targetPrice = sqrtPriceLimitX64;\r\n      } else {\r\n        targetPrice = step.sqrtPriceNextX64;\r\n      }\r\n      [state.sqrtPriceX64, step.amountIn, step.amountOut, step.feeAmount] = SwapMath.swapStepCompute(\r\n        state.sqrtPriceX64,\r\n        targetPrice,\r\n        state.liquidity,\r\n        state.amountSpecifiedRemaining,\r\n        fee,\r\n        zeroForOne,\r\n      );\r\n\r\n      state.feeAmount = state.feeAmount.add(step.feeAmount);\r\n\r\n      if (baseInput) {\r\n        state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.sub(step.amountIn.add(step.feeAmount));\r\n        state.amountCalculated = state.amountCalculated.sub(step.amountOut);\r\n      } else {\r\n        state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.add(step.amountOut);\r\n        state.amountCalculated = state.amountCalculated.add(step.amountIn.add(step.feeAmount));\r\n      }\r\n      if (state.sqrtPriceX64.eq(step.sqrtPriceNextX64)) {\r\n        if (step.initialized) {\r\n          let liquidityNet = nextInitTick.liquidityNet;\r\n          if (zeroForOne) liquidityNet = liquidityNet.mul(NEGATIVE_ONE);\r\n          state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\r\n        }\r\n\r\n        t = step.tickNext != state.tick && !zeroForOne && tickArrayCurrent.startTickIndex === step.tickNext;\r\n        state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext; //\r\n      } else if (state.sqrtPriceX64 != step.sqrtPriceStartX64) {\r\n        const _T = SqrtPriceMath.getTickFromSqrtPriceX64(state.sqrtPriceX64);\r\n        t = _T != state.tick && !zeroForOne && tickArrayCurrent.startTickIndex === _T;\r\n        state.tick = _T;\r\n      }\r\n      ++loopCount;\r\n    }\r\n\r\n    try {\r\n      const { nextStartIndex: tickAarrayStartIndex, isExist } = TickQuery.nextInitializedTickArray(\r\n        state.tick,\r\n        tickSpacing,\r\n        zeroForOne,\r\n        tickArrayBitmap,\r\n        tickarrayBitmapExtension,\r\n      );\r\n      if (isExist && lastSavedTickArrayStartIndex !== tickAarrayStartIndex) {\r\n        state.accounts.push(getPdaTickArrayAddress(programId, poolId, tickAarrayStartIndex).publicKey);\r\n        lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n      }\r\n    } catch (e) {\r\n      /* empty */\r\n    }\r\n\r\n    return {\r\n      allTrade: true,\r\n      amountSpecifiedRemaining: ZERO,\r\n      amountCalculated: state.amountCalculated,\r\n      feeAmount: state.feeAmount,\r\n      sqrtPriceX64: state.sqrtPriceX64,\r\n      liquidity: state.liquidity,\r\n      tickCurrent: state.tick,\r\n      accounts: state.accounts,\r\n    };\r\n  }\r\n  // public static swapCompute(\r\n  //   programId: PublicKey,\r\n  //   poolId: PublicKey,\r\n  //   tickArrayCache: { [key: string]: TickArray },\r\n  //   tickArrayBitmap: BN[],\r\n  //   tickarrayBitmapExtension: TickArrayBitmapExtensionType,\r\n  //   zeroForOne: boolean,\r\n  //   fee: number,\r\n  //   liquidity: BN,\r\n  //   currentTick: number,\r\n  //   tickSpacing: number,\r\n  //   currentSqrtPriceX64: BN,\r\n  //   amountSpecified: BN,\r\n  //   lastSavedTickArrayStartIndex: number,\r\n  //   sqrtPriceLimitX64?: BN,\r\n  // ): {\r\n  //   amountCalculated: BN;\r\n  //   feeAmount: BN;\r\n  //   sqrtPriceX64: BN;\r\n  //   liquidity: BN;\r\n  //   tickCurrent: number;\r\n  //   accounts: PublicKey[];\r\n  // } {\r\n  //   if (amountSpecified.eq(ZERO)) {\r\n  //     throw new Error(\"amountSpecified must not be 0\");\r\n  //   }\r\n  //   if (!sqrtPriceLimitX64) sqrtPriceLimitX64 = zeroForOne ? MIN_SQRT_PRICE_X64.add(ONE) : MAX_SQRT_PRICE_X64.sub(ONE);\r\n\r\n  //   if (zeroForOne) {\r\n  //     if (sqrtPriceLimitX64.lt(MIN_SQRT_PRICE_X64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must greater than MIN_SQRT_PRICE_X64\");\r\n  //     }\r\n\r\n  //     if (sqrtPriceLimitX64.gte(currentSqrtPriceX64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must smaller than current\");\r\n  //     }\r\n  //   } else {\r\n  //     if (sqrtPriceLimitX64.gt(MAX_SQRT_PRICE_X64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must smaller than MAX_SQRT_PRICE_X64\");\r\n  //     }\r\n\r\n  //     if (sqrtPriceLimitX64.lte(currentSqrtPriceX64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must greater than current\");\r\n  //     }\r\n  //   }\r\n  //   const baseInput = amountSpecified.gt(ZERO);\r\n\r\n  //   const state = {\r\n  //     amountSpecifiedRemaining: amountSpecified,\r\n  //     amountCalculated: ZERO,\r\n  //     sqrtPriceX64: currentSqrtPriceX64,\r\n  //     tick:\r\n  //       currentTick > lastSavedTickArrayStartIndex\r\n  //         ? Math.min(lastSavedTickArrayStartIndex + TickQuery.tickCount(tickSpacing) - 1, currentTick)\r\n  //         : lastSavedTickArrayStartIndex,\r\n  //     accounts: [] as PublicKey[],\r\n  //     liquidity,\r\n  //     feeAmount: new BN(0),\r\n  //   };\r\n  //   let tickAarrayStartIndex = lastSavedTickArrayStartIndex;\r\n  //   let tickArrayCurrent = tickArrayCache[lastSavedTickArrayStartIndex];\r\n  //   let loopCount = 0;\r\n  //   while (\r\n  //     !state.amountSpecifiedRemaining.eq(ZERO) &&\r\n  //     !state.sqrtPriceX64.eq(sqrtPriceLimitX64)\r\n  //     // state.tick < MAX_TICK &&\r\n  //     // state.tick > MIN_TICK\r\n  //   ) {\r\n  //     if (loopCount > 10) {\r\n  //       throw Error(\"liquidity limit\");\r\n  //     }\r\n  //     const step: Partial<StepComputations> = {};\r\n  //     step.sqrtPriceStartX64 = state.sqrtPriceX64;\r\n\r\n  //     const tickState: Tick | null = TickUtils.nextInitTick(tickArrayCurrent, state.tick, tickSpacing, zeroForOne);\r\n\r\n  //     let nextInitTick: Tick | null = tickState ? tickState : null; // TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne)\r\n  //     let tickArrayAddress: PublicKey | null = null;\r\n\r\n  //     if (!nextInitTick?.liquidityGross.gtn(0)) {\r\n  //       const nextInitTickArrayIndex = PoolUtils.nextInitializedTickArrayStartIndex(\r\n  //         {\r\n  //           tickCurrent: state.tick,\r\n  //           tickSpacing,\r\n  //           tickArrayBitmap,\r\n  //           exBitmapInfo: tickarrayBitmapExtension,\r\n  //         },\r\n  //         tickAarrayStartIndex,\r\n  //         zeroForOne,\r\n  //       );\r\n  //       if (!nextInitTickArrayIndex.isExist) {\r\n  //         throw Error(\"swapCompute LiquidityInsufficient\");\r\n  //       }\r\n  //       tickAarrayStartIndex = nextInitTickArrayIndex.nextStartIndex;\r\n\r\n  //       const { publicKey: expectedNextTickArrayAddress } = getPdaTickArrayAddress(\r\n  //         programId,\r\n  //         poolId,\r\n  //         tickAarrayStartIndex,\r\n  //       );\r\n  //       tickArrayAddress = expectedNextTickArrayAddress;\r\n  //       tickArrayCurrent = tickArrayCache[tickAarrayStartIndex];\r\n\r\n  //       nextInitTick = TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne);\r\n  //     }\r\n\r\n  //     step.tickNext = nextInitTick.tick;\r\n  //     step.initialized = nextInitTick.liquidityGross.gtn(0);\r\n  //     if (lastSavedTickArrayStartIndex !== tickAarrayStartIndex && tickArrayAddress) {\r\n  //       state.accounts.push(tickArrayAddress);\r\n  //       lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n  //     }\r\n  //     if (step.tickNext < MIN_TICK) {\r\n  //       step.tickNext = MIN_TICK;\r\n  //     } else if (step.tickNext > MAX_TICK) {\r\n  //       step.tickNext = MAX_TICK;\r\n  //     }\r\n\r\n  //     step.sqrtPriceNextX64 = SqrtPriceMath.getSqrtPriceX64FromTick(step.tickNext);\r\n  //     let targetPrice: BN;\r\n  //     if (\r\n  //       (zeroForOne && step.sqrtPriceNextX64.lt(sqrtPriceLimitX64)) ||\r\n  //       (!zeroForOne && step.sqrtPriceNextX64.gt(sqrtPriceLimitX64))\r\n  //     ) {\r\n  //       targetPrice = sqrtPriceLimitX64;\r\n  //     } else {\r\n  //       targetPrice = step.sqrtPriceNextX64;\r\n  //     }\r\n  //     [state.sqrtPriceX64, step.amountIn, step.amountOut, step.feeAmount] = SwapMath.swapStepCompute(\r\n  //       state.sqrtPriceX64,\r\n  //       targetPrice,\r\n  //       state.liquidity,\r\n  //       state.amountSpecifiedRemaining,\r\n  //       fee,\r\n  //     );\r\n\r\n  //     state.feeAmount = state.feeAmount.add(step.feeAmount);\r\n\r\n  //     if (baseInput) {\r\n  //       state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.sub(step.amountIn.add(step.feeAmount));\r\n  //       state.amountCalculated = state.amountCalculated.sub(step.amountOut);\r\n  //     } else {\r\n  //       state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.add(step.amountOut);\r\n  //       state.amountCalculated = state.amountCalculated.add(step.amountIn.add(step.feeAmount));\r\n  //     }\r\n  //     if (state.sqrtPriceX64.eq(step.sqrtPriceNextX64)) {\r\n  //       if (step.initialized) {\r\n  //         let liquidityNet = nextInitTick.liquidityNet;\r\n  //         if (zeroForOne) liquidityNet = liquidityNet.mul(NEGATIVE_ONE);\r\n  //         state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\r\n  //       }\r\n  //       state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\r\n  //     } else if (state.sqrtPriceX64 != step.sqrtPriceStartX64) {\r\n  //       state.tick = SqrtPriceMath.getTickFromSqrtPriceX64(state.sqrtPriceX64);\r\n  //     }\r\n  //     ++loopCount;\r\n  //   }\r\n\r\n  //   // try {\r\n  //   //   console.log('state.tick', state.tick)\r\n  //   //   const { nextStartIndex: tickAarrayStartIndex } = TickQuery.nextInitializedTickArray(\r\n  //   //     state.tick,\r\n  //   //     tickSpacing,\r\n  //   //     zeroForOne,\r\n  //   //     tickArrayBitmap,\r\n  //   //     tickarrayBitmapExtension,\r\n  //   //   );\r\n  //   //   if (\r\n  //   //     lastSavedTickArrayStartIndex !== tickAarrayStartIndex\r\n  //   //   ) {\r\n  //   //     state.accounts.push(getPdaTickArrayAddress(\r\n  //   //       programId,\r\n  //   //       poolId,\r\n  //   //       tickAarrayStartIndex,\r\n  //   //     ).publicKey)\r\n  //   //     lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n  //   //   }\r\n  //   // } catch (e) { /* empty */ }\r\n\r\n  //   return {\r\n  //     amountCalculated: state.amountCalculated,\r\n  //     feeAmount: state.feeAmount,\r\n  //     sqrtPriceX64: state.sqrtPriceX64,\r\n  //     liquidity: state.liquidity,\r\n  //     tickCurrent: state.tick,\r\n  //     accounts: state.accounts,\r\n  //   };\r\n  // }\r\n\r\n  private static swapStepCompute(\r\n    sqrtPriceX64Current: BN,\r\n    sqrtPriceX64Target: BN,\r\n    liquidity: BN,\r\n    amountRemaining: BN,\r\n    feeRate: Fee,\r\n    zeroForOne: boolean,\r\n  ): [BN, BN, BN, BN] {\r\n    const swapStep: SwapStep = {\r\n      sqrtPriceX64Next: new BN(0),\r\n      amountIn: new BN(0),\r\n      amountOut: new BN(0),\r\n      feeAmount: new BN(0),\r\n    };\r\n\r\n    const baseInput = amountRemaining.gte(ZERO);\r\n\r\n    if (baseInput) {\r\n      const amountRemainingSubtractFee = MathUtil.mulDivFloor(\r\n        amountRemaining,\r\n        FEE_RATE_DENOMINATOR.sub(new BN(feeRate.toString())),\r\n        FEE_RATE_DENOMINATOR,\r\n      );\r\n      swapStep.amountIn = zeroForOne\r\n        ? LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64Target, sqrtPriceX64Current, liquidity, true)\r\n        : LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Current, sqrtPriceX64Target, liquidity, true);\r\n      if (amountRemainingSubtractFee.gte(swapStep.amountIn)) {\r\n        swapStep.sqrtPriceX64Next = sqrtPriceX64Target;\r\n      } else {\r\n        swapStep.sqrtPriceX64Next = SqrtPriceMath.getNextSqrtPriceX64FromInput(\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          amountRemainingSubtractFee,\r\n          zeroForOne,\r\n        );\r\n      }\r\n    } else {\r\n      swapStep.amountOut = zeroForOne\r\n        ? LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Target, sqrtPriceX64Current, liquidity, false)\r\n        : LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64Current, sqrtPriceX64Target, liquidity, false);\r\n      if (amountRemaining.mul(NEGATIVE_ONE).gte(swapStep.amountOut)) {\r\n        swapStep.sqrtPriceX64Next = sqrtPriceX64Target;\r\n      } else {\r\n        swapStep.sqrtPriceX64Next = SqrtPriceMath.getNextSqrtPriceX64FromOutput(\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          amountRemaining.mul(NEGATIVE_ONE),\r\n          zeroForOne,\r\n        );\r\n      }\r\n    }\r\n\r\n    const reachTargetPrice = sqrtPriceX64Target.eq(swapStep.sqrtPriceX64Next);\r\n\r\n    if (zeroForOne) {\r\n      if (!(reachTargetPrice && baseInput)) {\r\n        swapStep.amountIn = LiquidityMath.getTokenAmountAFromLiquidity(\r\n          swapStep.sqrtPriceX64Next,\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          true,\r\n        );\r\n      }\r\n\r\n      if (!(reachTargetPrice && !baseInput)) {\r\n        swapStep.amountOut = LiquidityMath.getTokenAmountBFromLiquidity(\r\n          swapStep.sqrtPriceX64Next,\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          false,\r\n        );\r\n      }\r\n    } else {\r\n      swapStep.amountIn =\r\n        reachTargetPrice && baseInput\r\n          ? swapStep.amountIn\r\n          : LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Current, swapStep.sqrtPriceX64Next, liquidity, true);\r\n      swapStep.amountOut =\r\n        reachTargetPrice && !baseInput\r\n          ? swapStep.amountOut\r\n          : LiquidityMath.getTokenAmountAFromLiquidity(\r\n            sqrtPriceX64Current,\r\n            swapStep.sqrtPriceX64Next,\r\n            liquidity,\r\n            false,\r\n          );\r\n    }\r\n\r\n    if (!baseInput && swapStep.amountOut.gt(amountRemaining.mul(NEGATIVE_ONE))) {\r\n      swapStep.amountOut = amountRemaining.mul(NEGATIVE_ONE);\r\n    }\r\n    if (baseInput && !swapStep.sqrtPriceX64Next.eq(sqrtPriceX64Target)) {\r\n      swapStep.feeAmount = amountRemaining.sub(swapStep.amountIn);\r\n    } else {\r\n      swapStep.feeAmount = MathUtil.mulDivCeil(\r\n        swapStep.amountIn,\r\n        new BN(feeRate),\r\n        FEE_RATE_DENOMINATOR.sub(new BN(feeRate)),\r\n      );\r\n    }\r\n    return [swapStep.sqrtPriceX64Next, swapStep.amountIn, swapStep.amountOut, swapStep.feeAmount];\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nexport function u16ToBytes(num: number): Uint8Array {\r\n  const arr = new ArrayBuffer(2);\r\n  const view = new DataView(arr);\r\n  view.setUint16(0, num, false);\r\n  return new Uint8Array(arr);\r\n}\r\n\r\nexport function i16ToBytes(num: number): Uint8Array {\r\n  const arr = new ArrayBuffer(2);\r\n  const view = new DataView(arr);\r\n  view.setInt16(0, num, false);\r\n  return new Uint8Array(arr);\r\n}\r\n\r\nexport function u32ToBytes(num: number): Uint8Array {\r\n  const arr = new ArrayBuffer(4);\r\n  const view = new DataView(arr);\r\n  view.setUint32(0, num, false);\r\n  return new Uint8Array(arr);\r\n}\r\n\r\nexport function i32ToBytes(num: number): Uint8Array {\r\n  const arr = new ArrayBuffer(4);\r\n  const view = new DataView(arr);\r\n  view.setInt32(0, num, false);\r\n  return new Uint8Array(arr);\r\n}\r\n\r\nexport function leadingZeros(bitNum: number, data: BN): number {\r\n  let i = 0;\r\n  for (let j = bitNum - 1; j >= 0; j--) {\r\n    if (!data.testn(j)) {\r\n      i++;\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  return i;\r\n}\r\n\r\nexport function trailingZeros(bitNum: number, data: BN) {\r\n  let i = 0;\r\n  for (let j = 0; j < bitNum; j++) {\r\n    if (!data.testn(j)) {\r\n      i++;\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  return i;\r\n}\r\n\r\nexport function isZero(bitNum: number, data: BN): boolean {\r\n  for (let i = 0; i < bitNum; i++) {\r\n    if (data.testn(i)) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function mostSignificantBit(bitNum: number, data: BN): number | null {\r\n  if (isZero(bitNum, data)) return null;\r\n  else return leadingZeros(bitNum, data);\r\n}\r\n\r\nexport function leastSignificantBit(bitNum: number, data: BN): number | null {\r\n  if (isZero(bitNum, data)) return null;\r\n  else return trailingZeros(bitNum, data);\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { findProgramAddress, METADATA_PROGRAM_ID } from \"../../../common\";\r\n\r\nimport { i32ToBytes, u16ToBytes } from \"./util\";\r\n\r\nexport const AMM_CONFIG_SEED = Buffer.from(\"amm_config\", \"utf8\");\r\nexport const POOL_SEED = Buffer.from(\"pool\", \"utf8\");\r\nexport const POOL_VAULT_SEED = Buffer.from(\"pool_vault\", \"utf8\");\r\nexport const POOL_REWARD_VAULT_SEED = Buffer.from(\"pool_reward_vault\", \"utf8\");\r\nexport const POSITION_SEED = Buffer.from(\"position\", \"utf8\");\r\nexport const TICK_ARRAY_SEED = Buffer.from(\"tick_array\", \"utf8\");\r\nexport const OPERATION_SEED = Buffer.from(\"operation\", \"utf8\");\r\nexport const POOL_TICK_ARRAY_BITMAP_SEED = Buffer.from(\"pool_tick_array_bitmap_extension\", \"utf8\");\r\nexport const OBSERVATION_SEED = Buffer.from(\"observation\", \"utf8\");\r\n\r\nexport function getPdaAmmConfigId(\r\n  programId: PublicKey,\r\n  index: number,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([AMM_CONFIG_SEED, u16ToBytes(index)], programId);\r\n}\r\n\r\nexport function getPdaPoolId(\r\n  programId: PublicKey,\r\n  ammConfigId: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_SEED, ammConfigId.toBuffer(), mintA.toBuffer(), mintB.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaPoolVaultId(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  vaultMint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_VAULT_SEED, poolId.toBuffer(), vaultMint.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaPoolRewardVaulId(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  rewardMint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_REWARD_VAULT_SEED, poolId.toBuffer(), rewardMint.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaTickArrayAddress(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  startIndex: number,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([TICK_ARRAY_SEED, poolId.toBuffer(), i32ToBytes(startIndex)], programId);\r\n}\r\n\r\nexport function getPdaProtocolPositionAddress(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  tickLower: number,\r\n  tickUpper: number,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress(\r\n    [POSITION_SEED, poolId.toBuffer(), i32ToBytes(tickLower), i32ToBytes(tickUpper)],\r\n    programId,\r\n  );\r\n}\r\n\r\nexport function getPdaPersonalPositionAddress(\r\n  programId: PublicKey,\r\n  nftMint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POSITION_SEED, nftMint.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaMetadataKey(mint: PublicKey): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress(\r\n    [Buffer.from(\"metadata\", \"utf8\"), METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    METADATA_PROGRAM_ID,\r\n  );\r\n}\r\n\r\nexport function getPdaOperationAccount(programId: PublicKey): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([OPERATION_SEED], programId);\r\n}\r\n\r\nexport function getPdaExBitmapAccount(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_TICK_ARRAY_BITMAP_SEED, poolId.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaObservationAccount(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([OBSERVATION_SEED, poolId.toBuffer()], programId);\r\n}\r\n\r\nexport const POOL_LOCK_ID_SEED = Buffer.from(\"locked_position\", \"utf8\");\r\nexport function getPdaLockPositionId(\r\n  programId: PublicKey,\r\n  positionId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_LOCK_ID_SEED, positionId.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaLockClPositionIdV2(\r\n  programId: PublicKey,\r\n  lockNftMint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_LOCK_ID_SEED, lockNftMint.toBuffer()], programId);\r\n}\r\n\r\nexport const SUPPORT_MINT_SEED = Buffer.from(\"support_mint\", \"utf8\");\r\nexport function getPdaMintExAccount(\r\n  programId: PublicKey,\r\n  mintAddress: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([SUPPORT_MINT_SEED, mintAddress.toBuffer()], programId);\r\n}\r\n","import { Connection, EpochInfo, PublicKey } from \"@solana/web3.js\";\r\nimport { TOKEN_2022_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport BN from \"bn.js\";\r\n\r\nimport {\r\n  ClmmPoolInfo,\r\n  ClmmPoolRewardInfo,\r\n  ClmmPoolRewardLayoutInfo,\r\n  ComputeClmmPoolInfo,\r\n  ReturnTypeComputeAmountOut,\r\n  ReturnTypeComputeAmountOutBaseOut,\r\n  ReturnTypeComputeAmountOutFormat,\r\n  ReturnTypeFetchExBitmaps,\r\n  ReturnTypeFetchMultiplePoolTickArrays,\r\n  ReturnTypeGetLiquidityAmountOut,\r\n  SDKParsedConcentratedInfo,\r\n  TickArrayBitmapExtensionType,\r\n} from \"../type\";\r\n\r\nimport { ApiV3PoolInfoConcentratedItem, ApiV3Token } from \"@/api/type\";\r\n\r\nimport Decimal from \"decimal.js\";\r\nimport {\r\n  getMultipleAccountsInfo,\r\n  getMultipleAccountsInfoWithCustomFlags,\r\n  getTransferAmountFeeV2,\r\n  minExpirationTime,\r\n  solToWSol,\r\n} from \"@/common\";\r\nimport { Percent, Price, Token, TokenAmount } from \"@/module\";\r\nimport { TokenAccountRaw } from \"@/raydium/account/types\";\r\nimport { PoolInfoLayout, PositionInfoLayout, TickArrayBitmapExtensionLayout, TickArrayLayout } from \"../layout\";\r\nimport { MAX_SQRT_PRICE_X64, MAX_TICK, MIN_SQRT_PRICE_X64, MIN_TICK, NEGATIVE_ONE, Q64, ZERO } from \"./constants\";\r\nimport { LiquidityMath, MathUtil, SqrtPriceMath, SwapMath } from \"./math\";\r\nimport { getPdaExBitmapAccount, getPdaPersonalPositionAddress, getPdaTickArrayAddress } from \"./pda\";\r\nimport { PositionUtils } from \"./position\";\r\nimport { TICK_ARRAY_BITMAP_SIZE, Tick, TickArray, TickUtils } from \"./tick\";\r\nimport { TickArrayBitmap, TickArrayBitmapExtensionUtils } from \"./tickarrayBitmap\";\r\nimport { TickQuery } from \"./tickQuery\";\r\n\r\nexport class PoolUtils {\r\n  public static getOutputAmountAndRemainAccounts(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    inputTokenMint: PublicKey,\r\n    inputAmount: BN,\r\n    sqrtPriceLimitX64?: BN,\r\n    catchLiquidityInsufficient = false,\r\n  ): {\r\n    allTrade: boolean;\r\n    expectedAmountOut: BN;\r\n    remainingAccounts: PublicKey[];\r\n    executionPrice: BN;\r\n    feeAmount: BN;\r\n  } {\r\n    const zeroForOne = inputTokenMint.toBase58() === poolInfo.mintA.address;\r\n\r\n    const allNeededAccounts: PublicKey[] = [];\r\n    const {\r\n      isExist,\r\n      startIndex: firstTickArrayStartIndex,\r\n      nextAccountMeta,\r\n    } = this.getFirstInitializedTickArray(poolInfo, zeroForOne);\r\n    if (!isExist || firstTickArrayStartIndex === undefined || !nextAccountMeta) throw new Error(\"Invalid tick array\");\r\n\r\n    // try {\r\n    //   const preTick = this.preInitializedTickArrayStartIndex(poolInfo, !zeroForOne)\r\n    //   if (preTick.isExist) {\r\n    //     const { publicKey: address } = getPdaTickArrayAddress(\r\n    //       poolInfo.programId,\r\n    //       poolInfo.id,\r\n    //       preTick.nextStartIndex\r\n    //     );\r\n    //     allNeededAccounts.push(address)\r\n    //   }\r\n    // } catch (e) { /* empty */ }\r\n\r\n    allNeededAccounts.push(nextAccountMeta);\r\n    const {\r\n      allTrade,\r\n      amountCalculated: outputAmount,\r\n      accounts: reaminAccounts,\r\n      sqrtPriceX64: executionPrice,\r\n      feeAmount,\r\n    } = SwapMath.swapCompute(\r\n      poolInfo.programId,\r\n      poolInfo.id,\r\n      tickArrayCache,\r\n      poolInfo.tickArrayBitmap,\r\n      poolInfo.exBitmapInfo,\r\n      zeroForOne,\r\n      poolInfo.ammConfig.tradeFeeRate,\r\n      poolInfo.liquidity,\r\n      poolInfo.tickCurrent,\r\n      poolInfo.tickSpacing,\r\n      poolInfo.sqrtPriceX64,\r\n      inputAmount,\r\n      firstTickArrayStartIndex,\r\n      sqrtPriceLimitX64,\r\n      catchLiquidityInsufficient,\r\n    );\r\n    allNeededAccounts.push(...reaminAccounts);\r\n    return {\r\n      allTrade,\r\n      expectedAmountOut: outputAmount.mul(NEGATIVE_ONE),\r\n      remainingAccounts: allNeededAccounts,\r\n      executionPrice,\r\n      feeAmount,\r\n    };\r\n  }\r\n\r\n  public static getInputAmountAndRemainAccounts(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    outputTokenMint: PublicKey,\r\n    outputAmount: BN,\r\n    sqrtPriceLimitX64?: BN,\r\n  ): { expectedAmountIn: BN; remainingAccounts: PublicKey[]; executionPrice: BN; feeAmount: BN } {\r\n    const zeroForOne = outputTokenMint.toBase58() === poolInfo.mintB.address;\r\n\r\n    const allNeededAccounts: PublicKey[] = [];\r\n    const {\r\n      isExist,\r\n      startIndex: firstTickArrayStartIndex,\r\n      nextAccountMeta,\r\n    } = this.getFirstInitializedTickArray(poolInfo, zeroForOne);\r\n    if (!isExist || firstTickArrayStartIndex === undefined || !nextAccountMeta) throw new Error(\"Invalid tick array\");\r\n\r\n    try {\r\n      const preTick = this.preInitializedTickArrayStartIndex(poolInfo, zeroForOne);\r\n      if (preTick.isExist) {\r\n        const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, preTick.nextStartIndex);\r\n        allNeededAccounts.push(address);\r\n      }\r\n    } catch (e) {\r\n      /* empty */\r\n    }\r\n\r\n    allNeededAccounts.push(nextAccountMeta);\r\n    const {\r\n      amountCalculated: inputAmount,\r\n      accounts: reaminAccounts,\r\n      sqrtPriceX64: executionPrice,\r\n      feeAmount,\r\n    } = SwapMath.swapCompute(\r\n      poolInfo.programId,\r\n      poolInfo.id,\r\n      tickArrayCache,\r\n      poolInfo.tickArrayBitmap,\r\n      poolInfo.exBitmapInfo,\r\n      zeroForOne,\r\n      poolInfo.ammConfig.tradeFeeRate,\r\n      poolInfo.liquidity,\r\n      poolInfo.tickCurrent,\r\n      poolInfo.tickSpacing,\r\n      poolInfo.sqrtPriceX64,\r\n      outputAmount.mul(NEGATIVE_ONE),\r\n      firstTickArrayStartIndex,\r\n      sqrtPriceLimitX64,\r\n    );\r\n    allNeededAccounts.push(...reaminAccounts);\r\n    return { expectedAmountIn: inputAmount, remainingAccounts: allNeededAccounts, executionPrice, feeAmount };\r\n  }\r\n\r\n  public static getFirstInitializedTickArray(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    zeroForOne: boolean,\r\n  ):\r\n    | { isExist: true; startIndex: number; nextAccountMeta: PublicKey }\r\n    | { isExist: false; startIndex: undefined; nextAccountMeta: undefined } {\r\n    const { isInitialized, startIndex } = PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.tickSpacing, [\r\n      poolInfo.tickCurrent,\r\n    ])\r\n      ? TickArrayBitmapExtensionUtils.checkTickArrayIsInit(\r\n        TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing),\r\n        poolInfo.tickSpacing,\r\n        poolInfo.exBitmapInfo,\r\n      )\r\n      : TickUtils.checkTickArrayIsInitialized(\r\n        TickUtils.mergeTickArrayBitmap(poolInfo.tickArrayBitmap),\r\n        poolInfo.tickCurrent,\r\n        poolInfo.tickSpacing,\r\n      );\r\n\r\n    if (isInitialized) {\r\n      const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, startIndex);\r\n      return {\r\n        isExist: true,\r\n        startIndex,\r\n        nextAccountMeta: address,\r\n      };\r\n    }\r\n    const { isExist, nextStartIndex } = this.nextInitializedTickArrayStartIndex(\r\n      poolInfo,\r\n      TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing),\r\n      zeroForOne,\r\n    );\r\n    if (isExist) {\r\n      const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, nextStartIndex);\r\n      return {\r\n        isExist: true,\r\n        startIndex: nextStartIndex,\r\n        nextAccountMeta: address,\r\n      };\r\n    }\r\n    return { isExist: false, nextAccountMeta: undefined, startIndex: undefined };\r\n  }\r\n\r\n  public static preInitializedTickArrayStartIndex(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    zeroForOne: boolean,\r\n  ): { isExist: boolean; nextStartIndex: number } {\r\n    const currentOffset = Math.floor(poolInfo.tickCurrent / TickQuery.tickCount(poolInfo.tickSpacing));\r\n\r\n    const result: number[] = !zeroForOne\r\n      ? TickUtils.searchLowBitFromStart(\r\n        poolInfo.tickArrayBitmap,\r\n        poolInfo.exBitmapInfo,\r\n        currentOffset - 1,\r\n        1,\r\n        poolInfo.tickSpacing,\r\n      )\r\n      : TickUtils.searchHightBitFromStart(\r\n        poolInfo.tickArrayBitmap,\r\n        poolInfo.exBitmapInfo,\r\n        currentOffset + 1,\r\n        1,\r\n        poolInfo.tickSpacing,\r\n      );\r\n\r\n    return result.length > 0 ? { isExist: true, nextStartIndex: result[0] } : { isExist: false, nextStartIndex: 0 };\r\n  }\r\n\r\n  public static nextInitializedTickArrayStartIndex(\r\n    poolInfo:\r\n      | {\r\n        tickCurrent: number;\r\n        tickSpacing: number;\r\n        tickArrayBitmap: BN[];\r\n        exBitmapInfo: TickArrayBitmapExtensionType;\r\n      }\r\n      | ClmmPoolInfo,\r\n    lastTickArrayStartIndex: number,\r\n    zeroForOne: boolean,\r\n  ): { isExist: boolean; nextStartIndex: number } {\r\n    lastTickArrayStartIndex = TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing);\r\n\r\n    // eslint-disable-next-line no-constant-condition\r\n    while (true) {\r\n      const { isInit: startIsInit, tickIndex: startIndex } = TickArrayBitmap.nextInitializedTickArrayStartIndex(\r\n        TickUtils.mergeTickArrayBitmap(poolInfo.tickArrayBitmap),\r\n        lastTickArrayStartIndex,\r\n        poolInfo.tickSpacing,\r\n        zeroForOne,\r\n      );\r\n      if (startIsInit) {\r\n        return { isExist: true, nextStartIndex: startIndex };\r\n      }\r\n      lastTickArrayStartIndex = startIndex;\r\n\r\n      const { isInit, tickIndex } = TickArrayBitmapExtensionUtils.nextInitializedTickArrayFromOneBitmap(\r\n        lastTickArrayStartIndex,\r\n        poolInfo.tickSpacing,\r\n        zeroForOne,\r\n        poolInfo.exBitmapInfo,\r\n      );\r\n      if (isInit) return { isExist: true, nextStartIndex: tickIndex };\r\n\r\n      lastTickArrayStartIndex = tickIndex;\r\n\r\n      if (lastTickArrayStartIndex < MIN_TICK || lastTickArrayStartIndex > MAX_TICK)\r\n        return { isExist: false, nextStartIndex: 0 };\r\n    }\r\n\r\n    // const tickArrayBitmap = TickUtils.mergeTickArrayBitmap(\r\n    //   poolInfo.tickArrayBitmap\r\n    // );\r\n    // const currentOffset = TickUtils.getTickArrayOffsetInBitmapByTick(\r\n    //   poolInfo.tickCurrent,\r\n    //   poolInfo.tickSpacing\r\n    // );\r\n    // const result: number[] = zeroForOne ? TickUtils.searchLowBitFromStart(\r\n    //   tickArrayBitmap,\r\n    //   currentOffset - 1,\r\n    //   0,\r\n    //   1,\r\n    //   poolInfo.tickSpacing\r\n    // ) : TickUtils.searchHightBitFromStart(\r\n    //   tickArrayBitmap,\r\n    //   currentOffset,\r\n    //   1024,\r\n    //   1,\r\n    //   poolInfo.tickSpacing\r\n    // );\r\n\r\n    // return result.length > 0 ? { isExist: true, nextStartIndex: result[0] } : { isExist: false, nextStartIndex: 0 }\r\n  }\r\n\r\n  public static async updatePoolRewardInfos({\r\n    connection,\r\n    apiPoolInfo,\r\n    chainTime,\r\n    poolLiquidity,\r\n    rewardInfos,\r\n  }: {\r\n    connection: Connection;\r\n    apiPoolInfo: ApiV3PoolInfoConcentratedItem;\r\n    chainTime: number;\r\n    poolLiquidity: BN;\r\n    rewardInfos: ClmmPoolRewardLayoutInfo[];\r\n  }): Promise<ClmmPoolRewardInfo[]> {\r\n    const nRewardInfo: ClmmPoolRewardInfo[] = [];\r\n    for (let i = 0; i < rewardInfos.length; i++) {\r\n      const _itemReward = rewardInfos[i];\r\n      const apiRewardProgram =\r\n        apiPoolInfo.rewardDefaultInfos[i]?.mint.programId ??\r\n        (await connection.getAccountInfo(_itemReward.tokenMint))?.owner;\r\n      if (apiRewardProgram === undefined) throw Error(\"get new reward mint info error\");\r\n\r\n      const itemReward: ClmmPoolRewardInfo = {\r\n        ..._itemReward,\r\n        perSecond: MathUtil.x64ToDecimal(_itemReward.emissionsPerSecondX64),\r\n        remainingRewards: undefined,\r\n        tokenProgramId: new PublicKey(apiRewardProgram),\r\n      };\r\n\r\n      if (itemReward.tokenMint.equals(PublicKey.default)) continue;\r\n      if (chainTime <= itemReward.openTime.toNumber() || poolLiquidity.eq(ZERO)) {\r\n        nRewardInfo.push(itemReward);\r\n        continue;\r\n      }\r\n\r\n      const latestUpdateTime = new BN(Math.min(itemReward.endTime.toNumber(), chainTime));\r\n      const timeDelta = latestUpdateTime.sub(itemReward.lastUpdateTime);\r\n      const rewardGrowthDeltaX64 = MathUtil.mulDivFloor(timeDelta, itemReward.emissionsPerSecondX64, poolLiquidity);\r\n      const rewardGrowthGlobalX64 = itemReward.rewardGrowthGlobalX64.add(rewardGrowthDeltaX64);\r\n      const rewardEmissionedDelta = MathUtil.mulDivFloor(timeDelta, itemReward.emissionsPerSecondX64, Q64);\r\n      const rewardTotalEmissioned = itemReward.rewardTotalEmissioned.add(rewardEmissionedDelta);\r\n      nRewardInfo.push({\r\n        ...itemReward,\r\n        rewardGrowthGlobalX64,\r\n        rewardTotalEmissioned,\r\n        lastUpdateTime: latestUpdateTime,\r\n      });\r\n    }\r\n    return nRewardInfo;\r\n  }\r\n\r\n  public static isOverflowDefaultTickarrayBitmap(tickSpacing: number, tickarrayStartIndexs: number[]): boolean {\r\n    const { maxTickBoundary, minTickBoundary } = this.tickRange(tickSpacing);\r\n\r\n    for (const tickIndex of tickarrayStartIndexs) {\r\n      const tickarrayStartIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\r\n\r\n      if (tickarrayStartIndex >= maxTickBoundary || tickarrayStartIndex < minTickBoundary) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public static tickRange(tickSpacing: number): {\r\n    maxTickBoundary: number;\r\n    minTickBoundary: number;\r\n  } {\r\n    let maxTickBoundary = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n    let minTickBoundary = -maxTickBoundary;\r\n\r\n    if (maxTickBoundary > MAX_TICK) {\r\n      maxTickBoundary = TickQuery.getArrayStartIndex(MAX_TICK, tickSpacing) + TickQuery.tickCount(tickSpacing);\r\n    }\r\n    if (minTickBoundary < MIN_TICK) {\r\n      minTickBoundary = TickQuery.getArrayStartIndex(MIN_TICK, tickSpacing);\r\n    }\r\n    return { maxTickBoundary, minTickBoundary };\r\n  }\r\n\r\n  public static get_tick_array_offset(tickarrayStartIndex: number, tickSpacing: number): number {\r\n    if (!TickQuery.checkIsValidStartIndex(tickarrayStartIndex, tickSpacing)) {\r\n      throw new Error(\"No enough initialized tickArray\");\r\n    }\r\n\r\n    return (tickarrayStartIndex / TickQuery.tickCount(tickSpacing)) * TICK_ARRAY_BITMAP_SIZE;\r\n  }\r\n\r\n  static async fetchExBitmaps({\r\n    connection,\r\n    exBitmapAddress,\r\n    batchRequest,\r\n  }: {\r\n    connection: Connection;\r\n    exBitmapAddress: PublicKey[];\r\n    batchRequest: boolean;\r\n  }): Promise<ReturnTypeFetchExBitmaps> {\r\n    const fetchedBitmapAccount = await getMultipleAccountsInfoWithCustomFlags(\r\n      connection,\r\n      exBitmapAddress.map((i) => ({ pubkey: i })),\r\n      { batchRequest },\r\n    );\r\n\r\n    const returnTypeFetchExBitmaps: ReturnTypeFetchExBitmaps = {};\r\n    for (const item of fetchedBitmapAccount) {\r\n      if (item.accountInfo === null) continue;\r\n\r\n      returnTypeFetchExBitmaps[item.pubkey.toString()] = TickArrayBitmapExtensionLayout.decode(item.accountInfo.data);\r\n    }\r\n    return returnTypeFetchExBitmaps;\r\n  }\r\n\r\n  static async fetchMultiplePoolTickArrays({\r\n    connection,\r\n    poolKeys,\r\n    batchRequest,\r\n  }: {\r\n    connection: Connection;\r\n    poolKeys: Omit<ComputeClmmPoolInfo, \"ammConfig\">[];\r\n    batchRequest?: boolean;\r\n  }): Promise<ReturnTypeFetchMultiplePoolTickArrays> {\r\n    const tickArraysToPoolId: { [key: string]: PublicKey } = {};\r\n    const tickArrays: { pubkey: PublicKey }[] = [];\r\n    for (const itemPoolInfo of poolKeys) {\r\n      const currentTickArrayStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n        itemPoolInfo.tickCurrent,\r\n        itemPoolInfo.tickSpacing,\r\n      );\r\n      const startIndexArray = TickUtils.getInitializedTickArrayInRange(\r\n        itemPoolInfo.tickArrayBitmap,\r\n        itemPoolInfo.exBitmapInfo,\r\n        itemPoolInfo.tickSpacing,\r\n        currentTickArrayStartIndex,\r\n        7,\r\n      );\r\n      for (const itemIndex of startIndexArray) {\r\n        const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(\r\n          itemPoolInfo.programId,\r\n          itemPoolInfo.id,\r\n          itemIndex,\r\n        );\r\n        tickArrays.push({ pubkey: tickArrayAddress });\r\n        tickArraysToPoolId[tickArrayAddress.toString()] = itemPoolInfo.id;\r\n      }\r\n    }\r\n\r\n    const fetchedTickArrays = await getMultipleAccountsInfoWithCustomFlags(connection, tickArrays, { batchRequest });\r\n\r\n    const tickArrayCache: ReturnTypeFetchMultiplePoolTickArrays = {};\r\n\r\n    for (const itemAccountInfo of fetchedTickArrays) {\r\n      if (!itemAccountInfo.accountInfo) continue;\r\n      const poolId = tickArraysToPoolId[itemAccountInfo.pubkey.toString()];\r\n      if (!poolId) continue;\r\n      if (tickArrayCache[poolId.toString()] === undefined) tickArrayCache[poolId.toString()] = {};\r\n\r\n      const accountLayoutData = TickArrayLayout.decode(itemAccountInfo.accountInfo.data);\r\n\r\n      tickArrayCache[poolId.toString()][accountLayoutData.startTickIndex] = {\r\n        ...accountLayoutData,\r\n        address: itemAccountInfo.pubkey,\r\n      };\r\n    }\r\n    return tickArrayCache;\r\n  }\r\n\r\n  // deprecated, new api doesn't need\r\n  static async fetchPoolsAccountPosition({\r\n    pools,\r\n    connection,\r\n    ownerInfo,\r\n    batchRequest = false,\r\n    updateOwnerRewardAndFee = true,\r\n  }: {\r\n    pools: SDKParsedConcentratedInfo[];\r\n    connection: Connection;\r\n    ownerInfo: { wallet: PublicKey; tokenAccounts: TokenAccountRaw[] };\r\n    batchRequest?: boolean;\r\n    updateOwnerRewardAndFee?: boolean;\r\n  }): Promise<SDKParsedConcentratedInfo[]> {\r\n    const programIds: PublicKey[] = [];\r\n\r\n    for (let index = 0; index < pools.length; index++) {\r\n      const accountInfo = pools[index];\r\n\r\n      if (accountInfo === null) continue;\r\n\r\n      if (!programIds.find((i) => i.equals(accountInfo.state.programId))) programIds.push(accountInfo.state.programId);\r\n    }\r\n\r\n    if (ownerInfo) {\r\n      const allMint = ownerInfo.tokenAccounts.map((i) => i.accountInfo.mint);\r\n      const allPositionKey: PublicKey[] = [];\r\n      for (const itemMint of allMint) {\r\n        for (const itemProgramId of programIds) {\r\n          allPositionKey.push(getPdaPersonalPositionAddress(itemProgramId, itemMint).publicKey);\r\n        }\r\n      }\r\n      const positionAccountInfos = await getMultipleAccountsInfo(connection, allPositionKey, { batchRequest });\r\n      const keyToTickArrayAddress: { [key: string]: PublicKey } = {};\r\n      for (const itemAccountInfo of positionAccountInfos) {\r\n        if (itemAccountInfo === null) continue;\r\n        // TODO: add check\r\n\r\n        const position = PositionInfoLayout.decode(itemAccountInfo.data);\r\n        const itemPoolId = position.poolId.toString();\r\n        const poolInfoA = pools.find((pool) => pool.state.id.toBase58() === itemPoolId);\r\n        if (poolInfoA === undefined) continue;\r\n\r\n        const poolInfo = poolInfoA.state;\r\n\r\n        const priceLower = TickUtils._getTickPriceLegacy({\r\n          poolInfo,\r\n          tick: position.tickLower,\r\n          baseIn: true,\r\n        });\r\n        const priceUpper = TickUtils._getTickPriceLegacy({\r\n          poolInfo,\r\n          tick: position.tickUpper,\r\n          baseIn: true,\r\n        });\r\n        const { amountA, amountB } = LiquidityMath.getAmountsFromLiquidity(\r\n          poolInfo.sqrtPriceX64,\r\n          priceLower.tickSqrtPriceX64,\r\n          priceUpper.tickSqrtPriceX64,\r\n          position.liquidity,\r\n          false,\r\n        );\r\n\r\n        const leverage = 1 / (1 - Math.sqrt(Math.sqrt(priceLower.price.div(priceUpper.price).toNumber())));\r\n\r\n        poolInfoA.positionAccount = [\r\n          ...(poolInfoA.positionAccount ?? []),\r\n          {\r\n            poolId: position.poolId,\r\n            nftMint: position.nftMint,\r\n\r\n            priceLower: priceLower.price,\r\n            priceUpper: priceUpper.price,\r\n            amountA,\r\n            amountB,\r\n            tickLower: position.tickLower,\r\n            tickUpper: position.tickUpper,\r\n            liquidity: position.liquidity,\r\n            feeGrowthInsideLastX64A: position.feeGrowthInsideLastX64A,\r\n            feeGrowthInsideLastX64B: position.feeGrowthInsideLastX64B,\r\n            tokenFeesOwedA: position.tokenFeesOwedA,\r\n            tokenFeesOwedB: position.tokenFeesOwedB,\r\n            rewardInfos: position.rewardInfos.map((i) => ({\r\n              ...i,\r\n              pendingReward: new BN(0),\r\n            })),\r\n\r\n            leverage,\r\n            tokenFeeAmountA: new BN(0),\r\n            tokenFeeAmountB: new BN(0),\r\n          },\r\n        ];\r\n\r\n        const tickArrayLowerAddress = await TickUtils.getTickArrayAddressByTick(\r\n          poolInfoA.state.programId,\r\n          position.poolId,\r\n          position.tickLower,\r\n          poolInfoA.state.tickSpacing,\r\n        );\r\n        const tickArrayUpperAddress = await TickUtils.getTickArrayAddressByTick(\r\n          poolInfoA.state.programId,\r\n          position.poolId,\r\n          position.tickUpper,\r\n          poolInfoA.state.tickSpacing,\r\n        );\r\n        keyToTickArrayAddress[\r\n          `${poolInfoA.state.programId.toString()}-${position.poolId.toString()}-${position.tickLower}`\r\n        ] = tickArrayLowerAddress;\r\n        keyToTickArrayAddress[\r\n          `${poolInfoA.state.programId.toString()}-${position.poolId.toString()}-${position.tickUpper}`\r\n        ] = tickArrayUpperAddress;\r\n      }\r\n\r\n      if (updateOwnerRewardAndFee) {\r\n        const tickArrayKeys = Object.values(keyToTickArrayAddress);\r\n        const tickArrayDatas = await getMultipleAccountsInfo(connection, tickArrayKeys, { batchRequest });\r\n        const tickArrayLayout = {};\r\n        for (let index = 0; index < tickArrayKeys.length; index++) {\r\n          const tickArrayData = tickArrayDatas[index];\r\n          if (tickArrayData === null) continue;\r\n          const key = tickArrayKeys[index].toString();\r\n          tickArrayLayout[key] = TickArrayLayout.decode(tickArrayData.data);\r\n        }\r\n\r\n        for (const { state, positionAccount } of pools) {\r\n          if (!positionAccount) continue;\r\n          for (const itemPA of positionAccount) {\r\n            const keyLower = `${state.programId.toString()}-${state.id.toString()}-${itemPA.tickLower}`;\r\n            const keyUpper = `${state.programId.toString()}-${state.id.toString()}-${itemPA.tickUpper}`;\r\n            const tickArrayLower = tickArrayLayout[keyToTickArrayAddress[keyLower].toString()];\r\n            const tickArrayUpper = tickArrayLayout[keyToTickArrayAddress[keyUpper].toString()];\r\n            const tickLowerState: Tick =\r\n              tickArrayLower.ticks[TickUtils.getTickOffsetInArray(itemPA.tickLower, state.tickSpacing)];\r\n            const tickUpperState: Tick =\r\n              tickArrayUpper.ticks[TickUtils.getTickOffsetInArray(itemPA.tickUpper, state.tickSpacing)];\r\n            const { tokenFeeAmountA, tokenFeeAmountB } = await PositionUtils.GetPositionFees(\r\n              state,\r\n              itemPA,\r\n              tickLowerState,\r\n              tickUpperState,\r\n            );\r\n            const rewardInfos = await PositionUtils.GetPositionRewards(state, itemPA, tickLowerState, tickUpperState);\r\n            itemPA.tokenFeeAmountA = tokenFeeAmountA.gte(new BN(0)) ? tokenFeeAmountA : new BN(0);\r\n            itemPA.tokenFeeAmountB = tokenFeeAmountB.gte(new BN(0)) ? tokenFeeAmountB : new BN(0);\r\n            for (let i = 0; i < rewardInfos.length; i++) {\r\n              itemPA.rewardInfos[i].pendingReward = rewardInfos[i].gte(new BN(0)) ? rewardInfos[i] : new BN(0);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return pools;\r\n  }\r\n\r\n  static computeAmountOut({\r\n    poolInfo,\r\n    tickArrayCache,\r\n    baseMint,\r\n    epochInfo,\r\n    amountIn,\r\n    slippage,\r\n    priceLimit = new Decimal(0),\r\n    catchLiquidityInsufficient = false,\r\n  }: {\r\n    poolInfo: ComputeClmmPoolInfo;\r\n    tickArrayCache: { [key: string]: TickArray };\r\n    baseMint: PublicKey;\r\n\r\n    epochInfo: EpochInfo;\r\n\r\n    amountIn: BN;\r\n    slippage: number;\r\n    priceLimit?: Decimal;\r\n    catchLiquidityInsufficient: boolean;\r\n  }): ReturnTypeComputeAmountOut {\r\n    let sqrtPriceLimitX64: BN;\r\n    const isBaseIn = baseMint.toBase58() === poolInfo.mintA.address;\r\n    const [baseFeeConfig, outFeeConfig] = isBaseIn\r\n      ? [poolInfo.mintA.extensions.feeConfig, poolInfo.mintB.extensions.feeConfig]\r\n      : [poolInfo.mintB.extensions.feeConfig, poolInfo.mintA.extensions.feeConfig];\r\n\r\n    if (priceLimit.equals(new Decimal(0))) {\r\n      sqrtPriceLimitX64 = isBaseIn ? MIN_SQRT_PRICE_X64.add(new BN(1)) : MAX_SQRT_PRICE_X64.sub(new BN(1));\r\n    } else {\r\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n        priceLimit,\r\n        poolInfo.mintA.decimals,\r\n        poolInfo.mintB.decimals,\r\n      );\r\n    }\r\n\r\n    const realAmountIn = getTransferAmountFeeV2(amountIn, baseFeeConfig, epochInfo, false);\r\n\r\n    const {\r\n      allTrade,\r\n      expectedAmountOut: _expectedAmountOut,\r\n      remainingAccounts,\r\n      executionPrice: _executionPriceX64,\r\n      feeAmount,\r\n    } = PoolUtils.getOutputAmountAndRemainAccounts(\r\n      poolInfo,\r\n      tickArrayCache,\r\n      baseMint,\r\n      realAmountIn.amount.sub(realAmountIn.fee ?? ZERO),\r\n      sqrtPriceLimitX64,\r\n      catchLiquidityInsufficient,\r\n    );\r\n\r\n    const amountOut = getTransferAmountFeeV2(_expectedAmountOut, outFeeConfig, epochInfo, false);\r\n\r\n    const _executionPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      _executionPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const executionPrice = isBaseIn ? _executionPrice : new Decimal(1).div(_executionPrice);\r\n\r\n    const _minAmountOut = _expectedAmountOut\r\n      .mul(new BN(Math.floor((1 - slippage) * 10000000000)))\r\n      .div(new BN(10000000000));\r\n    const minAmountOut = getTransferAmountFeeV2(_minAmountOut, outFeeConfig, epochInfo, false);\r\n\r\n    const poolPrice = isBaseIn ? poolInfo.currentPrice : new Decimal(1).div(poolInfo.currentPrice);\r\n\r\n    const _numerator = new Decimal(executionPrice).sub(poolPrice).abs();\r\n    const _denominator = poolPrice;\r\n    const priceImpact = new Percent(\r\n      new Decimal(_numerator).mul(10 ** 15).toFixed(0),\r\n      new Decimal(_denominator).mul(10 ** 15).toFixed(0),\r\n    );\r\n\r\n    return {\r\n      allTrade,\r\n      realAmountIn,\r\n      amountOut,\r\n      minAmountOut,\r\n      expirationTime: minExpirationTime(realAmountIn.expirationTime, amountOut.expirationTime),\r\n      currentPrice: poolInfo.currentPrice,\r\n      executionPrice,\r\n      priceImpact,\r\n      fee: feeAmount,\r\n      remainingAccounts,\r\n      executionPriceX64: _executionPriceX64,\r\n    };\r\n  }\r\n\r\n  static computeAmountOutFormat({\r\n    poolInfo,\r\n    tickArrayCache,\r\n    amountIn,\r\n    tokenOut: _tokenOut,\r\n    slippage,\r\n    epochInfo,\r\n    catchLiquidityInsufficient = false,\r\n  }: {\r\n    poolInfo: ComputeClmmPoolInfo;\r\n    tickArrayCache: { [key: string]: TickArray };\r\n    amountIn: BN;\r\n    tokenOut: ApiV3Token;\r\n    slippage: number;\r\n    epochInfo: EpochInfo;\r\n    catchLiquidityInsufficient?: boolean;\r\n  }): ReturnTypeComputeAmountOutFormat {\r\n    const baseIn = _tokenOut.address === poolInfo.mintB.address;\r\n    const [inputMint, outMint] = baseIn ? [poolInfo.mintA, poolInfo.mintB] : [poolInfo.mintB, poolInfo.mintA];\r\n    const [baseToken, outToken] = [\r\n      new Token({\r\n        ...inputMint,\r\n        mint: inputMint.address,\r\n        isToken2022: inputMint.programId === TOKEN_2022_PROGRAM_ID.toBase58(),\r\n      }),\r\n      new Token({\r\n        ...outMint,\r\n        mint: outMint.address,\r\n        isToken2022: outMint.programId === TOKEN_2022_PROGRAM_ID.toBase58(),\r\n      }),\r\n    ];\r\n\r\n    const {\r\n      allTrade,\r\n      realAmountIn: _realAmountIn,\r\n      amountOut: _amountOut,\r\n      minAmountOut: _minAmountOut,\r\n      expirationTime,\r\n      currentPrice,\r\n      executionPrice,\r\n      priceImpact,\r\n      fee,\r\n      remainingAccounts,\r\n      executionPriceX64,\r\n    } = PoolUtils.computeAmountOut({\r\n      poolInfo,\r\n      tickArrayCache,\r\n      baseMint: new PublicKey(inputMint.address),\r\n      amountIn,\r\n      slippage,\r\n      epochInfo,\r\n      catchLiquidityInsufficient,\r\n    });\r\n\r\n    const realAmountIn = {\r\n      ..._realAmountIn,\r\n      amount: new TokenAmount(baseToken, _realAmountIn.amount),\r\n      fee: _realAmountIn.fee === undefined ? undefined : new TokenAmount(baseToken, _realAmountIn.fee),\r\n    };\r\n\r\n    const amountOut = {\r\n      ..._amountOut,\r\n      amount: new TokenAmount(outToken, _amountOut.amount),\r\n      fee: _amountOut.fee === undefined ? undefined : new TokenAmount(outToken, _amountOut.fee),\r\n    };\r\n    const minAmountOut = {\r\n      ..._minAmountOut,\r\n      amount: new TokenAmount(outToken, _minAmountOut.amount),\r\n      fee: _minAmountOut.fee === undefined ? undefined : new TokenAmount(outToken, _minAmountOut.fee),\r\n    };\r\n\r\n    const _currentPrice = new Price({\r\n      baseToken,\r\n      denominator: new BN(10).pow(new BN(20 + baseToken.decimals)),\r\n      quoteToken: outToken,\r\n      numerator: currentPrice.mul(new Decimal(10 ** (20 + outToken.decimals))).toFixed(0),\r\n    });\r\n    const _executionPrice = new Price({\r\n      baseToken,\r\n      denominator: new BN(10).pow(new BN(20 + baseToken.decimals)),\r\n      quoteToken: outToken,\r\n      numerator: executionPrice.mul(new Decimal(10 ** (20 + outToken.decimals))).toFixed(0),\r\n    });\r\n    const _fee = new TokenAmount(baseToken, fee);\r\n\r\n    return {\r\n      allTrade,\r\n      realAmountIn,\r\n      amountOut,\r\n      minAmountOut,\r\n      expirationTime,\r\n      currentPrice: _currentPrice,\r\n      executionPrice: _executionPrice,\r\n      priceImpact,\r\n      fee: _fee,\r\n      remainingAccounts,\r\n      executionPriceX64,\r\n    };\r\n  }\r\n\r\n  static computeAmountIn({\r\n    poolInfo,\r\n    tickArrayCache,\r\n    baseMint,\r\n    epochInfo,\r\n    amountOut,\r\n    slippage,\r\n    priceLimit = new Decimal(0),\r\n  }: {\r\n    poolInfo: ComputeClmmPoolInfo;\r\n    tickArrayCache: { [key: string]: TickArray };\r\n    baseMint: PublicKey;\r\n\r\n    epochInfo: EpochInfo;\r\n\r\n    amountOut: BN;\r\n    slippage: number;\r\n    priceLimit?: Decimal;\r\n  }): ReturnTypeComputeAmountOutBaseOut {\r\n    const isBaseIn = baseMint.toBase58() === poolInfo.mintA.address;\r\n    const feeConfigs = {\r\n      [poolInfo.mintA.address]: poolInfo.mintA.extensions.feeConfig,\r\n      [poolInfo.mintB.address]: poolInfo.mintB.extensions.feeConfig,\r\n    };\r\n\r\n    let sqrtPriceLimitX64: BN;\r\n    if (priceLimit.equals(new Decimal(0))) {\r\n      sqrtPriceLimitX64 = !isBaseIn ? MIN_SQRT_PRICE_X64.add(new BN(1)) : MAX_SQRT_PRICE_X64.sub(new BN(1));\r\n    } else {\r\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n        priceLimit,\r\n        poolInfo.mintA.decimals,\r\n        poolInfo.mintB.decimals,\r\n      );\r\n    }\r\n\r\n    const realAmountOut = getTransferAmountFeeV2(amountOut, feeConfigs[baseMint.toString()], epochInfo, true);\r\n\r\n    const {\r\n      expectedAmountIn: _expectedAmountIn,\r\n      remainingAccounts,\r\n      executionPrice: _executionPriceX64,\r\n      feeAmount,\r\n    } = PoolUtils.getInputAmountAndRemainAccounts(\r\n      poolInfo,\r\n      tickArrayCache,\r\n      baseMint,\r\n      realAmountOut.amount.sub(realAmountOut.fee ?? ZERO),\r\n      sqrtPriceLimitX64,\r\n    );\r\n\r\n    const inMint = isBaseIn ? poolInfo.mintB.address : poolInfo.mintA.address;\r\n\r\n    const amountIn = getTransferAmountFeeV2(_expectedAmountIn, feeConfigs[inMint], epochInfo, false);\r\n    // const amountIn = getTransferAmountFee(\r\n    //   _expectedAmountIn,\r\n    //   token2022Infos[inMint.toString()]?.feeConfig,\r\n    //   epochInfo,\r\n    //   true,\r\n    // );\r\n\r\n    const _executionPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      _executionPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const executionPrice = isBaseIn ? _executionPrice : new Decimal(1).div(_executionPrice);\r\n\r\n    const _maxAmountIn = _expectedAmountIn\r\n      .mul(new BN(Math.floor((1 + slippage) * 10000000000)))\r\n      .div(new BN(10000000000));\r\n    // const maxAmountIn = getTransferAmountFee(\r\n    //   _maxAmountIn,\r\n    //   token2022Infos[inMint.toString()]?.feeConfig,\r\n    //   epochInfo,\r\n    //   true,\r\n    // );\r\n    const maxAmountIn = getTransferAmountFeeV2(_maxAmountIn, feeConfigs[inMint], epochInfo, true);\r\n\r\n    const poolPrice = isBaseIn ? poolInfo.currentPrice : new Decimal(1).div(poolInfo.currentPrice);\r\n\r\n    const _numerator = new Decimal(executionPrice).sub(poolPrice).abs();\r\n    const _denominator = poolPrice;\r\n    const priceImpact = new Percent(\r\n      new Decimal(_numerator).mul(10 ** 15).toFixed(0),\r\n      new Decimal(_denominator).mul(10 ** 15).toFixed(0),\r\n    );\r\n\r\n    return {\r\n      amountIn,\r\n      maxAmountIn,\r\n      realAmountOut,\r\n      expirationTime: minExpirationTime(amountIn.expirationTime, realAmountOut.expirationTime),\r\n      currentPrice: poolInfo.currentPrice,\r\n      executionPrice,\r\n      priceImpact,\r\n      fee: feeAmount,\r\n\r\n      remainingAccounts,\r\n    };\r\n  }\r\n\r\n  static estimateAprsForPriceRangeMultiplier({\r\n    poolInfo,\r\n    aprType,\r\n    positionTickLowerIndex,\r\n    positionTickUpperIndex,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    aprType: \"day\" | \"week\" | \"month\";\r\n\r\n    positionTickLowerIndex: number;\r\n    positionTickUpperIndex: number;\r\n  }): {\r\n    feeApr: number;\r\n    rewardsApr: number[];\r\n    apr: number;\r\n  } {\r\n    const aprInfo = poolInfo[aprType];\r\n\r\n    const priceLower = TickUtils.getTickPrice({\r\n      poolInfo,\r\n      tick: positionTickLowerIndex,\r\n      baseIn: true,\r\n    }).price.toNumber();\r\n    const priceUpper = TickUtils.getTickPrice({\r\n      poolInfo,\r\n      tick: positionTickUpperIndex,\r\n      baseIn: true,\r\n    }).price.toNumber();\r\n\r\n    const _minPrice = Math.max(priceLower, aprInfo.priceMin);\r\n    const _maxPrice = Math.min(priceUpper, aprInfo.priceMax);\r\n\r\n    const sub = _maxPrice - _minPrice;\r\n\r\n    const userRange = priceUpper - priceLower;\r\n    const tradeRange = aprInfo.priceMax - aprInfo.priceMin;\r\n\r\n    let p: number;\r\n\r\n    if (sub <= 0) p = 0;\r\n    else if (userRange === sub) p = tradeRange / sub;\r\n    else if (tradeRange === sub) p = sub / userRange;\r\n    else p = (sub / tradeRange) * (sub / userRange);\r\n\r\n    return {\r\n      feeApr: aprInfo.feeApr * p,\r\n      rewardsApr: [(aprInfo.rewardApr[0] ?? 0) * p, (aprInfo.rewardApr[1] ?? 0) * p, (aprInfo.rewardApr[2] ?? 0) * p],\r\n      apr: aprInfo.apr * p,\r\n    };\r\n  }\r\n\r\n  static estimateAprsForPriceRangeDelta({\r\n    poolInfo,\r\n    poolLiquidity,\r\n    aprType,\r\n    mintPrice,\r\n    liquidity,\r\n    positionTickLowerIndex,\r\n    positionTickUpperIndex,\r\n    chainTime,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolLiquidity: BN;\r\n    aprType: \"day\" | \"week\" | \"month\";\r\n\r\n    mintPrice: { [mint: string]: { value: number } };\r\n\r\n    liquidity: BN;\r\n    positionTickLowerIndex: number;\r\n    positionTickUpperIndex: number;\r\n\r\n    chainTime: number;\r\n  }): {\r\n    feeApr: number;\r\n    rewardsApr: number[];\r\n    apr: number;\r\n  } {\r\n    const aprTypeDay = aprType === \"day\" ? 1 : aprType === \"week\" ? 7 : aprType === \"month\" ? 30 : 0;\r\n    const aprInfo = poolInfo[aprType];\r\n    const mintPriceA = mintPrice[solToWSol(poolInfo.mintA.address).toString()];\r\n    const mintPriceB = mintPrice[solToWSol(poolInfo.mintB.address).toString()];\r\n    const mintDecimalsA = poolInfo.mintA.decimals;\r\n    const mintDecimalsB = poolInfo.mintB.decimals;\r\n\r\n    if (!aprInfo || !mintPriceA || !mintPriceB) return { feeApr: 0, rewardsApr: [0, 0, 0], apr: 0 };\r\n\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(positionTickLowerIndex);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(positionTickUpperIndex);\r\n\r\n    const { amountSlippageA: poolLiquidityA, amountSlippageB: poolLiquidityB } =\r\n      LiquidityMath.getAmountsFromLiquidityWithSlippage(\r\n        sqrtPriceX64,\r\n        sqrtPriceX64A,\r\n        sqrtPriceX64B,\r\n        poolLiquidity,\r\n        false,\r\n        false,\r\n        0,\r\n      );\r\n\r\n    const { amountSlippageA: userLiquidityA, amountSlippageB: userLiquidityB } =\r\n      LiquidityMath.getAmountsFromLiquidityWithSlippage(\r\n        sqrtPriceX64,\r\n        sqrtPriceX64A,\r\n        sqrtPriceX64B,\r\n        liquidity,\r\n        false,\r\n        false,\r\n        0,\r\n      );\r\n\r\n    const poolTvl = new Decimal(poolLiquidityA.toString())\r\n      .div(new Decimal(10).pow(mintDecimalsA))\r\n      .mul(mintPriceA.value)\r\n      .add(new Decimal(poolLiquidityB.toString()).div(new Decimal(10).pow(mintDecimalsB)).mul(mintPriceB.value));\r\n    const userTvl = new Decimal(userLiquidityA.toString())\r\n      .div(new Decimal(10).pow(mintDecimalsA))\r\n      .mul(mintPriceA.value)\r\n      .add(new Decimal(userLiquidityB.toString()).div(new Decimal(10).pow(mintDecimalsB)).mul(mintPriceB.value));\r\n\r\n    const p = new Decimal(1).div(poolTvl.add(userTvl));\r\n\r\n    const feesPerYear = new Decimal(aprInfo.volumeFee).mul(365).div(aprTypeDay);\r\n    const feeApr = feesPerYear.mul(p).mul(100).toNumber();\r\n\r\n    const SECONDS_PER_YEAR = 3600 * 24 * 365;\r\n\r\n    const rewardsApr = poolInfo.rewardDefaultInfos.map((i) => {\r\n      const iDecimal = i.mint.decimals;\r\n      const iPrice = mintPrice[i.mint.address];\r\n\r\n      if (\r\n        chainTime < ((i as any).startTime ?? 0) ||\r\n        chainTime > ((i as any).endTime ?? 0) ||\r\n        !i.perSecond ||\r\n        !iPrice ||\r\n        iDecimal === undefined\r\n      )\r\n        return 0;\r\n\r\n      return new Decimal(iPrice.value)\r\n        .mul(new Decimal(i.perSecond).mul(SECONDS_PER_YEAR))\r\n        .div(new Decimal(10).pow(iDecimal))\r\n        .mul(p)\r\n        .mul(100)\r\n        .toNumber();\r\n    });\r\n\r\n    return {\r\n      feeApr,\r\n      rewardsApr,\r\n      apr: feeApr + rewardsApr.reduce((a, b) => a + b, 0),\r\n    };\r\n  }\r\n\r\n  static async getLiquidityAmountOutFromAmountIn({\r\n    poolInfo,\r\n    inputA,\r\n    tickLower,\r\n    tickUpper,\r\n    amount,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n    amountHasFee,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    inputA: boolean;\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    amount: BN;\r\n    slippage: number;\r\n    add: boolean;\r\n    epochInfo: EpochInfo;\r\n    amountHasFee: boolean;\r\n  }): Promise<ReturnTypeGetLiquidityAmountOut> {\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\r\n\r\n    // const coefficient = add ? 1 - slippage : 1 + slippage;\r\n    const addFeeAmount = getTransferAmountFeeV2(\r\n      amount,\r\n      poolInfo[inputA ? \"mintA\" : \"mintB\"].extensions?.feeConfig,\r\n      epochInfo,\r\n      !amountHasFee,\r\n    );\r\n    const _amount = new BN(\r\n      new Decimal(addFeeAmount.amount.sub(addFeeAmount.fee ?? ZERO).toString()).toFixed(0) // .mul(coefficient).toFixed(0),\r\n    );\r\n\r\n    let liquidity: BN;\r\n    if (sqrtPriceX64.lte(sqrtPriceX64A)) {\r\n      liquidity = inputA\r\n        ? LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64A, sqrtPriceX64B, _amount, !add)\r\n        : new BN(0);\r\n    } else if (sqrtPriceX64.lte(sqrtPriceX64B)) {\r\n      const liquidity0 = LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64, sqrtPriceX64B, _amount, !add);\r\n      const liquidity1 = LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64, _amount);\r\n      liquidity = inputA ? liquidity0 : liquidity1;\r\n    } else {\r\n      liquidity = inputA\r\n        ? new BN(0)\r\n        : LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64B, _amount);\r\n    }\r\n\r\n    const amountFromLiquidity = await PoolUtils.getAmountsFromLiquidity({\r\n      epochInfo,\r\n      poolInfo,\r\n      tickLower,\r\n      tickUpper,\r\n      liquidity,\r\n      slippage,\r\n      add,\r\n    });\r\n    return {\r\n      liquidity,\r\n      amountA: inputA ? addFeeAmount : amountFromLiquidity.amountA,\r\n      amountB: inputA ? amountFromLiquidity.amountB : addFeeAmount,\r\n      amountSlippageA: inputA ? addFeeAmount : amountFromLiquidity.amountSlippageA,\r\n      amountSlippageB: inputA ? amountFromLiquidity.amountSlippageB : addFeeAmount,\r\n      expirationTime: amountFromLiquidity.expirationTime,\r\n    }\r\n  }\r\n\r\n  static async getAmountsFromLiquidity({\r\n    epochInfo,\r\n    poolInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n  }: {\r\n    epochInfo: EpochInfo;\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    slippage: number;\r\n    add: boolean;\r\n  }): Promise<ReturnTypeGetLiquidityAmountOut> {\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\r\n\r\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\r\n\r\n    const amounts = LiquidityMath.getAmountsFromLiquidity(\r\n      SqrtPriceMath.priceToSqrtPriceX64(new Decimal(poolInfo.price), poolInfo.mintA.decimals, poolInfo.mintB.decimals),\r\n      sqrtPriceX64A,\r\n      sqrtPriceX64B,\r\n      liquidity,\r\n      add,\r\n    );\r\n    const [amountA, amountB] = [\r\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, true),\r\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, true),\r\n    ];\r\n    const [amountSlippageA, amountSlippageB] = [\r\n      getTransferAmountFeeV2(\r\n        amounts.amountA.muln(coefficientRe),\r\n        poolInfo.mintA.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n      getTransferAmountFeeV2(\r\n        amounts.amountB.muln(coefficientRe),\r\n        poolInfo.mintB.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n    ];\r\n\r\n    return {\r\n      liquidity,\r\n      amountA,\r\n      amountB,\r\n      amountSlippageA,\r\n      amountSlippageB,\r\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\r\n    };\r\n  }\r\n\r\n  static async fetchComputeMultipleClmmInfo({\r\n    connection,\r\n    poolList,\r\n    rpcDataMap = {},\r\n  }: {\r\n    rpcDataMap?: Record<string, ReturnType<typeof PoolInfoLayout.decode>>;\r\n    connection: Connection;\r\n    poolList: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\" | \"price\">[];\r\n  }): Promise<Record<string, ComputeClmmPoolInfo>> {\r\n    const fetchRpcList = poolList.filter((p) => !rpcDataMap[p.id]).map((p) => new PublicKey(p.id));\r\n    const rpcRes = await getMultipleAccountsInfo(connection, fetchRpcList);\r\n    rpcRes.forEach((r, idx) => {\r\n      if (!r) return;\r\n      rpcDataMap[fetchRpcList[idx].toBase58()] = PoolInfoLayout.decode(r.data);\r\n    });\r\n\r\n    const pdaList = poolList.map(\r\n      (poolInfo) => getPdaExBitmapAccount(new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)).publicKey,\r\n    );\r\n\r\n    const exBitData = await PoolUtils.fetchExBitmaps({\r\n      connection,\r\n      exBitmapAddress: pdaList,\r\n      batchRequest: false,\r\n    });\r\n\r\n    return poolList.reduce(\r\n      (acc, cur) => ({\r\n        ...acc,\r\n        [cur.id]: {\r\n          ...rpcDataMap[cur.id],\r\n          id: new PublicKey(cur.id),\r\n          version: 6,\r\n          programId: new PublicKey(cur.programId),\r\n          mintA: cur.mintA,\r\n          mintB: cur.mintB,\r\n          ammConfig: {\r\n            ...cur.config,\r\n            id: new PublicKey(cur.config.id),\r\n            fundOwner: \"\",\r\n          },\r\n          currentPrice: new Decimal(cur.price),\r\n          exBitmapAccount: getPdaExBitmapAccount(new PublicKey(cur.programId), new PublicKey(cur.id)).publicKey,\r\n          exBitmapInfo:\r\n            exBitData[getPdaExBitmapAccount(new PublicKey(cur.programId), new PublicKey(cur.id)).publicKey.toBase58()],\r\n          startTime: rpcDataMap[cur.id].startTime.toNumber(),\r\n          rewardInfos: rpcDataMap[cur.id].rewardInfos,\r\n        },\r\n      }),\r\n      {} as Record<string, ComputeClmmPoolInfo>,\r\n    );\r\n  }\r\n\r\n  static async fetchComputeClmmInfo({\r\n    connection,\r\n    poolInfo,\r\n    rpcData,\r\n  }: {\r\n    connection: Connection;\r\n    poolInfo: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\" | \"price\">;\r\n    rpcData?: ReturnType<typeof PoolInfoLayout.decode>;\r\n  }): Promise<ComputeClmmPoolInfo> {\r\n    return (\r\n      await this.fetchComputeMultipleClmmInfo({\r\n        connection,\r\n        rpcDataMap: rpcData ? { [poolInfo.id]: rpcData } : undefined,\r\n        poolList: [poolInfo],\r\n      })\r\n    )[poolInfo.id];\r\n  }\r\n}\r\n\r\nexport function getLiquidityFromAmounts({\r\n  poolInfo,\r\n  tickLower,\r\n  tickUpper,\r\n  amountA,\r\n  amountB,\r\n  slippage,\r\n  add,\r\n  epochInfo,\r\n  amountHasFee,\r\n}: {\r\n  poolInfo: ApiV3PoolInfoConcentratedItem;\r\n  tickLower: number;\r\n  tickUpper: number;\r\n  amountA: BN;\r\n  amountB: BN;\r\n  slippage: number;\r\n  add: boolean;\r\n  epochInfo: EpochInfo;\r\n  amountHasFee: boolean;\r\n}): ReturnTypeGetLiquidityAmountOut {\r\n  const [_tickLower, _tickUpper, _amountA, _amountB] =\r\n    tickLower < tickUpper ? [tickLower, tickUpper, amountA, amountB] : [tickUpper, tickLower, amountB, amountA];\r\n  const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n    new Decimal(poolInfo.price),\r\n    poolInfo.mintA.decimals,\r\n    poolInfo.mintB.decimals,\r\n  );\r\n  const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(_tickLower);\r\n  const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(_tickUpper);\r\n\r\n  const [amountFeeA, amountFeeB] = [\r\n    getTransferAmountFeeV2(_amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, !amountHasFee),\r\n    getTransferAmountFeeV2(_amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, !amountHasFee),\r\n  ];\r\n\r\n  const liquidity = LiquidityMath.getLiquidityFromTokenAmounts(\r\n    sqrtPriceX64,\r\n    sqrtPriceX64A,\r\n    sqrtPriceX64B,\r\n    amountFeeA.amount.sub(amountFeeA.fee ?? ZERO),\r\n    amountFeeB.amount.sub(amountFeeB.fee ?? ZERO),\r\n  );\r\n\r\n  return LiquidityMath.getAmountsOutFromLiquidity({\r\n    poolInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n    amountAddFee: !amountHasFee,\r\n  });\r\n}\r\n\r\nconst mockRewardData = {\r\n  volume: 0,\r\n  volumeQuote: 0,\r\n  volumeFee: 0,\r\n  apr: 0,\r\n  feeApr: 0,\r\n  priceMin: 0,\r\n  priceMax: 0,\r\n  rewardApr: [],\r\n};\r\n\r\nexport function clmmComputeInfoToApiInfo(pool: ComputeClmmPoolInfo): ApiV3PoolInfoConcentratedItem {\r\n  return {\r\n    ...pool,\r\n    type: \"Concentrated\",\r\n    programId: pool.programId.toString(),\r\n    id: pool.id.toString(),\r\n    rewardDefaultInfos: [],\r\n    rewardDefaultPoolInfos: \"Clmm\",\r\n    price: pool.currentPrice.toNumber(),\r\n    mintAmountA: 0,\r\n    mintAmountB: 0,\r\n    feeRate: pool.ammConfig.tradeFeeRate,\r\n    openTime: pool.startTime.toString(),\r\n    tvl: 0,\r\n\r\n    day: mockRewardData,\r\n    week: mockRewardData,\r\n    month: mockRewardData,\r\n    pooltype: [],\r\n\r\n    farmUpcomingCount: 0,\r\n    farmOngoingCount: 0,\r\n    farmFinishedCount: 0,\r\n    burnPercent: 0,\r\n    config: {\r\n      ...pool.ammConfig,\r\n      id: pool.ammConfig.id.toString(),\r\n      defaultRange: 0,\r\n      defaultRangePoint: [],\r\n    },\r\n  };\r\n}\r\n","import BN from \"bn.js\";\r\n\r\nimport Decimal from \"decimal.js\";\r\nimport { getTransferAmountFeeV2, minExpirationTime } from \"../../../common\";\r\nimport { ClmmPositionLayout } from \"../layout\";\r\nimport { ClmmPoolInfo, ClmmPoolPersonalPosition, ClmmPoolRewardInfo, GetAmountParams, ReturnTypeGetLiquidityAmountOut } from \"../type\";\r\nimport { Q64 } from \"./constants\";\r\nimport { LiquidityMath, MathUtil, SqrtPriceMath } from \"./math\";\r\nimport { Tick } from \"./tick\";\r\n\r\nexport class PositionUtils {\r\n  static getfeeGrowthInside(\r\n    poolState: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64A\" | \"feeGrowthGlobalX64B\">,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): { feeGrowthInsideX64A: BN; feeGrowthInsideBX64: BN } {\r\n    let feeGrowthBelowX64A = new BN(0);\r\n    let feeGrowthBelowX64B = new BN(0);\r\n    if (poolState.tickCurrent >= tickLowerState.tick) {\r\n      feeGrowthBelowX64A = tickLowerState.feeGrowthOutsideX64A;\r\n      feeGrowthBelowX64B = tickLowerState.feeGrowthOutsideX64B;\r\n    } else {\r\n      feeGrowthBelowX64A = poolState.feeGrowthGlobalX64A.sub(tickLowerState.feeGrowthOutsideX64A);\r\n      feeGrowthBelowX64B = poolState.feeGrowthGlobalX64B.sub(tickLowerState.feeGrowthOutsideX64B);\r\n    }\r\n\r\n    let feeGrowthAboveX64A = new BN(0);\r\n    let feeGrowthAboveX64B = new BN(0);\r\n    if (poolState.tickCurrent < tickUpperState.tick) {\r\n      feeGrowthAboveX64A = tickUpperState.feeGrowthOutsideX64A;\r\n      feeGrowthAboveX64B = tickUpperState.feeGrowthOutsideX64B;\r\n    } else {\r\n      feeGrowthAboveX64A = poolState.feeGrowthGlobalX64A.sub(tickUpperState.feeGrowthOutsideX64A);\r\n      feeGrowthAboveX64B = poolState.feeGrowthGlobalX64B.sub(tickUpperState.feeGrowthOutsideX64B);\r\n    }\r\n\r\n    const feeGrowthInsideX64A = MathUtil.wrappingSubU128(\r\n      MathUtil.wrappingSubU128(poolState.feeGrowthGlobalX64A, feeGrowthBelowX64A),\r\n      feeGrowthAboveX64A,\r\n    );\r\n    const feeGrowthInsideBX64 = MathUtil.wrappingSubU128(\r\n      MathUtil.wrappingSubU128(poolState.feeGrowthGlobalX64B, feeGrowthBelowX64B),\r\n      feeGrowthAboveX64B,\r\n    );\r\n    return { feeGrowthInsideX64A, feeGrowthInsideBX64 };\r\n  }\r\n\r\n  static GetPositionFees(\r\n    ammPool: ClmmPoolInfo,\r\n    positionState: ClmmPoolPersonalPosition,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): { tokenFeeAmountA: BN; tokenFeeAmountB: BN } {\r\n    const { feeGrowthInsideX64A, feeGrowthInsideBX64 } = this.getfeeGrowthInside(\r\n      ammPool,\r\n      tickLowerState,\r\n      tickUpperState,\r\n    );\r\n\r\n    const feeGrowthdeltaA = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideX64A, positionState.feeGrowthInsideLastX64A),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountA = positionState.tokenFeesOwedA.add(feeGrowthdeltaA);\r\n\r\n    const feeGrowthdelta1 = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideBX64, positionState.feeGrowthInsideLastX64B),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountB = positionState.tokenFeesOwedB.add(feeGrowthdelta1);\r\n\r\n    return { tokenFeeAmountA, tokenFeeAmountB };\r\n  }\r\n\r\n  static GetPositionFeesV2(\r\n    ammPool: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64A\" | \"feeGrowthGlobalX64B\">,\r\n    positionState: ClmmPositionLayout,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): { tokenFeeAmountA: BN; tokenFeeAmountB: BN } {\r\n    const { feeGrowthInsideX64A, feeGrowthInsideBX64 } = this.getfeeGrowthInside(\r\n      ammPool,\r\n      tickLowerState,\r\n      tickUpperState,\r\n    );\r\n\r\n    const feeGrowthdeltaA = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideX64A, positionState.feeGrowthInsideLastX64A),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountA = positionState.tokenFeesOwedA.add(feeGrowthdeltaA);\r\n\r\n    const feeGrowthdelta1 = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideBX64, positionState.feeGrowthInsideLastX64B),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountB = positionState.tokenFeesOwedB.add(feeGrowthdelta1);\r\n\r\n    return { tokenFeeAmountA, tokenFeeAmountB };\r\n  }\r\n\r\n  static GetPositionRewardsV2(\r\n    ammPool: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64B\"> & {\r\n      rewardInfos: { rewardGrowthGlobalX64: BN }[];\r\n    },\r\n    positionState: ClmmPositionLayout,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): BN[] {\r\n    const rewards: BN[] = [];\r\n\r\n    const rewardGrowthsInside = this.getRewardGrowthInsideV2(\r\n      ammPool.tickCurrent,\r\n      tickLowerState,\r\n      tickUpperState,\r\n      ammPool.rewardInfos,\r\n    );\r\n    for (let i = 0; i < rewardGrowthsInside.length; i++) {\r\n      const rewardGrowthInside = rewardGrowthsInside[i];\r\n      const currRewardInfo = positionState.rewardInfos[i];\r\n\r\n      const rewardGrowthDelta = MathUtil.wrappingSubU128(rewardGrowthInside, currRewardInfo.growthInsideLastX64);\r\n      const amountOwedDelta = MathUtil.mulDivFloor(rewardGrowthDelta, positionState.liquidity, Q64);\r\n      const rewardAmountOwed = currRewardInfo.rewardAmountOwed.add(amountOwedDelta);\r\n      rewards.push(rewardAmountOwed);\r\n    }\r\n    return rewards;\r\n  }\r\n\r\n  static GetPositionRewards(\r\n    ammPool: ClmmPoolInfo,\r\n    positionState: ClmmPoolPersonalPosition,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): BN[] {\r\n    const rewards: BN[] = [];\r\n\r\n    const rewardGrowthsInside = this.getRewardGrowthInside(\r\n      ammPool.tickCurrent,\r\n      tickLowerState,\r\n      tickUpperState,\r\n      ammPool.rewardInfos,\r\n    );\r\n    for (let i = 0; i < rewardGrowthsInside.length; i++) {\r\n      const rewardGrowthInside = rewardGrowthsInside[i];\r\n      const currRewardInfo = positionState.rewardInfos[i];\r\n\r\n      const rewardGrowthDelta = MathUtil.wrappingSubU128(rewardGrowthInside, currRewardInfo.growthInsideLastX64);\r\n      const amountOwedDelta = MathUtil.mulDivFloor(rewardGrowthDelta, positionState.liquidity, Q64);\r\n      const rewardAmountOwed = currRewardInfo.rewardAmountOwed.add(amountOwedDelta);\r\n      rewards.push(rewardAmountOwed);\r\n    }\r\n    return rewards;\r\n  }\r\n\r\n  static getRewardGrowthInside(\r\n    tickCurrentIndex: number,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n    rewardInfos: ClmmPoolRewardInfo[],\r\n  ): BN[] {\r\n    const rewardGrowthsInside: BN[] = [];\r\n    for (let i = 0; i < rewardInfos.length; i++) {\r\n      let rewardGrowthsBelow = new BN(0);\r\n      if (tickLowerState.liquidityGross.eqn(0)) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64;\r\n      } else if (tickCurrentIndex < tickLowerState.tick) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64.sub(tickLowerState.rewardGrowthsOutsideX64[i]);\r\n      } else {\r\n        rewardGrowthsBelow = tickLowerState.rewardGrowthsOutsideX64[i];\r\n      }\r\n\r\n      let rewardGrowthsAbove = new BN(0);\r\n      if (tickUpperState.liquidityGross.eqn(0)) {\r\n        //\r\n      } else if (tickCurrentIndex < tickUpperState.tick) {\r\n        rewardGrowthsAbove = tickUpperState.rewardGrowthsOutsideX64[i];\r\n      } else {\r\n        rewardGrowthsAbove = rewardInfos[i].rewardGrowthGlobalX64.sub(tickUpperState.rewardGrowthsOutsideX64[i]);\r\n      }\r\n\r\n      rewardGrowthsInside.push(\r\n        MathUtil.wrappingSubU128(\r\n          MathUtil.wrappingSubU128(rewardInfos[i].rewardGrowthGlobalX64, rewardGrowthsBelow),\r\n          rewardGrowthsAbove,\r\n        ),\r\n      );\r\n    }\r\n\r\n    return rewardGrowthsInside;\r\n  }\r\n\r\n  static getRewardGrowthInsideV2(\r\n    tickCurrentIndex: number,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n    rewardInfos: Pick<ClmmPoolRewardInfo, \"rewardGrowthGlobalX64\">[],\r\n  ): BN[] {\r\n    const rewardGrowthsInside: BN[] = [];\r\n    for (let i = 0; i < rewardInfos.length; i++) {\r\n      let rewardGrowthsBelow = new BN(0);\r\n      if (tickLowerState.liquidityGross.eqn(0)) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64;\r\n      } else if (tickCurrentIndex < tickLowerState.tick) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64.sub(tickLowerState.rewardGrowthsOutsideX64[i]);\r\n      } else {\r\n        rewardGrowthsBelow = tickLowerState.rewardGrowthsOutsideX64[i];\r\n      }\r\n\r\n      let rewardGrowthsAbove = new BN(0);\r\n      if (tickUpperState.liquidityGross.eqn(0)) {\r\n        //\r\n      } else if (tickCurrentIndex < tickUpperState.tick) {\r\n        rewardGrowthsAbove = tickUpperState.rewardGrowthsOutsideX64[i];\r\n      } else {\r\n        rewardGrowthsAbove = rewardInfos[i].rewardGrowthGlobalX64.sub(tickUpperState.rewardGrowthsOutsideX64[i]);\r\n      }\r\n\r\n      rewardGrowthsInside.push(\r\n        MathUtil.wrappingSubU128(\r\n          MathUtil.wrappingSubU128(rewardInfos[i].rewardGrowthGlobalX64, rewardGrowthsBelow),\r\n          rewardGrowthsAbove,\r\n        ),\r\n      );\r\n    }\r\n\r\n    return rewardGrowthsInside;\r\n  }\r\n\r\n  static getAmountsFromLiquidity({\r\n    poolInfo,\r\n    ownerPosition,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n  }: GetAmountParams): ReturnTypeGetLiquidityAmountOut {\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(ownerPosition.tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(ownerPosition.tickUpper);\r\n\r\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\r\n\r\n    const amounts = LiquidityMath.getAmountsFromLiquidity(sqrtPriceX64, sqrtPriceX64A, sqrtPriceX64B, liquidity, add);\r\n\r\n    const [amountA, amountB] = [\r\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, true),\r\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, true),\r\n    ];\r\n    const [amountSlippageA, amountSlippageB] = [\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountA.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintA.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountB.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintB.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n    ];\r\n\r\n    return {\r\n      liquidity,\r\n      amountA,\r\n      amountB,\r\n      amountSlippageA,\r\n      amountSlippageB,\r\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\r\n    };\r\n  }\r\n}\r\n","import { Connection, PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport { getMultipleAccountsInfo } from \"../../../common\";\r\nimport { TickArrayLayout } from \"../layout\";\r\n\r\nimport { TickArrayBitmapExtensionType } from \"../type\";\r\nimport { MAX_TICK, MIN_TICK } from \"./constants\";\r\nimport { getPdaTickArrayAddress } from \"./pda\";\r\nimport { Tick, TICK_ARRAY_SIZE, TickArray, TickUtils } from \"./tick\";\r\n\r\nexport const FETCH_TICKARRAY_COUNT = 15;\r\n\r\nexport declare type PoolVars = {\r\n  key: PublicKey;\r\n  tokenA: PublicKey;\r\n  tokenB: PublicKey;\r\n  fee: number;\r\n};\r\n\r\nexport class TickQuery {\r\n  public static async getTickArrays(\r\n    connection: Connection,\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickCurrent: number,\r\n    tickSpacing: number,\r\n    tickArrayBitmapArray: BN[],\r\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\r\n  ): Promise<{ [key: string]: TickArray }> {\r\n    const tickArraysToFetch: PublicKey[] = [];\r\n    const currentTickArrayStartIndex = TickUtils.getTickArrayStartIndexByTick(tickCurrent, tickSpacing);\r\n\r\n    const startIndexArray = TickUtils.getInitializedTickArrayInRange(\r\n      tickArrayBitmapArray,\r\n      exTickArrayBitmap,\r\n      tickSpacing,\r\n      currentTickArrayStartIndex,\r\n      Math.floor(FETCH_TICKARRAY_COUNT / 2),\r\n    );\r\n    for (let i = 0; i < startIndexArray.length; i++) {\r\n      const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(programId, poolId, startIndexArray[i]);\r\n      tickArraysToFetch.push(tickArrayAddress);\r\n    }\r\n\r\n    const fetchedTickArrays = (await getMultipleAccountsInfo(connection, tickArraysToFetch)).map((i) =>\r\n      i !== null ? TickArrayLayout.decode(i.data) : null,\r\n    );\r\n\r\n    const tickArrayCache: { [key: string]: TickArray } = {};\r\n    for (let i = 0; i < tickArraysToFetch.length; i++) {\r\n      const _info = fetchedTickArrays[i];\r\n      if (_info === null) continue;\r\n\r\n      tickArrayCache[_info.startTickIndex] = {\r\n        ..._info,\r\n        address: tickArraysToFetch[i],\r\n      };\r\n    }\r\n    return tickArrayCache;\r\n  }\r\n\r\n  public static nextInitializedTick(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    tickIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): {\r\n    nextTick: Tick;\r\n    tickArrayAddress: PublicKey | undefined;\r\n    tickArrayStartTickIndex: number;\r\n  } {\r\n    let {\r\n      initializedTick: nextTick,\r\n      tickArrayAddress,\r\n      tickArrayStartTickIndex,\r\n    } = this.nextInitializedTickInOneArray(programId, poolId, tickArrayCache, tickIndex, tickSpacing, zeroForOne);\r\n    while (nextTick == undefined || nextTick.liquidityGross.lten(0)) {\r\n      tickArrayStartTickIndex = TickUtils.getNextTickArrayStartIndex(tickArrayStartTickIndex, tickSpacing, zeroForOne);\r\n      if (this.checkIsValidStartIndex(tickArrayStartTickIndex, tickSpacing)) {\r\n        throw new Error(\"No enough initialized tickArray\");\r\n      }\r\n      const cachedTickArray = tickArrayCache[tickArrayStartTickIndex];\r\n\r\n      if (cachedTickArray === undefined) continue;\r\n\r\n      const {\r\n        nextTick: _nextTick,\r\n        tickArrayAddress: _tickArrayAddress,\r\n        tickArrayStartTickIndex: _tickArrayStartTickIndex,\r\n      } = this.firstInitializedTickInOneArray(programId, poolId, cachedTickArray, zeroForOne);\r\n      [nextTick, tickArrayAddress, tickArrayStartTickIndex] = [_nextTick, _tickArrayAddress, _tickArrayStartTickIndex];\r\n    }\r\n    if (nextTick == undefined) {\r\n      throw new Error(\"No invaild tickArray cache\");\r\n    }\r\n    return { nextTick, tickArrayAddress, tickArrayStartTickIndex };\r\n  }\r\n\r\n  public static nextInitializedTickArray(\r\n    tickIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n    tickArrayBitmap: BN[],\r\n    exBitmapInfo: TickArrayBitmapExtensionType,\r\n  ): {\r\n    isExist: boolean;\r\n    nextStartIndex: number;\r\n  } {\r\n    const currentOffset = Math.floor(tickIndex / TickQuery.tickCount(tickSpacing));\r\n    const result: number[] = zeroForOne\r\n      ? TickUtils.searchLowBitFromStart(tickArrayBitmap, exBitmapInfo, currentOffset - 1, 1, tickSpacing)\r\n      : TickUtils.searchHightBitFromStart(tickArrayBitmap, exBitmapInfo, currentOffset + 1, 1, tickSpacing);\r\n\r\n    return result.length > 0 ? { isExist: true, nextStartIndex: result[0] } : { isExist: false, nextStartIndex: 0 };\r\n  }\r\n\r\n  public static firstInitializedTickInOneArray(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickArray: TickArray,\r\n    zeroForOne: boolean,\r\n  ): {\r\n    nextTick: Tick | undefined;\r\n    tickArrayAddress: PublicKey;\r\n    tickArrayStartTickIndex: number;\r\n  } {\r\n    let nextInitializedTick: Tick | undefined = undefined;\r\n    if (zeroForOne) {\r\n      let i = TICK_ARRAY_SIZE - 1;\r\n      while (i >= 0) {\r\n        const tickInArray = tickArray.ticks[i];\r\n        if (tickInArray.liquidityGross.gtn(0)) {\r\n          nextInitializedTick = tickInArray;\r\n          break;\r\n        }\r\n        i = i - 1;\r\n      }\r\n    } else {\r\n      let i = 0;\r\n      while (i < TICK_ARRAY_SIZE) {\r\n        const tickInArray = tickArray.ticks[i];\r\n        if (tickInArray.liquidityGross.gtn(0)) {\r\n          nextInitializedTick = tickInArray;\r\n          break;\r\n        }\r\n        i = i + 1;\r\n      }\r\n    }\r\n    const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(programId, poolId, tickArray.startTickIndex);\r\n    return { nextTick: nextInitializedTick, tickArrayAddress, tickArrayStartTickIndex: tickArray.startTickIndex };\r\n  }\r\n\r\n  public static nextInitializedTickInOneArray(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    tickIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): {\r\n    initializedTick: Tick | undefined;\r\n    tickArrayAddress: PublicKey | undefined;\r\n    tickArrayStartTickIndex: number;\r\n  } {\r\n    const startIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\r\n    let tickPositionInArray = Math.floor((tickIndex - startIndex) / tickSpacing);\r\n    const cachedTickArray = tickArrayCache[startIndex];\r\n    if (cachedTickArray == undefined) {\r\n      return {\r\n        initializedTick: undefined,\r\n        tickArrayAddress: undefined,\r\n        tickArrayStartTickIndex: startIndex,\r\n      };\r\n    }\r\n    let nextInitializedTick: Tick | undefined = undefined;\r\n    if (zeroForOne) {\r\n      while (tickPositionInArray >= 0) {\r\n        const tickInArray = cachedTickArray.ticks[tickPositionInArray];\r\n        if (tickInArray.liquidityGross.gtn(0)) {\r\n          nextInitializedTick = tickInArray;\r\n          break;\r\n        }\r\n        tickPositionInArray = tickPositionInArray - 1;\r\n      }\r\n    } else {\r\n      tickPositionInArray = tickPositionInArray + 1;\r\n      while (tickPositionInArray < TICK_ARRAY_SIZE) {\r\n        const tickInArray = cachedTickArray.ticks[tickPositionInArray];\r\n        if (tickInArray.liquidityGross.gtn(0)) {\r\n          nextInitializedTick = tickInArray;\r\n          break;\r\n        }\r\n        tickPositionInArray = tickPositionInArray + 1;\r\n      }\r\n    }\r\n    const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(programId, poolId, startIndex);\r\n    return {\r\n      initializedTick: nextInitializedTick,\r\n      tickArrayAddress,\r\n      tickArrayStartTickIndex: cachedTickArray.startTickIndex,\r\n    };\r\n  }\r\n\r\n  public static getArrayStartIndex(tickIndex: number, tickSpacing: number): number {\r\n    const ticksInArray = this.tickCount(tickSpacing);\r\n    const start = Math.floor(tickIndex / ticksInArray);\r\n\r\n    return start * ticksInArray;\r\n  }\r\n\r\n  public static checkIsValidStartIndex(tickIndex: number, tickSpacing: number): boolean {\r\n    if (TickUtils.checkIsOutOfBoundary(tickIndex)) {\r\n      if (tickIndex > MAX_TICK) {\r\n        return false;\r\n      }\r\n      const minStartIndex = TickUtils.getTickArrayStartIndexByTick(MIN_TICK, tickSpacing);\r\n      return tickIndex == minStartIndex;\r\n    }\r\n    return tickIndex % this.tickCount(tickSpacing) == 0;\r\n  }\r\n\r\n  public static tickCount(tickSpacing: number): number {\r\n    return TICK_ARRAY_SIZE * tickSpacing;\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\n\r\nimport { TickArrayBitmapExtensionType } from \"../type\";\r\n\r\nimport { MAX_TICK, MIN_TICK } from \"./constants\";\r\nimport { TICK_ARRAY_BITMAP_SIZE, TICK_ARRAY_SIZE, TickUtils } from \"./tick\";\r\nimport { TickQuery } from \"./tickQuery\";\r\nimport { isZero, leadingZeros, leastSignificantBit, mostSignificantBit, trailingZeros } from \"./util\";\r\n\r\nexport const EXTENSION_TICKARRAY_BITMAP_SIZE = 14;\r\n\r\nexport class TickArrayBitmap {\r\n  public static maxTickInTickarrayBitmap(tickSpacing: number): number {\r\n    return tickSpacing * TICK_ARRAY_SIZE * TICK_ARRAY_BITMAP_SIZE;\r\n  }\r\n\r\n  public static getBitmapTickBoundary(\r\n    tickarrayStartIndex: number,\r\n    tickSpacing: number,\r\n  ): {\r\n    minValue: number;\r\n    maxValue: number;\r\n  } {\r\n    const ticksInOneBitmap = this.maxTickInTickarrayBitmap(tickSpacing);\r\n    let m = Math.floor(Math.abs(tickarrayStartIndex) / ticksInOneBitmap);\r\n    if (tickarrayStartIndex < 0 && Math.abs(tickarrayStartIndex) % ticksInOneBitmap != 0) m += 1;\r\n\r\n    const minValue = ticksInOneBitmap * m;\r\n\r\n    return tickarrayStartIndex < 0\r\n      ? { minValue: -minValue, maxValue: -minValue + ticksInOneBitmap }\r\n      : { minValue, maxValue: minValue + ticksInOneBitmap };\r\n  }\r\n\r\n  public static nextInitializedTickArrayStartIndex(\r\n    bitMap: BN,\r\n    lastTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): { isInit: boolean; tickIndex: number } {\r\n    if (!TickQuery.checkIsValidStartIndex(lastTickArrayStartIndex, tickSpacing))\r\n      throw Error(\"nextInitializedTickArrayStartIndex check error\");\r\n\r\n    const tickBoundary = this.maxTickInTickarrayBitmap(tickSpacing);\r\n    const nextTickArrayStartIndex = zeroForOne\r\n      ? lastTickArrayStartIndex - TickQuery.tickCount(tickSpacing)\r\n      : lastTickArrayStartIndex + TickQuery.tickCount(tickSpacing);\r\n\r\n    if (nextTickArrayStartIndex < -tickBoundary || nextTickArrayStartIndex >= tickBoundary) {\r\n      return { isInit: false, tickIndex: lastTickArrayStartIndex };\r\n    }\r\n\r\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\r\n    let compressed = nextTickArrayStartIndex / multiplier + 512;\r\n\r\n    if (nextTickArrayStartIndex < 0 && nextTickArrayStartIndex % multiplier != 0) {\r\n      compressed--;\r\n    }\r\n\r\n    const bitPos = Math.abs(compressed);\r\n\r\n    if (zeroForOne) {\r\n      const offsetBitMap = bitMap.shln(1024 - bitPos - 1);\r\n      const nextBit = mostSignificantBit(1024, offsetBitMap);\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = (bitPos - nextBit - 512) * multiplier;\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        return { isInit: false, tickIndex: -tickBoundary };\r\n      }\r\n    } else {\r\n      const offsetBitMap = bitMap.shrn(bitPos);\r\n      const nextBit = leastSignificantBit(1024, offsetBitMap);\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = (bitPos + nextBit - 512) * multiplier;\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        return { isInit: false, tickIndex: tickBoundary - TickQuery.tickCount(tickSpacing) };\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport class TickArrayBitmapExtensionUtils {\r\n  public static getBitmapOffset(tickIndex: number, tickSpacing: number): number {\r\n    if (!TickQuery.checkIsValidStartIndex(tickIndex, tickSpacing)) {\r\n      throw new Error(\"No enough initialized tickArray\");\r\n    }\r\n    this.checkExtensionBoundary(tickIndex, tickSpacing);\r\n\r\n    const ticksInOneBitmap = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n    let offset = Math.floor(Math.abs(tickIndex) / ticksInOneBitmap) - 1;\r\n\r\n    if (tickIndex < 0 && Math.abs(tickIndex) % ticksInOneBitmap === 0) offset--;\r\n    return offset;\r\n  }\r\n\r\n  public static getBitmap(\r\n    tickIndex: number,\r\n    tickSpacing: number,\r\n    tickArrayBitmapExtension: TickArrayBitmapExtensionType,\r\n  ): { offset: number; tickarrayBitmap: BN[] } {\r\n    const offset = this.getBitmapOffset(tickIndex, tickSpacing);\r\n    if (tickIndex < 0) {\r\n      return { offset, tickarrayBitmap: tickArrayBitmapExtension.negativeTickArrayBitmap[offset] };\r\n    } else {\r\n      return { offset, tickarrayBitmap: tickArrayBitmapExtension.positiveTickArrayBitmap[offset] };\r\n    }\r\n  }\r\n\r\n  public static checkExtensionBoundary(tickIndex: number, tickSpacing: number) {\r\n    const { positiveTickBoundary, negativeTickBoundary } = this.extensionTickBoundary(tickSpacing);\r\n\r\n    if (tickIndex >= negativeTickBoundary && tickIndex < positiveTickBoundary) {\r\n      throw Error(\"checkExtensionBoundary -> InvalidTickArrayBoundary\");\r\n    }\r\n  }\r\n\r\n  public static extensionTickBoundary(tickSpacing: number): {\r\n    positiveTickBoundary: number;\r\n    negativeTickBoundary: number;\r\n  } {\r\n    const positiveTickBoundary = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n\r\n    const negativeTickBoundary = -positiveTickBoundary;\r\n\r\n    if (MAX_TICK <= positiveTickBoundary)\r\n      throw Error(`extensionTickBoundary check error: ${MAX_TICK}, ${positiveTickBoundary}`);\r\n    if (negativeTickBoundary <= MIN_TICK)\r\n      throw Error(`extensionTickBoundary check error: ${negativeTickBoundary}, ${MIN_TICK}`);\r\n\r\n    return { positiveTickBoundary, negativeTickBoundary };\r\n  }\r\n\r\n  public static checkTickArrayIsInit(\r\n    tickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    tickArrayBitmapExtension: TickArrayBitmapExtensionType,\r\n  ): { isInitialized: boolean; startIndex: number } {\r\n    const { tickarrayBitmap } = this.getBitmap(tickArrayStartIndex, tickSpacing, tickArrayBitmapExtension);\r\n\r\n    const tickArrayOffsetInBitmap = this.tickArrayOffsetInBitmap(tickArrayStartIndex, tickSpacing);\r\n\r\n    return {\r\n      isInitialized: TickUtils.mergeTickArrayBitmap(tickarrayBitmap).testn(tickArrayOffsetInBitmap),\r\n      startIndex: tickArrayStartIndex,\r\n    };\r\n  }\r\n\r\n  public static nextInitializedTickArrayFromOneBitmap(\r\n    lastTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n    tickArrayBitmapExtension: TickArrayBitmapExtensionType,\r\n  ): {\r\n    isInit: boolean;\r\n    tickIndex: number;\r\n  } {\r\n    const multiplier = TickQuery.tickCount(tickSpacing);\r\n    const nextTickArrayStartIndex = zeroForOne\r\n      ? lastTickArrayStartIndex - multiplier\r\n      : lastTickArrayStartIndex + multiplier;\r\n    const { tickarrayBitmap } = this.getBitmap(nextTickArrayStartIndex, tickSpacing, tickArrayBitmapExtension);\r\n\r\n    return this.nextInitializedTickArrayInBitmap(tickarrayBitmap, nextTickArrayStartIndex, tickSpacing, zeroForOne);\r\n  }\r\n\r\n  public static nextInitializedTickArrayInBitmap(\r\n    tickarrayBitmap: BN[],\r\n    nextTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): {\r\n    isInit: boolean;\r\n    tickIndex: number;\r\n  } {\r\n    const { minValue: bitmapMinTickBoundary, maxValue: bitmapMaxTickBoundary } = TickArrayBitmap.getBitmapTickBoundary(\r\n      nextTickArrayStartIndex,\r\n      tickSpacing,\r\n    );\r\n\r\n    const tickArrayOffsetInBitmap = this.tickArrayOffsetInBitmap(nextTickArrayStartIndex, tickSpacing);\r\n    if (zeroForOne) {\r\n      // tick from upper to lower\r\n      // find from highter bits to lower bits\r\n      const offsetBitMap = TickUtils.mergeTickArrayBitmap(tickarrayBitmap).shln(\r\n        TICK_ARRAY_BITMAP_SIZE - 1 - tickArrayOffsetInBitmap,\r\n      );\r\n\r\n      const nextBit = isZero(512, offsetBitMap) ? null : leadingZeros(512, offsetBitMap);\r\n\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = nextTickArrayStartIndex - nextBit * TickQuery.tickCount(tickSpacing);\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        // not found til to the end\r\n        return { isInit: false, tickIndex: bitmapMinTickBoundary };\r\n      }\r\n    } else {\r\n      // tick from lower to upper\r\n      // find from lower bits to highter bits\r\n      const offsetBitMap = TickUtils.mergeTickArrayBitmap(tickarrayBitmap).shrn(tickArrayOffsetInBitmap);\r\n\r\n      const nextBit = isZero(512, offsetBitMap) ? null : trailingZeros(512, offsetBitMap);\r\n\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = nextTickArrayStartIndex + nextBit * TickQuery.tickCount(tickSpacing);\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        // not found til to the end\r\n        return { isInit: false, tickIndex: bitmapMaxTickBoundary - TickQuery.tickCount(tickSpacing) };\r\n      }\r\n    }\r\n  }\r\n\r\n  public static tickArrayOffsetInBitmap(tickArrayStartIndex: number, tickSpacing: number): number {\r\n    const m = Math.abs(tickArrayStartIndex) % TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n    let tickArrayOffsetInBitmap = Math.floor(m / TickQuery.tickCount(tickSpacing));\r\n    if (tickArrayStartIndex < 0 && m != 0) {\r\n      tickArrayOffsetInBitmap = TICK_ARRAY_BITMAP_SIZE - tickArrayOffsetInBitmap;\r\n    }\r\n    return tickArrayOffsetInBitmap;\r\n  }\r\n}\r\n","import { blob, bool, i128, i64, publicKey, s32, seq, struct, u128, u16, u32, u64, u8 } from \"../../marshmallow\";\r\n\r\nimport { TICK_ARRAY_SIZE } from \"./utils/tick\";\r\nimport { EXTENSION_TICKARRAY_BITMAP_SIZE } from \"./utils/tickarrayBitmap\";\r\n\r\nexport const ClmmConfigLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  u16(\"index\"),\r\n  publicKey(\"\"),\r\n  u32(\"protocolFeeRate\"),\r\n  u32(\"tradeFeeRate\"),\r\n  u16(\"tickSpacing\"),\r\n  seq(u64(), 8, \"\"),\r\n]);\r\n\r\nexport const ObservationLayout = struct([u32(\"blockTimestamp\"), i64(\"tickCumulative\"), seq(u64(), 4)]);\r\nexport const ObservationInfoLayout = struct([\r\n  blob(8),\r\n  bool(\"initialized\"),\r\n  u64(\"recentEpoch\"),\r\n  u16(\"observationIndex\"),\r\n  publicKey(\"poolId\"),\r\n  seq(ObservationLayout, 100, \"observations\"),\r\n  seq(u64(), 4),\r\n]);\r\n\r\nexport const RewardInfo = struct([\r\n  u8(\"rewardState\"),\r\n  u64(\"openTime\"),\r\n  u64(\"endTime\"),\r\n  u64(\"lastUpdateTime\"),\r\n  u128(\"emissionsPerSecondX64\"),\r\n  u64(\"rewardTotalEmissioned\"),\r\n  u64(\"rewardClaimed\"),\r\n  publicKey(\"tokenMint\"),\r\n  publicKey(\"tokenVault\"),\r\n  publicKey(\"creator\"),\r\n  u128(\"rewardGrowthGlobalX64\"),\r\n]);\r\nexport const PoolInfoLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  publicKey(\"ammConfig\"),\r\n  publicKey(\"creator\"),\r\n  publicKey(\"mintA\"),\r\n  publicKey(\"mintB\"),\r\n  publicKey(\"vaultA\"),\r\n  publicKey(\"vaultB\"),\r\n  publicKey(\"observationId\"),\r\n  u8(\"mintDecimalsA\"),\r\n  u8(\"mintDecimalsB\"),\r\n  u16(\"tickSpacing\"),\r\n  u128(\"liquidity\"),\r\n  u128(\"sqrtPriceX64\"),\r\n  s32(\"tickCurrent\"),\r\n  u32(),\r\n  u128(\"feeGrowthGlobalX64A\"),\r\n  u128(\"feeGrowthGlobalX64B\"),\r\n  u64(\"protocolFeesTokenA\"),\r\n  u64(\"protocolFeesTokenB\"),\r\n\r\n  u128(\"swapInAmountTokenA\"),\r\n  u128(\"swapOutAmountTokenB\"),\r\n  u128(\"swapInAmountTokenB\"),\r\n  u128(\"swapOutAmountTokenA\"),\r\n\r\n  u8(\"status\"),\r\n\r\n  seq(u8(), 7, \"\"),\r\n\r\n  seq(RewardInfo, 3, \"rewardInfos\"),\r\n  seq(u64(), 16, \"tickArrayBitmap\"),\r\n\r\n  u64(\"totalFeesTokenA\"),\r\n  u64(\"totalFeesClaimedTokenA\"),\r\n  u64(\"totalFeesTokenB\"),\r\n  u64(\"totalFeesClaimedTokenB\"),\r\n\r\n  u64(\"fundFeesTokenA\"),\r\n  u64(\"fundFeesTokenB\"),\r\n\r\n  u64(\"startTime\"),\r\n\r\n  seq(u64(), 15 * 4 - 3, \"padding\"),\r\n]);\r\n\r\nexport const PositionRewardInfoLayout = struct([u128(\"growthInsideLastX64\"), u64(\"rewardAmountOwed\")]);\r\nexport const PositionInfoLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  publicKey(\"nftMint\"),\r\n  publicKey(\"poolId\"),\r\n\r\n  s32(\"tickLower\"),\r\n  s32(\"tickUpper\"),\r\n  u128(\"liquidity\"),\r\n  u128(\"feeGrowthInsideLastX64A\"),\r\n  u128(\"feeGrowthInsideLastX64B\"),\r\n  u64(\"tokenFeesOwedA\"),\r\n  u64(\"tokenFeesOwedB\"),\r\n\r\n  seq(PositionRewardInfoLayout, 3, \"rewardInfos\"),\r\n\r\n  seq(u64(), 8, \"\"),\r\n]);\r\n\r\nexport type ClmmPositionLayout = ReturnType<typeof PositionInfoLayout.decode>;\r\n\r\nexport const ProtocolPositionLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  publicKey(\"poolId\"),\r\n  s32(\"tickLowerIndex\"),\r\n  s32(\"tickUpperIndex\"),\r\n  u128(\"liquidity\"),\r\n  u128(\"feeGrowthInsideLastX64A\"),\r\n  u128(\"feeGrowthInsideLastX64B\"),\r\n  u64(\"tokenFeesOwedA\"),\r\n  u64(\"tokenFeesOwedB\"),\r\n  seq(u128(), 3, \"rewardGrowthInside\"),\r\n\r\n  seq(u64(), 8, \"\"),\r\n]);\r\n\r\nexport const TickLayout = struct([\r\n  s32(\"tick\"),\r\n  i128(\"liquidityNet\"),\r\n  u128(\"liquidityGross\"),\r\n  u128(\"feeGrowthOutsideX64A\"),\r\n  u128(\"feeGrowthOutsideX64B\"),\r\n  seq(u128(), 3, \"rewardGrowthsOutsideX64\"),\r\n\r\n  seq(u32(), 13, \"\"),\r\n]);\r\n\r\nexport const TickArrayLayout = struct([\r\n  blob(8),\r\n  publicKey(\"poolId\"),\r\n  s32(\"startTickIndex\"),\r\n  seq(TickLayout, TICK_ARRAY_SIZE, \"ticks\"),\r\n  u8(\"initializedTickCount\"),\r\n\r\n  seq(u8(), 115, \"\"),\r\n]);\r\n\r\nexport const OperationLayout = struct([blob(329), seq(publicKey(), 100, \"whitelistMints\")]);\r\n\r\nexport const TickArrayBitmapExtensionLayout = struct([\r\n  blob(8),\r\n  publicKey(\"poolId\"),\r\n  seq(seq(u64(), 8), EXTENSION_TICKARRAY_BITMAP_SIZE, \"positiveTickArrayBitmap\"),\r\n  seq(seq(u64(), 8), EXTENSION_TICKARRAY_BITMAP_SIZE, \"negativeTickArrayBitmap\"),\r\n]);\r\n\r\nexport const LockPositionLayout = struct([\r\n  u64(),\r\n  u8(\"bump\"),\r\n  publicKey(\"owner\"),\r\n  publicKey(\"poolId\"),\r\n  publicKey(\"positionId\"),\r\n  publicKey(\"nftAccount\"),\r\n  seq(u64(), 8),\r\n]);\r\n\r\nexport const LockClPositionLayoutV2 = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  publicKey(\"lockOwner\"),\r\n  publicKey(\"poolId\"),\r\n  publicKey(\"positionId\"),\r\n  publicKey(\"nftAccount\"),\r\n  publicKey(\"lockNftMint\"),\r\n  u64(\"recentEpoch\"),\r\n  seq(u64(), 8),\r\n]);\r\n"],"mappings":"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","names":[]}