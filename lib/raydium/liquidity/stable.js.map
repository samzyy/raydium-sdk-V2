{"version":3,"sources":["../../../src/raydium/liquidity/stable.ts","../../../src/marshmallow/index.ts","../../../src/marshmallow/buffer-layout.ts"],"sourcesContent":["import { Connection, PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { seq, struct, u64 } from \"../../marshmallow\";\r\n\r\nexport const MODEL_DATA_PUBKEY = new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\");\r\nconst ELEMENT_SIZE = 50000;\r\n\r\nexport const DataElement = struct([u64(\"x\"), u64(\"y\"), u64(\"price\")]);\r\n\r\nexport const modelDataInfoLayout = struct([\r\n  u64(\"accountType\"),\r\n  u64(\"status\"),\r\n  u64(\"multiplier\"),\r\n  u64(\"validDataCount\"),\r\n  seq(DataElement, ELEMENT_SIZE, \"DataElement\"),\r\n]);\r\n\r\nexport interface StableModelLayout {\r\n  accountType: number;\r\n  status: number;\r\n  multiplier: number;\r\n  validDataCount: number;\r\n  DataElement: { x: number; y: number; price: number }[];\r\n}\r\n\r\nfunction estimateRangeByXyReal(_xReal: number, _yReal: number): number[] {\r\n  return [0, ELEMENT_SIZE - 2];\r\n}\r\n\r\nfunction estimateRangeByX(_x: number): number[] {\r\n  return [0, ELEMENT_SIZE - 2];\r\n}\r\n\r\nfunction estimateRangeByY(_y: number): number[] {\r\n  return [0, ELEMENT_SIZE - 2];\r\n}\r\n\r\nfunction getMininumRangeByXyReal(\r\n  layoutData: StableModelLayout,\r\n  xReal: number,\r\n  yReal: number,\r\n): [number, number, boolean] {\r\n  const [min, max] = estimateRangeByXyReal(xReal, yReal);\r\n  let minRangeIdx = min;\r\n  let maxRangeIdx = max;\r\n  let mid = 0;\r\n  const target = (xReal * layoutData.multiplier) / yReal;\r\n  while (minRangeIdx <= maxRangeIdx) {\r\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\r\n    if (mid === 0 || mid >= ELEMENT_SIZE - 2) {\r\n      return [mid, mid, false];\r\n    }\r\n    const cur = (layoutData.DataElement[mid].x * layoutData.multiplier) / layoutData.DataElement[mid].y;\r\n    const left = (layoutData.DataElement[mid - 1].x * layoutData.multiplier) / layoutData.DataElement[mid - 1].y;\r\n    const right = (layoutData.DataElement[mid + 1].x * layoutData.multiplier) / layoutData.DataElement[mid + 1].y;\r\n\r\n    if (target === cur) {\r\n      return [mid, mid, true];\r\n    } else if (target === left) {\r\n      return [mid - 1, mid - 1, true];\r\n    } else if (target === right) {\r\n      return [mid + 1, mid + 1, true];\r\n    } else if (target < left) {\r\n      maxRangeIdx = mid - 1;\r\n    } else if (target > left && target < cur) {\r\n      return [mid - 1, mid, true];\r\n    } else if (target > cur && target < right) {\r\n      return [mid, mid + 1, true];\r\n    } else {\r\n      minRangeIdx = mid + 1;\r\n    }\r\n  }\r\n  return [mid, mid, false];\r\n}\r\nfunction getRatio(layoutData: StableModelLayout, xReal: number, yReal: number): number {\r\n  const [minRangeIdx, maxRangeIdx, find] = getMininumRangeByXyReal(layoutData, xReal, yReal);\r\n\r\n  if (!find) {\r\n    return 0;\r\n  }\r\n\r\n  if (minRangeIdx === maxRangeIdx) {\r\n    const x = layoutData.DataElement[minRangeIdx].x;\r\n    const ratio = (xReal * layoutData.multiplier) / x;\r\n    return ratio;\r\n  } else {\r\n    const x1 = layoutData.DataElement[minRangeIdx].x;\r\n    const y1 = layoutData.DataElement[minRangeIdx].y;\r\n    const x2 = layoutData.DataElement[maxRangeIdx].x;\r\n    const y2 = layoutData.DataElement[maxRangeIdx].y;\r\n\r\n    const xDenominator = yReal * (x2 * y1 - x1 * y2);\r\n    const xNumerator1 = x1 * xDenominator;\r\n    const xNumerator2 = (x2 - x1) * (xReal * y1 - x1 * yReal) * y2;\r\n\r\n    const xNumerator = xNumerator1 + xNumerator2;\r\n    const ratio = (xReal * layoutData.multiplier * xDenominator) / xNumerator;\r\n    return ratio;\r\n  }\r\n}\r\n\r\nfunction realToTable(layoutData: StableModelLayout, realValue: number, ratio: number): number {\r\n  return (realValue * layoutData.multiplier) / ratio;\r\n}\r\n\r\nfunction tableToReal(layoutData: StableModelLayout, tableValue: number, ratio: number): number {\r\n  return (tableValue * ratio) / layoutData.multiplier;\r\n}\r\n\r\nfunction getMinimumRangeByX(layoutData: StableModelLayout, x: number): [number, number, boolean] {\r\n  const [min, max] = estimateRangeByX(x);\r\n  let minRangeIdx = min;\r\n  let maxRangeIdx = max;\r\n  let mid = 0;\r\n  const target = x;\r\n  while (minRangeIdx < maxRangeIdx) {\r\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\r\n\r\n    if (mid <= 0 || mid > ELEMENT_SIZE - 2) {\r\n      return [mid, mid, false];\r\n    }\r\n    const cur = layoutData.DataElement[mid].x;\r\n    const left = layoutData.DataElement[mid - 1].x;\r\n    const right = layoutData.DataElement[mid + 1].x;\r\n\r\n    if (target === cur) return [mid, mid, true];\r\n    else if (target === left) return [mid - 1, mid - 1, true];\r\n    else if (target === right) return [mid + 1, mid + 1, true];\r\n    else if (target < left) maxRangeIdx = mid - 1;\r\n    else if (target > left && target < cur) return [mid - 1, mid, true];\r\n    else if (target > cur && target < right) return [mid, mid + 1, true];\r\n    else minRangeIdx = mid + 1;\r\n  }\r\n  return [mid, mid, false];\r\n}\r\n\r\nfunction getMinimumRangeByY(layoutData: StableModelLayout, y: number): [number, number, boolean] {\r\n  const [min, max] = estimateRangeByY(y);\r\n  let minRangeIdx = min;\r\n  let maxRangeIdx = max;\r\n  let mid = 0;\r\n  const target = y;\r\n  while (minRangeIdx <= maxRangeIdx) {\r\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\r\n    if (mid <= 0 || mid >= ELEMENT_SIZE - 2) {\r\n      return [mid, mid, false];\r\n    }\r\n\r\n    const cur = layoutData.DataElement[mid].y;\r\n    const left = layoutData.DataElement[mid - 1].y;\r\n    const right = layoutData.DataElement[mid + 1].y;\r\n    if (target === cur) return [mid, mid, true];\r\n    else if (target === left) return [mid - 1, mid - 1, true];\r\n    else if (target === right) return [mid + 1, mid + 1, true];\r\n    else if (target < right) {\r\n      minRangeIdx = mid + 1;\r\n    } else if (target < left && target > cur) return [mid - 1, mid, true];\r\n    else if (target < cur && target > right) return [mid, mid + 1, true];\r\n    else maxRangeIdx = mid - 1;\r\n  }\r\n  return [mid, mid, false];\r\n}\r\n\r\nfunction getDataByX(\r\n  layoutData: StableModelLayout,\r\n  x: number,\r\n  dx: number,\r\n  priceUp: boolean,\r\n): [number, number, boolean, boolean] {\r\n  const xWithDx = priceUp ? x + dx : x - dx;\r\n  const [minIdx, maxIdx, find] = getMinimumRangeByX(layoutData, xWithDx);\r\n  if (!find) return [0, 0, false, find];\r\n\r\n  if (minIdx === maxIdx) return [layoutData.DataElement[maxIdx].price, layoutData.DataElement[maxIdx].y, false, find];\r\n  else {\r\n    const x1 = layoutData.DataElement[minIdx].x;\r\n    const x2 = layoutData.DataElement[maxIdx].x;\r\n    const p1 = layoutData.DataElement[minIdx].price;\r\n    const p2 = layoutData.DataElement[maxIdx].price;\r\n    const y1 = layoutData.DataElement[minIdx].y;\r\n    const y2 = layoutData.DataElement[maxIdx].y;\r\n\r\n    if (x >= x1 && x <= x2) {\r\n      if (priceUp) return [p2, y2, true, find];\r\n      else return [p1, y1, true, find];\r\n    } else {\r\n      let p, y;\r\n      if (priceUp) {\r\n        p = p1 + ((p2 - p1) * (x - x1)) / (x2 - x1);\r\n        y = y1 - ((xWithDx - x1) * layoutData.multiplier) / p2;\r\n      } else {\r\n        p = p1 + ((p2 - p1) * (x - x1)) / (x2 - x1);\r\n        y = y2 + ((x2 - xWithDx) * layoutData.multiplier) / p1;\r\n      }\r\n      return [p, y, false, find];\r\n    }\r\n  }\r\n}\r\n\r\nfunction getDataByY(\r\n  layoutData: StableModelLayout,\r\n  y: number,\r\n  dy: number,\r\n  priceUp: boolean,\r\n): [number, number, boolean, boolean] {\r\n  const yWithDy = priceUp ? y - dy : y + dy;\r\n  const [minIdx, maxIdx, find] = getMinimumRangeByY(layoutData, yWithDy);\r\n  if (!find) return [0, 0, false, find];\r\n  if (minIdx === maxIdx) return [layoutData.DataElement[maxIdx].price, layoutData.DataElement[maxIdx].x, false, find];\r\n  else {\r\n    const x1 = layoutData.DataElement[minIdx].x;\r\n    const x2 = layoutData.DataElement[maxIdx].x;\r\n    const p1 = layoutData.DataElement[minIdx].price;\r\n    const p2 = layoutData.DataElement[maxIdx].price;\r\n    const y1 = layoutData.DataElement[minIdx].y;\r\n    const y2 = layoutData.DataElement[maxIdx].y;\r\n\r\n    if (y >= y2 && y <= y1) {\r\n      return priceUp ? [p2, x2, true, find] : [p1, x1, true, find];\r\n    } else {\r\n      let p, x;\r\n      if (priceUp) {\r\n        p = p1 + ((p2 - p1) * (y1 - y)) / (y1 - y2);\r\n        x = x1 + (p2 * (y1 - yWithDy)) / layoutData.multiplier;\r\n      } else {\r\n        p = p1 + ((p2 - p1) * (y1 - y)) / (y1 - y2);\r\n        x = x2 - (p1 * (yWithDy - y2)) / layoutData.multiplier;\r\n      }\r\n      return [p, x, false, find];\r\n    }\r\n  }\r\n}\r\n\r\nfunction getMidPrice(layoutData: StableModelLayout, x: number): number {\r\n  const ret = getDataByX(layoutData, x, 0, false);\r\n  if (ret[3]) return ret[0];\r\n  else return 0;\r\n}\r\n\r\nexport function getDyByDxBaseIn(layoutData: StableModelLayout, xReal: number, yReal: number, dxReal: number): number {\r\n  const ratio = getRatio(layoutData, xReal, yReal);\r\n  const x = realToTable(layoutData, xReal, ratio);\r\n  const y = realToTable(layoutData, yReal, ratio);\r\n  const dx = realToTable(layoutData, dxReal, ratio);\r\n  const priceUp = true;\r\n  const [p, y2, lessTrade, find] = getDataByX(layoutData, x, dx, priceUp);\r\n  if (!find) return 0;\r\n  if (lessTrade) {\r\n    const dyReal = (dxReal * layoutData.multiplier) / p;\r\n    return dyReal;\r\n  } else {\r\n    const dy = y - y2;\r\n    const dyReal = tableToReal(layoutData, dy, ratio);\r\n    return dyReal;\r\n  }\r\n}\r\n\r\nexport function getDxByDyBaseIn(layoutData: StableModelLayout, xReal: number, yReal: number, dyReal: number): number {\r\n  const ratio = getRatio(layoutData, xReal, yReal);\r\n  const x = realToTable(layoutData, xReal, ratio);\r\n  const y = realToTable(layoutData, yReal, ratio);\r\n  const dy = realToTable(layoutData, dyReal, ratio);\r\n  const priceUp = false;\r\n  const [p, x2, lessTrade, find] = getDataByY(layoutData, y, dy, priceUp);\r\n  if (!find) return 0;\r\n  if (lessTrade) {\r\n    const dxReal = (dyReal * p) / layoutData.multiplier;\r\n    return dxReal;\r\n  } else {\r\n    const dx = x - x2;\r\n    const dxReal = tableToReal(layoutData, dx, ratio);\r\n    return dxReal;\r\n  }\r\n}\r\n\r\nexport function formatLayout(buffer: Buffer): StableModelLayout {\r\n  const layoutInfo = modelDataInfoLayout.decode(buffer);\r\n  return {\r\n    accountType: layoutInfo.accountType.toNumber(),\r\n    status: layoutInfo.status.toNumber(),\r\n    multiplier: layoutInfo.multiplier.toNumber(),\r\n    validDataCount: layoutInfo.validDataCount.toNumber(),\r\n    DataElement: layoutInfo.DataElement.map((item: any) => ({\r\n      x: item.x.toNumber(),\r\n      y: item.y.toNumber(),\r\n      price: item.price.toNumber(),\r\n    })),\r\n  };\r\n}\r\n\r\nexport function getStablePrice(\r\n  layoutData: StableModelLayout,\r\n  coinReal: number,\r\n  pcReal: number,\r\n  baseCoin: boolean,\r\n): number {\r\n  const price =\r\n    getMidPrice(layoutData, realToTable(layoutData, coinReal, getRatio(layoutData, coinReal, pcReal))) /\r\n    layoutData.multiplier;\r\n  return baseCoin ? price : 1 / price;\r\n}\r\n\r\nexport class StableLayout {\r\n  private readonly connection: Connection;\r\n  private _layoutData: StableModelLayout = {\r\n    accountType: 0,\r\n    status: 0,\r\n    multiplier: 0,\r\n    validDataCount: 0,\r\n    DataElement: [],\r\n  };\r\n\r\n  constructor({ connection }: { connection: Connection }) {\r\n    this.connection = connection;\r\n  }\r\n\r\n  get stableModelData(): StableModelLayout {\r\n    return this._layoutData;\r\n  }\r\n\r\n  public async initStableModelLayout(): Promise<void> {\r\n    if (this._layoutData.validDataCount === 0) {\r\n      if (this.connection) {\r\n        const acc = await this.connection.getAccountInfo(MODEL_DATA_PUBKEY);\r\n        if (acc) this._layoutData = formatLayout(acc?.data);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN, { isBN } from \"bn.js\";\r\n\r\nimport {\r\n  bits,\r\n  blob,\r\n  Blob,\r\n  Layout,\r\n  offset as _offset,\r\n  seq as _seq,\r\n  Structure as _Structure,\r\n  u32 as _u32,\r\n  u8 as _u8,\r\n  UInt,\r\n  union as _union,\r\n  Union as _Union,\r\n} from \"./buffer-layout\";\r\n\r\nexport * from \"./buffer-layout\";\r\nexport { blob };\r\n\r\nexport class BNLayout<P extends string = \"\"> extends Layout<BN, P> {\r\n  blob: Layout<Buffer>;\r\n  signed: boolean;\r\n\r\n  constructor(span: number, signed: boolean, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends, but it desn't matter\r\n    super(span, property);\r\n    this.blob = blob(span);\r\n    this.signed = signed;\r\n  }\r\n\r\n  /** @override */\r\n  decode(b: Buffer, offset = 0): BN {\r\n    const num = new BN(this.blob.decode(b, offset), 10, \"le\");\r\n    if (this.signed) {\r\n      return num.fromTwos(this.span * 8).clone();\r\n    }\r\n    return num;\r\n  }\r\n\r\n  /** @override */\r\n  encode(src: BN, b: Buffer, offset = 0): number {\r\n    if (typeof src === \"number\") src = new BN(src); // src will pass a number accidently in union\r\n    if (this.signed) {\r\n      src = src.toTwos(this.span * 8);\r\n    }\r\n    return this.blob.encode(src.toArrayLike(Buffer, \"le\", this.span), b, offset);\r\n  }\r\n}\r\n\r\nexport class WideBits<P extends string = \"\"> extends Layout<Record<string, boolean>, P> {\r\n  _lower: any;\r\n  _upper: any;\r\n  // TODO: unknown\r\n  constructor(property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(8, property);\r\n    this._lower = bits(_u32(), false);\r\n    this._upper = bits(_u32(), false);\r\n  }\r\n\r\n  addBoolean(property: string): void {\r\n    if (this._lower.fields.length < 32) {\r\n      this._lower.addBoolean(property);\r\n    } else {\r\n      this._upper.addBoolean(property);\r\n    }\r\n  }\r\n\r\n  decode(b: Buffer, offset = 0): Record<string, boolean> {\r\n    const lowerDecoded = this._lower.decode(b, offset);\r\n    const upperDecoded = this._upper.decode(b, offset + this._lower.span);\r\n    return { ...lowerDecoded, ...upperDecoded };\r\n  }\r\n\r\n  encode(src: any /* TEMP */, b: Buffer, offset = 0): any {\r\n    return this._lower.encode(src, b, offset) + this._upper.encode(src, b, offset + this._lower.span);\r\n  }\r\n}\r\n\r\nexport function u8<P extends string = \"\">(property?: P): UInt<number, P> {\r\n  return new UInt(1, property);\r\n}\r\n\r\nexport function u32<P extends string = \"\">(property?: P): UInt<number, P> {\r\n  return new UInt(4, property);\r\n}\r\n\r\nexport function u64<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(8, false, property);\r\n}\r\n\r\nexport function u128<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(16, false, property);\r\n}\r\n\r\nexport function i8<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(1, true, property);\r\n}\r\n\r\nexport function i64<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(8, true, property);\r\n}\r\n\r\nexport function i128<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(16, true, property);\r\n}\r\n\r\nexport class WrappedLayout<T, U, P extends string = \"\"> extends Layout<U, P> {\r\n  layout: Layout<T>;\r\n  decoder: (data: T) => U;\r\n  encoder: (src: U) => T;\r\n\r\n  constructor(layout: Layout<T>, decoder: (data: T) => U, encoder: (src: U) => T, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(layout.span, property);\r\n    this.layout = layout;\r\n    this.decoder = decoder;\r\n    this.encoder = encoder;\r\n  }\r\n\r\n  decode(b: Buffer, offset?: number): U {\r\n    return this.decoder(this.layout.decode(b, offset));\r\n  }\r\n\r\n  encode(src: U, b: Buffer, offset?: number): number {\r\n    return this.layout.encode(this.encoder(src), b, offset);\r\n  }\r\n\r\n  getSpan(b: Buffer, offset?: number): number {\r\n    return this.layout.getSpan(b, offset);\r\n  }\r\n}\r\n\r\nexport function publicKey<P extends string = \"\">(property?: P): Layout<PublicKey, P> {\r\n  return new WrappedLayout(\r\n    blob(32),\r\n    (b: Buffer) => new PublicKey(b),\r\n    (key: PublicKey) => key.toBuffer(),\r\n    property,\r\n  );\r\n}\r\n\r\nexport class OptionLayout<T, P> extends Layout<T | null, P> {\r\n  layout: Layout<T>;\r\n  discriminator: Layout<number>;\r\n\r\n  constructor(layout: Layout<T>, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(-1, property);\r\n    this.layout = layout;\r\n    this.discriminator = _u8();\r\n  }\r\n\r\n  encode(src: T | null, b: Buffer, offset = 0): number {\r\n    if (src === null || src === undefined) {\r\n      return this.discriminator.encode(0, b, offset);\r\n    }\r\n    this.discriminator.encode(1, b, offset);\r\n    return this.layout.encode(src, b, offset + 1) + 1;\r\n  }\r\n\r\n  decode(b: Buffer, offset = 0): T | null {\r\n    const discriminator = this.discriminator.decode(b, offset);\r\n    if (discriminator === 0) {\r\n      return null;\r\n    } else if (discriminator === 1) {\r\n      return this.layout.decode(b, offset + 1);\r\n    }\r\n    throw new Error(\"Invalid option \" + this.property);\r\n  }\r\n\r\n  getSpan(b: Buffer, offset = 0): number {\r\n    const discriminator = this.discriminator.decode(b, offset);\r\n    if (discriminator === 0) {\r\n      return 1;\r\n    } else if (discriminator === 1) {\r\n      return this.layout.getSpan(b, offset + 1) + 1;\r\n    }\r\n    throw new Error(\"Invalid option \" + this.property);\r\n  }\r\n}\r\n\r\nexport function option<T, P extends string = \"\">(layout: Layout<T>, property?: P): Layout<T | null, P> {\r\n  return new OptionLayout<T, P>(layout, property);\r\n}\r\n\r\nexport function bool<P extends string = \"\">(property?: P): Layout<boolean, P> {\r\n  return new WrappedLayout(_u8(), decodeBool, encodeBool, property);\r\n}\r\n\r\nexport function decodeBool(value: number): boolean {\r\n  if (value === 0) {\r\n    return false;\r\n  } else if (value === 1) {\r\n    return true;\r\n  }\r\n  throw new Error(\"Invalid bool: \" + value);\r\n}\r\n\r\nexport function encodeBool(value: boolean): number {\r\n  return value ? 1 : 0;\r\n}\r\n\r\nexport function vec<T, P extends string = \"\">(elementLayout: Layout<T>, property?: P): Layout<T[], P> {\r\n  const length = _u32(\"length\");\r\n  const layout: Layout<{ values: T[] }> = struct([\r\n    length,\r\n    seq(elementLayout, _offset(length, -length.span), \"values\"),\r\n  ]) as any; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ values }) => values,\r\n    (values) => ({ values }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport function tagged<T, P extends string = \"\">(tag: BN, layout: Layout<T>, property?: P): Layout<T, P> {\r\n  const wrappedLayout: Layout<{ tag: BN; data: T }> = struct([u64(\"tag\"), layout.replicate(\"data\")]) as any; // Something I don't know\r\n\r\n  function decodeTag({ tag: receivedTag, data }: { tag: BN; data: T }): T {\r\n    if (!receivedTag.eq(tag)) {\r\n      throw new Error(\"Invalid tag, expected: \" + tag.toString(\"hex\") + \", got: \" + receivedTag.toString(\"hex\"));\r\n    }\r\n    return data;\r\n  }\r\n\r\n  return new WrappedLayout(wrappedLayout, decodeTag, (data) => ({ tag, data }), property);\r\n}\r\n\r\nexport function vecU8<P extends string = \"\">(property?: P): Layout<Buffer, P> {\r\n  const length = _u32(\"length\");\r\n  const layout: Layout<{ data: Buffer }> = struct([length, blob(_offset(length, -length.span), \"data\")]) as any; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ data }) => data,\r\n    (data) => ({ data }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport function str<P extends string = \"\">(property?: P): Layout<string, P> {\r\n  return new WrappedLayout(\r\n    vecU8(),\r\n    (data) => data.toString(\"utf-8\"),\r\n    (s) => Buffer.from(s, \"utf-8\"),\r\n    property,\r\n  );\r\n}\r\n\r\nexport interface EnumLayout<T, P extends string = \"\"> extends Layout<T, P> {\r\n  registry: Record<string, Layout<any>>;\r\n}\r\n\r\nexport function rustEnum<T, P extends string = \"\">(variants: Layout<any>[], property?: P): EnumLayout<T, P> {\r\n  const unionLayout = _union(_u8(), property);\r\n  variants.forEach((variant, index) => unionLayout.addVariant(index, variant, variant.property));\r\n  return unionLayout as any; // ?why use UnionLayout? This must be a fault\r\n}\r\n\r\nexport function array<T, P extends string = \"\">(\r\n  elementLayout: Layout<T>,\r\n  length: number,\r\n  property?: P,\r\n): Layout<T[], P> {\r\n  const layout = struct([seq(elementLayout, length, \"values\")]) as any as Layout<{ values: T[] }>; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ values }) => values,\r\n    (values) => ({ values }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport class Structure<T, P, D extends { [key: string]: any; }> extends _Structure<T, P, D> {\r\n  /** @override */\r\n  decode(b: Buffer, offset?: number): D {\r\n    return super.decode(b, offset);\r\n  }\r\n}\r\n\r\nexport function struct<T, P extends string = \"\">(\r\n  fields: T,\r\n  property?: P,\r\n  decodePrefixes?: boolean,\r\n): T extends Layout<infer Value, infer Property>[]\r\n  ? Structure<\r\n    Value,\r\n    P,\r\n    {\r\n      [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\r\n      ? V\r\n      : any;\r\n    }\r\n  >\r\n  : any {\r\n  //@ts-expect-error this type is not quite satisfied the define, but, never no need to worry about.\r\n  return new Structure(fields, property, decodePrefixes);\r\n}\r\n\r\nexport type GetLayoutSchemaFromStructure<T extends Structure<any, any, any>> = T extends Structure<any, any, infer S>\r\n  ? S\r\n  : any;\r\nexport type GetStructureFromLayoutSchema<S extends { [key: string]: any; }> = Structure<any, any, S>;\r\n\r\nexport class Union<Schema extends { [key: string]: any; }> extends _Union<Schema> {\r\n  encodeInstruction(instruction: any): Buffer {\r\n    const instructionMaxSpan = Math.max(...Object.values(this.registry).map((r) => r.span));\r\n    const b = Buffer.alloc(instructionMaxSpan);\r\n    return b.slice(0, this.encode(instruction, b));\r\n  }\r\n\r\n  decodeInstruction(instruction: any): Partial<Schema> {\r\n    return this.decode(instruction);\r\n  }\r\n}\r\nexport function union<UnionSchema extends { [key: string]: any } = any>(\r\n  discr: any,\r\n  defaultLayout?: any,\r\n  property?: string,\r\n): Union<UnionSchema> {\r\n  return new Union(discr, defaultLayout, property);\r\n}\r\n\r\nclass Zeros extends Blob {\r\n  decode(b: Buffer, offset: number): Buffer {\r\n    const slice = super.decode(b, offset);\r\n    if (!slice.every((v) => v === 0)) {\r\n      throw new Error(\"nonzero padding bytes\");\r\n    }\r\n    return slice;\r\n  }\r\n}\r\n\r\nexport function zeros(length: number): Zeros {\r\n  return new Zeros(length);\r\n}\r\n\r\nexport function seq<T, P extends string = \"\", AnotherP extends string = \"\">(\r\n  elementLayout: Layout<T, P>,\r\n  count: number | BN | Layout<BN | number, P>,\r\n  property?: AnotherP,\r\n): Layout<T[], AnotherP> {\r\n  let parsedCount: number;\r\n  const superCount =\r\n    typeof count === \"number\"\r\n      ? count\r\n      : isBN(count)\r\n        ? count.toNumber()\r\n        : new Proxy(count as unknown as Layout<number> /* pretend to be Layout<number> */, {\r\n          get(target, property): any {\r\n            if (!parsedCount) {\r\n              // get count in targetLayout. note that count may be BN\r\n              const countProperty = Reflect.get(target, \"count\");\r\n\r\n              // let targetLayout's  property:count be a number\r\n              parsedCount = isBN(countProperty) ? countProperty.toNumber() : countProperty;\r\n\r\n              // record the count\r\n              Reflect.set(target, \"count\", parsedCount);\r\n            }\r\n            return Reflect.get(target, property);\r\n          },\r\n          set(target, property, value): any {\r\n            if (property === \"count\") {\r\n              parsedCount = value;\r\n            }\r\n            return Reflect.set(target, property, value);\r\n          },\r\n        });\r\n\r\n  // @ts-expect-error force type\r\n  return _seq(elementLayout, superCount, property);\r\n}\r\n","import {\r\n  bits as _bits,\r\n  BitStructure as _BitStructure,\r\n  blob as _blob,\r\n  Blob as _Blob,\r\n  cstr as _cstr,\r\n  f32 as _f32,\r\n  f32be as _f32be,\r\n  f64 as _f64,\r\n  f64be as _f64be,\r\n  greedy as _greedy,\r\n  Layout as _Layout,\r\n  ns64 as _ns64,\r\n  ns64be as _ns64be,\r\n  nu64 as _nu64,\r\n  nu64be as _nu64be,\r\n  offset as _offset,\r\n  s16 as _s16,\r\n  s16be as _s16be,\r\n  s24 as _s24,\r\n  s24be as _s24be,\r\n  s32 as _s32,\r\n  s32be as _s32be,\r\n  s40 as _s40,\r\n  s40be as _s40be,\r\n  s48 as _s48,\r\n  s48be as _s48be,\r\n  s8 as _s8,\r\n  seq as _seq,\r\n  struct as _struct,\r\n  Structure as _Structure,\r\n  u16 as _u16,\r\n  u16be as _u16be,\r\n  u24 as _u24,\r\n  u24be as _u24be,\r\n  u32 as _u32,\r\n  u32be as _u32be,\r\n  u40 as _u40,\r\n  u40be as _u40be,\r\n  u48 as _u48,\r\n  u48be as _u48be,\r\n  u8 as _u8,\r\n  UInt as _UInt,\r\n  union as _union,\r\n  Union as _Union,\r\n  unionLayoutDiscriminator as _unionLayoutDiscriminator,\r\n  utf8 as _utf8,\r\n} from \"@solana/buffer-layout\";\r\n\r\n//#region ------------------- Layout -------------------\r\nexport interface Layout<T = any, P = \"\"> {\r\n  span: number;\r\n  property?: P;\r\n  decode(b: Buffer, offset?: number): T;\r\n  encode(src: T, b: Buffer, offset?: number): number;\r\n  getSpan(b: Buffer, offset?: number): number;\r\n  replicate<AP extends string>(name: AP): Layout<T, AP>;\r\n}\r\nexport interface LayoutConstructor {\r\n  new <T, P>(): Layout<T, P>; // for class extends syntex\r\n  new <T, P>(span?: T, property?: P): Layout<T, P>;\r\n  readonly prototype: Layout;\r\n}\r\nexport const Layout = _Layout as unknown as LayoutConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Structure -------------------\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nexport interface Structure<T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>\r\n  extends Layout<DecodeSchema, P> {\r\n  span: number;\r\n  decode(b: Buffer, offset?: number): DecodeSchema;\r\n  layoutFor<AP extends string>(property: AP): Layout<DecodeSchema[AP]>;\r\n  offsetOf<AP extends string>(property: AP): number;\r\n}\r\ninterface StructureConstructor {\r\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(): Structure<T, P, DecodeSchema>;\r\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(\r\n    fields: T,\r\n    property?: P,\r\n    decodePrefixes?: boolean,\r\n  ): Structure<T, P, DecodeSchema>;\r\n}\r\nexport const Structure = _Structure as unknown as StructureConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Union -------------------\r\nexport interface Union<UnionSchema extends { [key: string]: any } = any> extends Layout {\r\n  registry: object;\r\n  decode(b: Buffer, offset?: number): Partial<UnionSchema>;\r\n  addVariant(\r\n    variant: number,\r\n    layout: Structure<any, any, Partial<UnionSchema>> | Layout<any, keyof UnionSchema>,\r\n    property?: string,\r\n  ): any /* TEMP: code in Layout.js 1809 */;\r\n}\r\ninterface UnionConstructor {\r\n  new <UnionSchema extends { [key: string]: any } = any>(): Union<UnionSchema>;\r\n  new <UnionSchema extends { [key: string]: any } = any>(\r\n    discr: Layout<any, any>,\r\n    defaultLayout: Layout<any, any>,\r\n    property?: string,\r\n  ): Union<UnionSchema>;\r\n}\r\nexport const Union = _Union as unknown as UnionConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- BitStructure -------------------\r\nexport type BitStructure<T = unknown /* TEMP */, P = \"\"> = Layout<T, P>;\r\ninterface BitStructureConstructor {\r\n  new (...params: any[]): BitStructure;\r\n}\r\nexport const BitStructure = _BitStructure as BitStructureConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- UInt -------------------\r\nexport type UInt<T = any, P = \"\"> = Layout<T, P>;\r\ninterface UIntConstructor {\r\n  new <T, P>(span?: T, property?: P): UInt<T, P>;\r\n}\r\nexport const UInt = _UInt as UIntConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Blob -------------------\r\nexport type Blob<P extends string = \"\"> = Layout<Buffer, P>;\r\ninterface BlobConstructor {\r\n  new (...params: ConstructorParameters<LayoutConstructor>): Blob;\r\n}\r\nexport const Blob = _Blob as unknown as BlobConstructor;\r\n//#endregion\r\n\r\nexport const greedy = _greedy as <P extends string = \"\">(elementSpan?: number, property?: P) => Layout<number, P>;\r\nexport const u8 = _u8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u16 = _u16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u24 = _u24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u32 = _u32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u40 = _u40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u48 = _u48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const nu64 = _nu64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u16be = _u16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u24be = _u24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u32be = _u32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u40be = _u40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u48be = _u48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const nu64be = _nu64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s8 = _s8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s16 = _s16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s24 = _s24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s32 = _s32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s40 = _s40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s48 = _s48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const ns64 = _ns64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s16be = _s16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s24be = _s24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s32be = _s32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s40be = _s40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s48be = _s48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const ns64be = _ns64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f32 = _f32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f32be = _f32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f64 = _f64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f64be = _f64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\n\r\nexport const struct = _struct as <T, P extends string = \"\">(\r\n  fields: T,\r\n  property?: P,\r\n  decodePrefixes?: boolean,\r\n) => T extends Layout<infer Value, infer Property>[]\r\n  ? Structure<\r\n      Value,\r\n      P,\r\n      {\r\n        [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\r\n          ? V\r\n          : any;\r\n      }\r\n    >\r\n  : any;\r\n\r\nexport const seq = _seq as unknown as <T, P>(\r\n  elementLayout: Layout<T, string>,\r\n  count: number | Layout<number, string>,\r\n  property?: P,\r\n) => Layout<T[]>;\r\nexport const union = _union as <UnionSchema extends { [key: string]: any } = any>(\r\n  discr: Layout<any, any>,\r\n  defaultLayout?: any,\r\n  property?: string,\r\n) => Union<UnionSchema>;\r\nexport const unionLayoutDiscriminator = _unionLayoutDiscriminator as <P extends string = \"\">(\r\n  layout: Layout<any, P>,\r\n  property?: P,\r\n) => any;\r\nexport const blob = _blob as unknown as <P extends string = \"\">(\r\n  length: number | Layout<number, P>,\r\n  property?: P,\r\n) => Blob<P>;\r\nexport const cstr = _cstr as <P extends string = \"\">(property?: P) => Layout<string, P>;\r\nexport const utf8 = _utf8 as <P extends string = \"\">(maxSpan: number, property?: P) => Layout<string, P>;\r\nexport const bits = _bits as unknown as <T, P extends string = \"\">(\r\n  word: Layout<T>,\r\n  msb?: boolean,\r\n  property?: P,\r\n) => BitStructure<T, P>; // TODO: not quite sure\r\nexport const offset = _offset as unknown as <T, P extends string = \"\">(\r\n  layout: Layout<T, P>,\r\n  offset?: number,\r\n  property?: P,\r\n) => Layout<T, P>;\r\n\r\nexport type GetStructureSchema<T extends Structure> = T extends Structure<any, any, infer S> ? S : unknown;\r\n"],"mappings":"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","names":[]}