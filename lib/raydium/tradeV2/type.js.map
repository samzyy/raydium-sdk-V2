{"version":3,"sources":["../../../src/raydium/tradeV2/type.ts"],"sourcesContent":["import { Keypair, PublicKey, Signer, Transaction, TransactionInstruction } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { ApiV3PoolInfoItem, PoolKeys } from \"../../api/type\";\r\nimport { Token, TokenAmount } from \"../../module\";\r\nimport { ComputeClmmPoolInfo } from \"../../raydium/clmm/type\";\r\nimport { ComputeAmountOutParam } from \"../../raydium/liquidity/type\";\r\nimport { CpmmComputeData } from \"../cpmm\";\r\nimport { TransferAmountFee } from \"../type\";\r\n\r\nexport interface ComputeAmountOutAmmLayout {\r\n  amountIn: TransferAmountFee;\r\n  amountOut: TransferAmountFee;\r\n  minAmountOut: TransferAmountFee;\r\n  currentPrice: Decimal | undefined;\r\n  executionPrice: Decimal | null;\r\n  priceImpact: Decimal;\r\n  fee: TokenAmount[];\r\n  routeType: \"amm\";\r\n  poolInfoList: ComputePoolType[];\r\n  remainingAccounts: PublicKey[][];\r\n  poolReady: boolean;\r\n  poolType: \"CLMM\" | \"CPMM\" | \"STABLE\" | undefined;\r\n\r\n  feeConfig?: {\r\n    feeAmount: BN;\r\n    feeAccount: PublicKey;\r\n  };\r\n\r\n  expirationTime: number | undefined;\r\n\r\n  allTrade: boolean;\r\n  slippage: number;\r\n  clmmExPriceX64: (BN | undefined)[];\r\n}\r\nexport interface ComputeAmountOutRouteLayout {\r\n  amountIn: TransferAmountFee;\r\n  amountOut: TransferAmountFee;\r\n  minAmountOut: TransferAmountFee;\r\n  currentPrice: Decimal | undefined;\r\n  executionPrice: Decimal | null;\r\n  priceImpact: Decimal;\r\n  fee: TokenAmount[];\r\n  routeType: \"route\";\r\n  poolInfoList: ComputePoolType[];\r\n  remainingAccounts: (PublicKey[] | undefined)[];\r\n  minMiddleAmountFee: TokenAmount | undefined;\r\n  middleToken: Token;\r\n  poolReady: boolean;\r\n  poolType: (string | undefined)[];\r\n\r\n  feeConfig?: {\r\n    feeAmount: BN;\r\n    feeAccount: PublicKey;\r\n  };\r\n\r\n  expirationTime: number | undefined;\r\n  allTrade: boolean;\r\n  slippage: number;\r\n  clmmExPriceX64: (BN | undefined)[];\r\n}\r\n\r\nexport type ComputeAmountOutLayout = ComputeAmountOutAmmLayout | ComputeAmountOutRouteLayout;\r\n\r\nexport type MakeSwapInstructionParam = {\r\n  ownerInfo: {\r\n    wallet: PublicKey;\r\n    // tokenAccountA: PublicKey\r\n    // tokenAccountB: PublicKey\r\n\r\n    sourceToken: PublicKey;\r\n    routeToken?: PublicKey;\r\n    destinationToken: PublicKey;\r\n    userPdaAccount?: PublicKey;\r\n  };\r\n\r\n  inputMint: PublicKey;\r\n  routeProgram: PublicKey;\r\n\r\n  // ComputeAmountOutAmmLayout | ComputeAmountOutRouteLayout;\r\n  swapInfo:\r\n  | (\r\n    | (Omit<ComputeAmountOutAmmLayout, \"poolKey\"> & {\r\n      poolKey: PoolKeys[];\r\n      poolInfo: ComputePoolType[];\r\n    })\r\n    | (Omit<ComputeAmountOutRouteLayout, \"poolKey\"> & {\r\n      poolKey: PoolKeys[];\r\n      poolInfo: ComputePoolType[];\r\n    })\r\n  ) & {\r\n    outputMint: PublicKey;\r\n  };\r\n};\r\n\r\nexport interface PoolAccountInfoV4 {\r\n  ammId: string;\r\n  status: BN;\r\n  baseDecimals: number;\r\n  quoteDecimals: number;\r\n  lpDecimals: number;\r\n  baseReserve: BN;\r\n  quoteReserve: BN;\r\n  lpSupply: BN;\r\n  startTime: BN;\r\n}\r\n\r\nexport interface ReturnTypeFetchMultipleInfo {\r\n  [ammId: string]: ComputeAmountOutParam[\"poolInfo\"];\r\n}\r\nexport type ReturnTypeGetAddLiquidityDefaultPool = ApiV3PoolInfoItem | undefined;\r\nexport interface ReturnTypeMakeSwapInstruction {\r\n  signers: (Keypair | Signer)[];\r\n  instructions: TransactionInstruction[];\r\n  instructionTypes: string[];\r\n  address: { [key: string]: PublicKey };\r\n  lookupTableAddress: string[];\r\n}\r\nexport interface ReturnTypeMakeSwapTransaction {\r\n  transactions: {\r\n    transaction: Transaction;\r\n    signer: (Keypair | Signer)[];\r\n  }[];\r\n  address: { [key: string]: PublicKey };\r\n}\r\n\r\nexport type BasicPoolInfo = {\r\n  id: PublicKey;\r\n  version: number;\r\n  mintA: PublicKey;\r\n  mintB: PublicKey;\r\n};\r\n\r\nexport type RoutePathType = {\r\n  [routeMint: string]: {\r\n    skipMintCheck?: boolean;\r\n    mintProgram: PublicKey;\r\n    in: BasicPoolInfo[];\r\n    out: BasicPoolInfo[];\r\n    mDecimals: number;\r\n  };\r\n};\r\n\r\nexport interface ReturnTypeGetAllRoute {\r\n  directPath: BasicPoolInfo[];\r\n  addLiquidityPools: BasicPoolInfo[];\r\n  routePathDict: RoutePathType;\r\n  needSimulate: BasicPoolInfo[];\r\n  needTickArray: BasicPoolInfo[];\r\n  cpmmPoolList: BasicPoolInfo[];\r\n}\r\n\r\nexport type ComputePoolType = ComputeAmountOutParam[\"poolInfo\"] | ComputeClmmPoolInfo | CpmmComputeData;\r\nexport type ComputeRoutePathType = {\r\n  [routeMint: string]: {\r\n    skipMintCheck?: boolean;\r\n    mintProgram: PublicKey;\r\n    in: ComputePoolType[];\r\n    out: ComputePoolType[];\r\n    mDecimals: number;\r\n  };\r\n};\r\n"],"mappings":"kWAAA","names":[]}